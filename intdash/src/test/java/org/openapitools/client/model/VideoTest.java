/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Jpeg;
import org.openapitools.client.model.MP4;
import org.openapitools.client.model.MediaMeasurement;
import org.openapitools.client.model.Playlist;
import org.openapitools.client.model.VideoCodecs;
import org.openapitools.client.model.VideoSourceDataType;
import org.openapitools.client.model.VideoStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for Video
 */
public class VideoTest {
    private final Video model = new Video();

    /**
     * Model tests for Video
     */
    @Test
    public void testVideo() {
        // TODO: test Video
    }

    /**
     * Test the property 'uuid'
     */
    @Test
    public void uuidTest() {
        // TODO: test uuid
    }

    /**
     * Test the property 'measurementUuid'
     */
    @Test
    public void measurementUuidTest() {
        // TODO: test measurementUuid
    }

    /**
     * Test the property 'measurement'
     */
    @Test
    public void measurementTest() {
        // TODO: test measurement
    }

    /**
     * Test the property 'edgeUuid'
     */
    @Test
    public void edgeUuidTest() {
        // TODO: test edgeUuid
    }

    /**
     * Test the property 'channel'
     */
    @Test
    public void channelTest() {
        // TODO: test channel
    }

    /**
     * Test the property 'codec'
     */
    @Test
    public void codecTest() {
        // TODO: test codec
    }

    /**
     * Test the property 'sourceDataType'
     */
    @Test
    public void sourceDataTypeTest() {
        // TODO: test sourceDataType
    }

    /**
     * Test the property 'offsetTime'
     */
    @Test
    public void offsetTimeTest() {
        // TODO: test offsetTime
    }

    /**
     * Test the property 'duration'
     */
    @Test
    public void durationTest() {
        // TODO: test duration
    }

    /**
     * Test the property 'fps'
     */
    @Test
    public void fpsTest() {
        // TODO: test fps
    }

    /**
     * Test the property 'width'
     */
    @Test
    public void widthTest() {
        // TODO: test width
    }

    /**
     * Test the property 'height'
     */
    @Test
    public void heightTest() {
        // TODO: test height
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'hls'
     */
    @Test
    public void hlsTest() {
        // TODO: test hls
    }

    /**
     * Test the property 'mp4s'
     */
    @Test
    public void mp4sTest() {
        // TODO: test mp4s
    }

    /**
     * Test the property 'jpegs'
     */
    @Test
    public void jpegsTest() {
        // TODO: test jpegs
    }

    /**
     * Test the property 'createdAt'
     */
    @Test
    public void createdAtTest() {
        // TODO: test createdAt
    }

    /**
     * Test the property 'updatedAt'
     */
    @Test
    public void updatedAtTest() {
        // TODO: test updatedAt
    }

}
