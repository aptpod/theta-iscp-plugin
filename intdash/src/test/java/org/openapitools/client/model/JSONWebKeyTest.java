/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for JSONWebKey
 */
public class JSONWebKeyTest {
    private final JSONWebKey model = new JSONWebKey();

    /**
     * Model tests for JSONWebKey
     */
    @Test
    public void testJSONWebKey() {
        // TODO: test JSONWebKey
    }

    /**
     * Test the property 'use'
     */
    @Test
    public void useTest() {
        // TODO: test use
    }

    /**
     * Test the property 'kty'
     */
    @Test
    public void ktyTest() {
        // TODO: test kty
    }

    /**
     * Test the property 'kid'
     */
    @Test
    public void kidTest() {
        // TODO: test kid
    }

    /**
     * Test the property 'crv'
     */
    @Test
    public void crvTest() {
        // TODO: test crv
    }

    /**
     * Test the property 'alg'
     */
    @Test
    public void algTest() {
        // TODO: test alg
    }

    /**
     * Test the property 'k'
     */
    @Test
    public void kTest() {
        // TODO: test k
    }

    /**
     * Test the property 'x'
     */
    @Test
    public void xTest() {
        // TODO: test x
    }

    /**
     * Test the property 'y'
     */
    @Test
    public void yTest() {
        // TODO: test y
    }

    /**
     * Test the property 'n'
     */
    @Test
    public void nTest() {
        // TODO: test n
    }

    /**
     * Test the property 'e'
     */
    @Test
    public void eTest() {
        // TODO: test e
    }

    /**
     * Test the property 'd'
     */
    @Test
    public void dTest() {
        // TODO: test d
    }

    /**
     * Test the property 'p'
     */
    @Test
    public void pTest() {
        // TODO: test p
    }

    /**
     * Test the property 'q'
     */
    @Test
    public void qTest() {
        // TODO: test q
    }

    /**
     * Test the property 'dp'
     */
    @Test
    public void dpTest() {
        // TODO: test dp
    }

    /**
     * Test the property 'dq'
     */
    @Test
    public void dqTest() {
        // TODO: test dq
    }

    /**
     * Test the property 'qi'
     */
    @Test
    public void qiTest() {
        // TODO: test qi
    }

    /**
     * Test the property 'x5c'
     */
    @Test
    public void x5cTest() {
        // TODO: test x5c
    }

    /**
     * Test the property 'x5u'
     */
    @Test
    public void x5uTest() {
        // TODO: test x5u
    }

    /**
     * Test the property 'x5t'
     */
    @Test
    public void x5tTest() {
        // TODO: test x5t
    }

    /**
     * Test the property 'x5tHashS256'
     */
    @Test
    public void x5tHashS256Test() {
        // TODO: test x5tHashS256
    }

}
