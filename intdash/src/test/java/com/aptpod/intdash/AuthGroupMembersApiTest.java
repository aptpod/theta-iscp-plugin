/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aptpod.intdash;

import com.aptpod.ApiException;
import org.openapitools.client.model.AddGroupMemberRequest;
import org.openapitools.client.model.ErrorProblem;
import org.openapitools.client.model.Member;
import org.openapitools.client.model.Members;
import org.openapitools.client.model.UpdateGroupMemberRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthGroupMembersApi
 */
@Disabled
public class AuthGroupMembersApiTest {

    private final AuthGroupMembersApi api = new AuthGroupMembersApi();

    /**
     * Add Group Member
     *
     * グループメンバーを追加します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addGroupMemberTest() throws ApiException {
        String groupUuid = null;
        AddGroupMemberRequest addGroupMemberRequest = null;
        Member response = api.addGroupMember(groupUuid, addGroupMemberRequest);
        // TODO: test validations
    }

    /**
     * Add Group Owner Attribute
     *
     * オーナー属性を追加します。オーナー属性を追加したメンバーは自動的にそのグループにおける全ての権限が付与されます。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addGroupOwnerAttributeTest() throws ApiException {
        String groupUuid = null;
        String userUuid = null;
        Member response = api.addGroupOwnerAttribute(groupUuid, userUuid);
        // TODO: test validations
    }

    /**
     * Get Group Member
     *
     * グループメンバーを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupMemberTest() throws ApiException {
        String groupUuid = null;
        String userUuid = null;
        Member response = api.getGroupMember(groupUuid, userUuid);
        // TODO: test validations
    }

    /**
     * List Group Members
     *
     * グループメンバーリストを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGroupMembersTest() throws ApiException {
        String groupUuid = null;
        Boolean isOwner = null;
        List<String> userUuid = null;
        Integer page = null;
        Integer perPage = null;
        String sort = null;
        Members response = api.listGroupMembers(groupUuid, isOwner, userUuid, page, perPage, sort);
        // TODO: test validations
    }

    /**
     * Remove Group Member
     *
     * グループメンバーを除名します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeGroupMemberTest() throws ApiException {
        String groupUuid = null;
        String userUuid = null;
        api.removeGroupMember(groupUuid, userUuid);
        // TODO: test validations
    }

    /**
     * Remove Group Owner Attribute
     *
     * オーナー属性を取り除きます。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeGroupOwnerAttributeTest() throws ApiException {
        String groupUuid = null;
        String userUuid = null;
        api.removeGroupOwnerAttribute(groupUuid, userUuid);
        // TODO: test validations
    }

    /**
     * Update Group Member
     *
     * グループメンバーを更新します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGroupMemberTest() throws ApiException {
        String groupUuid = null;
        String userUuid = null;
        UpdateGroupMemberRequest updateGroupMemberRequest = null;
        Member response = api.updateGroupMember(groupUuid, userUuid, updateGroupMemberRequest);
        // TODO: test validations
    }

}
