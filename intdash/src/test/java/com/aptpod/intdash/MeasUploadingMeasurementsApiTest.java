/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aptpod.intdash;

import com.aptpod.ApiException;
import java.util.Date;
import java.io.File;
import org.openapitools.client.model.MeasurementUploadPostResponse;
import org.openapitools.client.model.MeasurementUploadStatusesGetResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MeasUploadingMeasurementsApi
 */
@Disabled
public class MeasUploadingMeasurementsApiTest {

    private final MeasUploadingMeasurementsApi api = new MeasUploadingMeasurementsApi();

    /**
     * List Uploading Statuses of Measurements
     *
     * （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMeasurementStatusesTest() throws ApiException {
        Integer limit = null;
        String sort = null;
        Integer page = null;
        String order = null;
        MeasurementUploadStatusesGetResponse response = api.listMeasurementStatuses(limit, sort, page, order);
        // TODO: test validations
    }

    /**
     * List Project Uploading Statuses of Measurements
     *
     * （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProjectMeasurementStatusesTest() throws ApiException {
        String projectUuid = null;
        Integer limit = null;
        String sort = null;
        Integer page = null;
        String order = null;
        MeasurementUploadStatusesGetResponse response = api.listProjectMeasurementStatuses(projectUuid, limit, sort, page, order);
        // TODO: test validations
    }

    /**
     * Create Measurement from CSV File
     *
     * CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadMeasurementTest() throws ApiException {
        UUID edgeUuid = null;
        File dataFile = null;
        Date baseTime = null;
        String baseTimeType = null;
        Integer channel = null;
        Boolean measEnd = null;
        String labelDataType = null;
        MeasurementUploadPostResponse response = api.uploadMeasurement(edgeUuid, dataFile, baseTime, baseTimeType, channel, measEnd, labelDataType);
        // TODO: test validations
    }

    /**
     * Store Data Points by CSV File
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/upload&#x60; を使用してください）  CSVファイルをアップロードし、計測にデータを追加します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadMeasurementIntoMeasurementTest() throws ApiException {
        String measurementUuid = null;
        File dataFile = null;
        Integer channel = null;
        Boolean measEnd = null;
        String labelDataType = null;
        MeasurementUploadPostResponse response = api.uploadMeasurementIntoMeasurement(measurementUuid, dataFile, channel, measEnd, labelDataType);
        // TODO: test validations
    }

    /**
     * Create Project Measurement from CSV File
     *
     * CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadProjectMeasurementTest() throws ApiException {
        String projectUuid = null;
        UUID edgeUuid = null;
        File dataFile = null;
        Date baseTime = null;
        String baseTimeType = null;
        Integer channel = null;
        Boolean measEnd = null;
        String labelDataType = null;
        MeasurementUploadPostResponse response = api.uploadProjectMeasurement(projectUuid, edgeUuid, dataFile, baseTime, baseTimeType, channel, measEnd, labelDataType);
        // TODO: test validations
    }

    /**
     * Store Project Data Points by CSV File
     *
     * CSVファイルをアップロードし、計測にデータを追加します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadProjectMeasurementIntoMeasurementTest() throws ApiException {
        String projectUuid = null;
        String measurementUuid = null;
        File dataFile = null;
        Integer channel = null;
        Boolean measEnd = null;
        String labelDataType = null;
        MeasurementUploadPostResponse response = api.uploadProjectMeasurementIntoMeasurement(projectUuid, measurementUuid, dataFile, channel, measEnd, labelDataType);
        // TODO: test validations
    }

}
