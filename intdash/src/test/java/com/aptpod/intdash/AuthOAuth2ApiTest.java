/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aptpod.intdash;

import com.aptpod.ApiException;
import org.openapitools.client.model.IssueToken200Response;
import org.openapitools.client.model.OAuth2JWKs;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthOAuth2Api
 */
@Disabled
public class AuthOAuth2ApiTest {

    private final AuthOAuth2Api api = new AuthOAuth2Api();

    /**
     * List JSON Web Keys
     *
     * JSON Web Keysのリストを取得します。 [RFC7517:JSON Web Key](https://tools.ietf.org/html/rfc7517)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authOauth2JwksGetTest() throws ApiException {
        OAuth2JWKs response = api.authOauth2JwksGet();
        // TODO: test validations
    }

    /**
     * Token Endpoint
     *
     * OAuth2のアクセストークンを取得します。 [RFC6749:The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueTokenTest() throws ApiException {
        String grantType = null;
        String refreshToken = null;
        String tenantUuid = null;
        String username = null;
        String password = null;
        String clientId = null;
        String clientSecret = null;
        String clientCertification = null;
        String redirectUri = null;
        String codeVerifier = null;
        String code = null;
        IssueToken200Response response = api.issueToken(grantType, refreshToken, tenantUuid, username, password, clientId, clientSecret, clientCertification, redirectUri, codeVerifier, code);
        // TODO: test validations
    }

    /**
     * Authorization Endpoint
     *
     * OAuth2認可エンドポイント。 [RFC6749:The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oauth2AuthorizationTest() throws ApiException {
        String clientId = null;
        String responseType = null;
        String redirectUri = null;
        String state = null;
        String codeChallenge = null;
        String codeChallengeMethod = null;
        api.oauth2Authorization(clientId, responseType, redirectUri, state, codeChallenge, codeChallengeMethod);
        // TODO: test validations
    }

    /**
     * Revoke Token
     *
     * トークンを無効化します。 このエンドポイントをコールしてからトークンが無効化されるまで、通常数秒程度かかります。 [RFC7009:OAuth 2.0 Token Revocation](https://tools.ietf.org/html/rfc7009)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reovokeTokenTest() throws ApiException {
        String clientId = null;
        String tokenTypeHint = null;
        String token = null;
        api.reovokeToken(clientId, tokenTypeHint, token);
        // TODO: test validations
    }

}
