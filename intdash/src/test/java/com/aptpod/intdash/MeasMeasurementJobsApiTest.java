/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aptpod.intdash;

import com.aptpod.ApiException;
import org.openapitools.client.model.MeasurementJob;
import org.openapitools.client.model.MeasurementJobs;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MeasMeasurementJobsApi
 */
@Disabled
public class MeasMeasurementJobsApiTest {

    private final MeasMeasurementJobsApi api = new MeasMeasurementJobsApi();

    /**
     * Cancel Measurement Job
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/jobs/{job_uuid}/cancel&#x60; を使用してください） ジョブをキャンセルします。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelMeasurementJobTest() throws ApiException {
        String jobUuid = null;
        api.cancelMeasurementJob(jobUuid);
        // TODO: test validations
    }

    /**
     * Cancel Project Measurement Job
     *
     * ジョブをキャンセルします。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelProjectMeasurementJobTest() throws ApiException {
        String projectUuid = null;
        String jobUuid = null;
        api.cancelProjectMeasurementJob(projectUuid, jobUuid);
        // TODO: test validations
    }

    /**
     * Delete Measurement Job
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/jobs/{job_uuid}&#x60; を使用してください） ジョブを削除します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMeasurementJobTest() throws ApiException {
        String jobUuid = null;
        api.deleteMeasurementJob(jobUuid);
        // TODO: test validations
    }

    /**
     * Delete Project Measurement Job
     *
     * ジョブを削除します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectMeasurementJobTest() throws ApiException {
        String projectUuid = null;
        String jobUuid = null;
        api.deleteProjectMeasurementJob(projectUuid, jobUuid);
        // TODO: test validations
    }

    /**
     * Get Measurement Job
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/jobs/{job_uuid}&#x60; を使用してください） ジョブを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeasurementJobTest() throws ApiException {
        String jobUuid = null;
        MeasurementJob response = api.getMeasurementJob(jobUuid);
        // TODO: test validations
    }

    /**
     * Get Project Measurement Job
     *
     * ジョブを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectMeasurementJobTest() throws ApiException {
        String projectUuid = null;
        String jobUuid = null;
        MeasurementJob response = api.getProjectMeasurementJob(projectUuid, jobUuid);
        // TODO: test validations
    }

    /**
     * List Measurement Jobs
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/jobs&#x60; を使用してください）  ジョブ（CSVファイルを計測に変換するジョブなど）のリストを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMeasurementJobsTest() throws ApiException {
        Integer limit = null;
        String sort = null;
        String status = null;
        Integer page = null;
        String order = null;
        MeasurementJobs response = api.listMeasurementJobs(limit, sort, status, page, order);
        // TODO: test validations
    }

    /**
     * List Project Measurement Jobs
     *
     * ジョブ（CSVファイルを計測に変換するジョブなど）のリストを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProjectMeasurementJobsTest() throws ApiException {
        String projectUuid = null;
        Integer limit = null;
        String sort = null;
        String status = null;
        Integer page = null;
        String order = null;
        MeasurementJobs response = api.listProjectMeasurementJobs(projectUuid, limit, sort, status, page, order);
        // TODO: test validations
    }

}
