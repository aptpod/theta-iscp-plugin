/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aptpod.intdash;

import com.aptpod.ApiException;
import org.openapitools.client.model.APITokenIntrospectionRequest;
import org.openapitools.client.model.APITokenIntrospectionResponse;
import org.openapitools.client.model.CreateEmailRequest;
import org.openapitools.client.model.CreateUserAPITokenRequest;
import org.openapitools.client.model.CreateUserRequest;
import org.openapitools.client.model.ErrorProblem;
import org.openapitools.client.model.PatchEmailRequest;
import org.openapitools.client.model.PatchUserRequest;
import org.openapitools.client.model.Role;
import org.openapitools.client.model.Roles;
import org.openapitools.client.model.UpdateEmailVerifiedRequest;
import org.openapitools.client.model.UpdateUserAPITokenRequest;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserAPIToken;
import org.openapitools.client.model.UserAPITokens;
import org.openapitools.client.model.UserEmail;
import org.openapitools.client.model.UserEmailVerification;
import org.openapitools.client.model.UserPassword;
import org.openapitools.client.model.Users;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthUsersApi
 */
@Disabled
public class AuthUsersApiTest {

    private final AuthUsersApi api = new AuthUsersApi();

    /**
     * Assign Role
     *
     * ユーザーにロールを割り当てます。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignRoleTest() throws ApiException {
        String userUuid = null;
        String roleUuid = null;
        Role response = api.assignRole(userUuid, roleUuid);
        // TODO: test validations
    }

    /**
     * Create API Token
     *
     * ユーザーのAPIトークンを作成します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAPITokenTest() throws ApiException {
        String userUuid = null;
        CreateUserAPITokenRequest createUserAPITokenRequest = null;
        UserAPIToken response = api.createAPIToken(userUuid, createUserAPITokenRequest);
        // TODO: test validations
    }

    /**
     * Create Email
     *
     * ユーザーのメールアドレスを設定します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmailTest() throws ApiException {
        String userUuid = null;
        CreateEmailRequest createEmailRequest = null;
        UserEmail response = api.createEmail(userUuid, createEmailRequest);
        // TODO: test validations
    }

    /**
     * Create Temporary Password
     *
     * ユーザーのパスワードを、ランダムな一時パスワードに変更します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTemporaryPasswordTest() throws ApiException {
        String userUuid = null;
        UserPassword response = api.createTemporaryPassword(userUuid);
        // TODO: test validations
    }

    /**
     * Create User
     *
     * ユーザーを作成します。新しいユーザーには自動生成された一時パスワードが設定されます。 ユーザー作成のリクエストにメールアドレス（ &#x60;email&#x60; ）が含まれていた場合は、 そのメールアドレスに確認メールが送信されます。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        CreateUserRequest createUserRequest = null;
        User response = api.createUser(createUserRequest);
        // TODO: test validations
    }

    /**
     * Delete API Token
     *
     * ユーザーのAPIトークンを削除します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAPITokenTest() throws ApiException {
        String userUuid = null;
        Long userApiTokenId = null;
        api.deleteAPIToken(userUuid, userApiTokenId);
        // TODO: test validations
    }

    /**
     * Delete Email
     *
     * ユーザーのメールアドレスを削除します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmailTest() throws ApiException {
        String userUuid = null;
        Long userEmailId = null;
        api.deleteEmail(userUuid, userEmailId);
        // TODO: test validations
    }

    /**
     * Delete User
     *
     * ユーザーを削除します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String userUuid = null;
        api.deleteUser(userUuid);
        // TODO: test validations
    }

    /**
     * Disable User
     *
     * ユーザーを無効化します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableUserTest() throws ApiException {
        String userUuid = null;
        User response = api.disableUser(userUuid);
        // TODO: test validations
    }

    /**
     * Enable User
     *
     * ユーザーを有効化します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableUserTest() throws ApiException {
        String userUuid = null;
        User response = api.enableUser(userUuid);
        // TODO: test validations
    }

    /**
     * Get User
     *
     * ユーザーを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String userUuid = null;
        User response = api.getUser(userUuid);
        // TODO: test validations
    }

    /**
     * Introspect API Token
     *
     * APIトークンの検証を行います。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void introspectAPITokenTest() throws ApiException {
        APITokenIntrospectionRequest apITokenIntrospectionRequest = null;
        APITokenIntrospectionResponse response = api.introspectAPIToken(apITokenIntrospectionRequest);
        // TODO: test validations
    }

    /**
     * List API Tokens
     *
     * ユーザーのAPIトークンのリストを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAPITokensTest() throws ApiException {
        String userUuid = null;
        UserAPITokens response = api.listAPITokens(userUuid);
        // TODO: test validations
    }

    /**
     * List Users
     *
     * ユーザーのリストを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        List<String> uuid = null;
        List<String> roleUuid = null;
        List<String> name = null;
        List<String> nickname = null;
        List<String> email = null;
        Boolean disabled = null;
        Boolean isSuper = null;
        Boolean isTemporary = null;
        Integer minSignInAttemptCount = null;
        Integer maxSignInAttemptCount = null;
        String sort = null;
        Integer page = null;
        Integer perPage = null;
        Users response = api.listUsers(uuid, roleUuid, name, nickname, email, disabled, isSuper, isTemporary, minSignInAttemptCount, maxSignInAttemptCount, sort, page, perPage);
        // TODO: test validations
    }

    /**
     * List User&#39;s Roles
     *
     * ユーザーのロールのリストを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsersRolesTest() throws ApiException {
        String userUuid = null;
        Roles response = api.listUsersRoles(userUuid);
        // TODO: test validations
    }

    /**
     * Send Verification Email
     *
     * メールアドレスを確認するため確認メールを送信します。メールアドレス確認用トークンを使用します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendVerificationEmailTest() throws ApiException {
        String userUuid = null;
        Long userEmailId = null;
        UserEmailVerification response = api.sendVerificationEmail(userUuid, userEmailId);
        // TODO: test validations
    }

    /**
     * Unassign Role
     *
     * ユーザーへのロールの割り当てを解除します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unassignRoleTest() throws ApiException {
        String userUuid = null;
        String roleUuid = null;
        api.unassignRole(userUuid, roleUuid);
        // TODO: test validations
    }

    /**
     * Unlock Password
     *
     * ユーザーのパスワードのロックを解除します。このユーザーのログイン失敗回数は0にリセットされます。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unlockPasswordTest() throws ApiException {
        String userUuid = null;
        UserPassword response = api.unlockPassword(userUuid);
        // TODO: test validations
    }

    /**
     * Update API Token
     *
     * ユーザーのAPIトークンを更新します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAPITokenTest() throws ApiException {
        String userUuid = null;
        Long userApiTokenId = null;
        UpdateUserAPITokenRequest updateUserAPITokenRequest = null;
        UserAPIToken response = api.updateAPIToken(userUuid, userApiTokenId, updateUserAPITokenRequest);
        // TODO: test validations
    }

    /**
     * Update Email
     *
     * ユーザーのメールアドレスを更新します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmailTest() throws ApiException {
        String userUuid = null;
        Long userEmailId = null;
        PatchEmailRequest patchEmailRequest = null;
        UserEmail response = api.updateEmail(userUuid, userEmailId, patchEmailRequest);
        // TODO: test validations
    }

    /**
     * Set Email as Verified
     *
     * ユーザーのメールアドレスを確認済みにします。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateToVerifiedTest() throws ApiException {
        String userUuid = null;
        Long userEmailId = null;
        UpdateEmailVerifiedRequest updateEmailVerifiedRequest = null;
        UserEmail response = api.updateToVerified(userUuid, userEmailId, updateEmailVerifiedRequest);
        // TODO: test validations
    }

    /**
     * Update User
     *
     * ユーザーを更新します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String userUuid = null;
        PatchUserRequest patchUserRequest = null;
        User response = api.updateUser(userUuid, patchUserRequest);
        // TODO: test validations
    }

}
