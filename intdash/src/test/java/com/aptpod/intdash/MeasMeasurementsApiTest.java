/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aptpod.intdash;

import com.aptpod.ApiException;
import org.openapitools.client.model.CreateMeasurementChunksResult;
import java.io.File;
import org.openapitools.client.model.MeasBaseTime;
import org.openapitools.client.model.MeasBaseTimePut;
import org.openapitools.client.model.MeasBaseTimes;
import org.openapitools.client.model.MeasCreate;
import org.openapitools.client.model.MeasReplace;
import org.openapitools.client.model.Measurement;
import org.openapitools.client.model.MeasurementSectionsGetResponse;
import org.openapitools.client.model.MeasurementSequenceGroup;
import org.openapitools.client.model.MeasurementSequenceGroupReplace;
import org.openapitools.client.model.MeasurementSequenceGroups;
import org.openapitools.client.model.Measurements;
import org.openapitools.client.model.SequenceSummary;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MeasMeasurementsApi
 */
@Disabled
public class MeasMeasurementsApiTest {

    private final MeasMeasurementsApi api = new MeasMeasurementsApi();

    /**
     * Complete Measurement
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/complete&#x60; を使用してください）  計測を回収完了（completed）にします。  completedは、エッジでのデータ取得が終了し（ended）、  かつ、すべてのデータがサーバーに送信されたことを意味します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeMeasurementTest() throws ApiException {
        String measurementUuid = null;
        Measurement response = api.completeMeasurement(measurementUuid);
        // TODO: test validations
    }

    /**
     * Complete Project Measurement
     *
     * 計測を回収完了（completed）にします。 completedは、エッジでのデータ取得が終了し（ended）、 かつ、すべてのデータがサーバーに送信されたことを意味します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeProjectMeasurementTest() throws ApiException {
        String projectUuid = null;
        String measurementUuid = null;
        Measurement response = api.completeProjectMeasurement(projectUuid, measurementUuid);
        // TODO: test validations
    }

    /**
     * Create Measurement
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測を作成します。   - **Note**    - 計測の保護／非保護を切り替える権限を持たないエッジも、      計測作成時は保護された計測を作成することが可能です。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMeasurementTest() throws ApiException {
        MeasCreate measCreate = null;
        Measurement response = api.createMeasurement(measCreate);
        // TODO: test validations
    }

    /**
     * Create Measurement Sequence Chunk
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/sequence/chunks&#x60; を使用してください） 計測シーケンスにチャンクを作成します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMeasurementSequenceChunksTest() throws ApiException {
        File body = null;
        CreateMeasurementChunksResult response = api.createMeasurementSequenceChunks(body);
        // TODO: test validations
    }

    /**
     * Create Measurement with UUID
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 指定したUUIDの計測を作成します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMeasurementWithUUIDTest() throws ApiException {
        String measurementUuid = null;
        MeasCreate measCreate = null;
        Measurement response = api.createMeasurementWithUUID(measurementUuid, measCreate);
        // TODO: test validations
    }

    /**
     * Create Project Measurement
     *
     * 計測を作成します。  - **Note**   - 計測の保護／非保護を切り替える権限を持たないエッジも、     計測作成時は保護された計測を作成することが可能です。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectMeasurementTest() throws ApiException {
        String projectUuid = null;
        MeasCreate measCreate = null;
        Measurement response = api.createProjectMeasurement(projectUuid, measCreate);
        // TODO: test validations
    }

    /**
     * Create Project Measurement Sequence Chunk
     *
     * 計測シーケンスにチャンクを作成します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectMeasurementSequenceChunksTest() throws ApiException {
        String projectUuid = null;
        File body = null;
        CreateMeasurementChunksResult response = api.createProjectMeasurementSequenceChunks(projectUuid, body);
        // TODO: test validations
    }

    /**
     * Create Project Measurement with UUID
     *
     * 指定したUUIDの計測を作成します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectMeasurementWithUUIDTest() throws ApiException {
        String projectUuid = null;
        String measurementUuid = null;
        MeasCreate measCreate = null;
        Measurement response = api.createProjectMeasurementWithUUID(projectUuid, measurementUuid, measCreate);
        // TODO: test validations
    }

    /**
     * Trash Measurement
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください）  計測を削除します。  - **Note**    - 保護された計測は削除できません。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMeasurementTest() throws ApiException {
        String measurementUuid = null;
        api.deleteMeasurement(measurementUuid);
        // TODO: test validations
    }

    /**
     * Delete Measurement Base Time
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を削除します。   指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、  その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。   このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMeasurementBaseTimeTest() throws ApiException {
        String measurementUuid = null;
        String type = null;
        api.deleteMeasurementBaseTime(measurementUuid, type);
        // TODO: test validations
    }

    /**
     * Trash Project Measurement
     *
     * 計測を削除します。 - **Note**   - 保護された計測は削除できません。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectMeasurementTest() throws ApiException {
        String projectUuid = null;
        String measurementUuid = null;
        api.deleteProjectMeasurement(projectUuid, measurementUuid);
        // TODO: test validations
    }

    /**
     * Delete Project Measurement Base Time
     *
     * 基準時刻を削除します。 指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、 その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。 このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectMeasurementBaseTimeTest() throws ApiException {
        String projectUuid = null;
        String measurementUuid = null;
        String type = null;
        api.deleteProjectMeasurementBaseTime(projectUuid, measurementUuid, type);
        // TODO: test validations
    }

    /**
     * End Measurement
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/end&#x60; を使用してください）  計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。  （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endMeasurementTest() throws ApiException {
        String measurementUuid = null;
        SequenceSummary response = api.endMeasurement(measurementUuid);
        // TODO: test validations
    }

    /**
     * End Project Measurement
     *
     * 計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。 （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endProjectMeasurementTest() throws ApiException {
        String projectUuid = null;
        String measurementUuid = null;
        SequenceSummary response = api.endProjectMeasurement(projectUuid, measurementUuid);
        // TODO: test validations
    }

    /**
     * Get Measurement
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測を取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeasurementTest() throws ApiException {
        String measurementUuid = null;
        Measurement response = api.getMeasurement(measurementUuid);
        // TODO: test validations
    }

    /**
     * Get Measurement Base Time
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください） 基準時刻タイプを指定して計測の基準時刻を取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeasurementBaseTimeTest() throws ApiException {
        String measurementUuid = null;
        String type = null;
        MeasBaseTime response = api.getMeasurementBaseTime(measurementUuid, type);
        // TODO: test validations
    }

    /**
     * Get Measurement from Marker
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}/measurement&#x60; を使用してください）
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeasurementFromMeasurementMarkerTest() throws ApiException {
        String measurementMarkerUuid = null;
        Measurement response = api.getMeasurementFromMeasurementMarker(measurementMarkerUuid);
        // TODO: test validations
    }

    /**
     * List Measurement Sections
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sections&#x60; を使用してください）  計測に含まれるセクションのリストを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeasurementSectionsTest() throws ApiException {
        String measurementUuid = null;
        String filter = null;
        Integer limit = null;
        MeasurementSectionsGetResponse response = api.getMeasurementSections(measurementUuid, filter, limit);
        // TODO: test validations
    }

    /**
     * Get Measurement Sequence
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeasurementSequenceTest() throws ApiException {
        String measurementUuid = null;
        String sequencesUuid = null;
        MeasurementSequenceGroup response = api.getMeasurementSequence(measurementUuid, sequencesUuid);
        // TODO: test validations
    }

    /**
     * Get Project Measurement
     *
     * 計測を取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectMeasurementTest() throws ApiException {
        String projectUuid = null;
        String measurementUuid = null;
        Measurement response = api.getProjectMeasurement(projectUuid, measurementUuid);
        // TODO: test validations
    }

    /**
     * Get Project Measurement Base Time
     *
     * 基準時刻タイプを指定して計測の基準時刻を取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectMeasurementBaseTimeTest() throws ApiException {
        String projectUuid = null;
        String measurementUuid = null;
        String type = null;
        MeasBaseTime response = api.getProjectMeasurementBaseTime(projectUuid, measurementUuid, type);
        // TODO: test validations
    }

    /**
     * List Project Measurement Sections
     *
     * 計測に含まれるセクションのリストを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectMeasurementSectionsTest() throws ApiException {
        String projectUuid = null;
        String measurementUuid = null;
        String filter = null;
        Integer limit = null;
        MeasurementSectionsGetResponse response = api.getProjectMeasurementSections(projectUuid, measurementUuid, filter, limit);
        // TODO: test validations
    }

    /**
     * Get Project Measurement Sequence
     *
     * 計測シーケンスを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectMeasurementSequenceTest() throws ApiException {
        String projectUuid = null;
        String measurementUuid = null;
        String sequencesUuid = null;
        MeasurementSequenceGroup response = api.getProjectMeasurementSequence(projectUuid, measurementUuid, sequencesUuid);
        // TODO: test validations
    }

    /**
     * List Measurement Base Times
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes&#x60; を使用してください）  計測の基準時刻のリストを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMeasurementBaseTimesTest() throws ApiException {
        String measurementUuid = null;
        MeasBaseTimes response = api.listMeasurementBaseTimes(measurementUuid);
        // TODO: test validations
    }

    /**
     * List Measurement Sequences
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences&#x60; を使用してください） 計測シーケンスのリストを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMeasurementSequencesTest() throws ApiException {
        String measurementUuid = null;
        MeasurementSequenceGroups response = api.listMeasurementSequences(measurementUuid);
        // TODO: test validations
    }

    /**
     * List Measurements
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測のリストを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMeasurementsTest() throws ApiException {
        List<String> uuid = null;
        Integer name = null;
        String edgeUuid = null;
        String start = null;
        String end = null;
        Boolean partialMatch = null;
        String basetimeType = null;
        Boolean ended = null;
        String since = null;
        Long durationStart = null;
        Long durationEnd = null;
        List<String> status = null;
        Integer limit = null;
        String sort = null;
        Integer page = null;
        String order = null;
        Measurements response = api.listMeasurements(uuid, name, edgeUuid, start, end, partialMatch, basetimeType, ended, since, durationStart, durationEnd, status, limit, sort, page, order);
        // TODO: test validations
    }

    /**
     * List Project Measurement Base Times
     *
     * 計測の基準時刻のリストを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProjectMeasurementBaseTimesTest() throws ApiException {
        String projectUuid = null;
        String measurementUuid = null;
        MeasBaseTimes response = api.listProjectMeasurementBaseTimes(projectUuid, measurementUuid);
        // TODO: test validations
    }

    /**
     * List Project Measurement Sequences
     *
     * 計測シーケンスのリストを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProjectMeasurementSequencesTest() throws ApiException {
        String projectUuid = null;
        String measurementUuid = null;
        MeasurementSequenceGroups response = api.listProjectMeasurementSequences(projectUuid, measurementUuid);
        // TODO: test validations
    }

    /**
     * List Project Measurements
     *
     * 計測のリストを取得します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProjectMeasurementsTest() throws ApiException {
        String projectUuid = null;
        List<String> uuid = null;
        Integer name = null;
        String edgeUuid = null;
        String start = null;
        String end = null;
        Boolean partialMatch = null;
        String basetimeType = null;
        Boolean ended = null;
        String since = null;
        Long durationStart = null;
        Long durationEnd = null;
        List<String> status = null;
        Integer limit = null;
        String sort = null;
        Integer page = null;
        String order = null;
        Measurements response = api.listProjectMeasurements(projectUuid, uuid, name, edgeUuid, start, end, partialMatch, basetimeType, ended, since, durationStart, durationEnd, status, limit, sort, page, order);
        // TODO: test validations
    }

    /**
     * Protect Measurement
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protectMeasurementTest() throws ApiException {
        String measurementUuid = null;
        api.protectMeasurement(measurementUuid);
        // TODO: test validations
    }

    /**
     * Protect Project Measurement
     *
     * 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protectProjectMeasurementTest() throws ApiException {
        String projectUuid = null;
        String measurementUuid = null;
        api.protectProjectMeasurement(projectUuid, measurementUuid);
        // TODO: test validations
    }

    /**
     * Replace Measurement Sequence
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを置換します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replaceMeasurementSequenceTest() throws ApiException {
        String measurementUuid = null;
        String sequencesUuid = null;
        MeasurementSequenceGroupReplace measurementSequenceGroupReplace = null;
        MeasurementSequenceGroup response = api.replaceMeasurementSequence(measurementUuid, sequencesUuid, measurementSequenceGroupReplace);
        // TODO: test validations
    }

    /**
     * Replace Project Measurement Sequence
     *
     * 計測シーケンスを置換します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replaceProjectMeasurementSequenceTest() throws ApiException {
        String projectUuid = null;
        String measurementUuid = null;
        String sequencesUuid = null;
        MeasurementSequenceGroupReplace measurementSequenceGroupReplace = null;
        MeasurementSequenceGroup response = api.replaceProjectMeasurementSequence(projectUuid, measurementUuid, sequencesUuid, measurementSequenceGroupReplace);
        // TODO: test validations
    }

    /**
     * Unprotect Measurement
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測の保護を解除します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unprotectMeasurementTest() throws ApiException {
        String measurementUuid = null;
        api.unprotectMeasurement(measurementUuid);
        // TODO: test validations
    }

    /**
     * Unprotect Project Measurement
     *
     * 計測の保護を解除します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unprotectProjectMeasurementTest() throws ApiException {
        String projectUuid = null;
        String measurementUuid = null;
        api.unprotectProjectMeasurement(projectUuid, measurementUuid);
        // TODO: test validations
    }

    /**
     * Update Measurement
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測に関する情報を更新します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMeasurementTest() throws ApiException {
        String measurementUuid = null;
        MeasReplace measReplace = null;
        api.updateMeasurement(measurementUuid, measReplace);
        // TODO: test validations
    }

    /**
     * Replace Measurement Base Time
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を更新します。  この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、  新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMeasurementBaseTimeTest() throws ApiException {
        String measurementUuid = null;
        String type = null;
        MeasBaseTimePut measBaseTimePut = null;
        MeasBaseTime response = api.updateMeasurementBaseTime(measurementUuid, type, measBaseTimePut);
        // TODO: test validations
    }

    /**
     * Update Measurement Sequence
     *
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを更新します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMeasurementSequenceTest() throws ApiException {
        String measurementUuid = null;
        String sequencesUuid = null;
        MeasurementSequenceGroupReplace measurementSequenceGroupReplace = null;
        MeasurementSequenceGroup response = api.updateMeasurementSequence(measurementUuid, sequencesUuid, measurementSequenceGroupReplace);
        // TODO: test validations
    }

    /**
     * Update Project Measurement
     *
     * 計測に関する情報を更新します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectMeasurementTest() throws ApiException {
        String projectUuid = null;
        String measurementUuid = null;
        MeasReplace measReplace = null;
        api.updateProjectMeasurement(projectUuid, measurementUuid, measReplace);
        // TODO: test validations
    }

    /**
     * Replace Project Measurement Base Time
     *
     * 基準時刻を更新します。 この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、 新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectMeasurementBaseTimeTest() throws ApiException {
        String projectUuid = null;
        String measurementUuid = null;
        String type = null;
        MeasBaseTimePut measBaseTimePut = null;
        MeasBaseTime response = api.updateProjectMeasurementBaseTime(projectUuid, measurementUuid, type, measBaseTimePut);
        // TODO: test validations
    }

    /**
     * Update Project Measurement Sequence
     *
     * 計測シーケンスを更新します。
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectMeasurementSequenceTest() throws ApiException {
        String projectUuid = null;
        String measurementUuid = null;
        String sequencesUuid = null;
        MeasurementSequenceGroupReplace measurementSequenceGroupReplace = null;
        MeasurementSequenceGroup response = api.updateProjectMeasurementSequence(projectUuid, measurementUuid, sequencesUuid, measurementSequenceGroupReplace);
        // TODO: test validations
    }

}
