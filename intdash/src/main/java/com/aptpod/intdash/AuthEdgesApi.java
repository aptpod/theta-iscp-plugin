/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aptpod.intdash;

import com.aptpod.ApiCallback;
import com.aptpod.ApiClient;
import com.aptpod.ApiException;
import com.aptpod.ApiResponse;
import com.aptpod.Configuration;
import com.aptpod.Pair;
import com.aptpod.ProgressRequestBody;
import com.aptpod.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AssignOwnerRequest;
import org.openapitools.client.model.CreateEdgeRequest;
import org.openapitools.client.model.Edge;
import org.openapitools.client.model.EdgeOwner;
import org.openapitools.client.model.Edges;
import org.openapitools.client.model.ErrorProblem;
import org.openapitools.client.model.PatchEdgeRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuthEdgesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthEdgesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthEdgesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for assignOwner
     * @param edgeUuid エッジのUUID (required)
     * @param assignOwnerRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignOwnerCall(String edgeUuid, AssignOwnerRequest assignOwnerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assignOwnerRequest;

        // create path and map variables
        String localVarPath = "/auth/edges/{edge_uuid}/owner"
            .replace("{" + "edge_uuid" + "}", localVarApiClient.escapeString(edgeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignOwnerValidateBeforeCall(String edgeUuid, AssignOwnerRequest assignOwnerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'edgeUuid' is set
        if (edgeUuid == null) {
            throw new ApiException("Missing the required parameter 'edgeUuid' when calling assignOwner(Async)");
        }

        return assignOwnerCall(edgeUuid, assignOwnerRequest, _callback);

    }

    /**
     * Assign Owner
     * エッジに所有者を割り当てます。
     * @param edgeUuid エッジのUUID (required)
     * @param assignOwnerRequest  (optional)
     * @return EdgeOwner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public EdgeOwner assignOwner(String edgeUuid, AssignOwnerRequest assignOwnerRequest) throws ApiException {
        ApiResponse<EdgeOwner> localVarResp = assignOwnerWithHttpInfo(edgeUuid, assignOwnerRequest);
        return localVarResp.getData();
    }

    /**
     * Assign Owner
     * エッジに所有者を割り当てます。
     * @param edgeUuid エッジのUUID (required)
     * @param assignOwnerRequest  (optional)
     * @return ApiResponse&lt;EdgeOwner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EdgeOwner> assignOwnerWithHttpInfo(String edgeUuid, AssignOwnerRequest assignOwnerRequest) throws ApiException {
        okhttp3.Call localVarCall = assignOwnerValidateBeforeCall(edgeUuid, assignOwnerRequest, null);
        Type localVarReturnType = new TypeToken<EdgeOwner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign Owner (asynchronously)
     * エッジに所有者を割り当てます。
     * @param edgeUuid エッジのUUID (required)
     * @param assignOwnerRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignOwnerAsync(String edgeUuid, AssignOwnerRequest assignOwnerRequest, final ApiCallback<EdgeOwner> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignOwnerValidateBeforeCall(edgeUuid, assignOwnerRequest, _callback);
        Type localVarReturnType = new TypeToken<EdgeOwner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEdge
     * @param createEdgeRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEdgeCall(CreateEdgeRequest createEdgeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEdgeRequest;

        // create path and map variables
        String localVarPath = "/auth/edges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEdgeValidateBeforeCall(CreateEdgeRequest createEdgeRequest, final ApiCallback _callback) throws ApiException {
        return createEdgeCall(createEdgeRequest, _callback);

    }

    /**
     * Create Edge
     * 所有者がない状態でエッジを作成します。
     * @param createEdgeRequest  (optional)
     * @return Edge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public Edge createEdge(CreateEdgeRequest createEdgeRequest) throws ApiException {
        ApiResponse<Edge> localVarResp = createEdgeWithHttpInfo(createEdgeRequest);
        return localVarResp.getData();
    }

    /**
     * Create Edge
     * 所有者がない状態でエッジを作成します。
     * @param createEdgeRequest  (optional)
     * @return ApiResponse&lt;Edge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Edge> createEdgeWithHttpInfo(CreateEdgeRequest createEdgeRequest) throws ApiException {
        okhttp3.Call localVarCall = createEdgeValidateBeforeCall(createEdgeRequest, null);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Edge (asynchronously)
     * 所有者がない状態でエッジを作成します。
     * @param createEdgeRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEdgeAsync(CreateEdgeRequest createEdgeRequest, final ApiCallback<Edge> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEdgeValidateBeforeCall(createEdgeRequest, _callback);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMyEdge
     * @param createEdgeRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMyEdgeCall(CreateEdgeRequest createEdgeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEdgeRequest;

        // create path and map variables
        String localVarPath = "/auth/users/me/edges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMyEdgeValidateBeforeCall(CreateEdgeRequest createEdgeRequest, final ApiCallback _callback) throws ApiException {
        return createMyEdgeCall(createEdgeRequest, _callback);

    }

    /**
     * Create My Edge
     * 新しいエッジを作成し、自分（ユーザー）を所有者に設定します。
     * @param createEdgeRequest  (optional)
     * @return Edge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public Edge createMyEdge(CreateEdgeRequest createEdgeRequest) throws ApiException {
        ApiResponse<Edge> localVarResp = createMyEdgeWithHttpInfo(createEdgeRequest);
        return localVarResp.getData();
    }

    /**
     * Create My Edge
     * 新しいエッジを作成し、自分（ユーザー）を所有者に設定します。
     * @param createEdgeRequest  (optional)
     * @return ApiResponse&lt;Edge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Edge> createMyEdgeWithHttpInfo(CreateEdgeRequest createEdgeRequest) throws ApiException {
        okhttp3.Call localVarCall = createMyEdgeValidateBeforeCall(createEdgeRequest, null);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create My Edge (asynchronously)
     * 新しいエッジを作成し、自分（ユーザー）を所有者に設定します。
     * @param createEdgeRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMyEdgeAsync(CreateEdgeRequest createEdgeRequest, final ApiCallback<Edge> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMyEdgeValidateBeforeCall(createEdgeRequest, _callback);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMyEdgeWithUUID
     * @param edgeUuid エッジのUUID (required)
     * @param createEdgeRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMyEdgeWithUUIDCall(String edgeUuid, CreateEdgeRequest createEdgeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEdgeRequest;

        // create path and map variables
        String localVarPath = "/auth/users/me/edges/{edge_uuid}"
            .replace("{" + "edge_uuid" + "}", localVarApiClient.escapeString(edgeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMyEdgeWithUUIDValidateBeforeCall(String edgeUuid, CreateEdgeRequest createEdgeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'edgeUuid' is set
        if (edgeUuid == null) {
            throw new ApiException("Missing the required parameter 'edgeUuid' when calling createMyEdgeWithUUID(Async)");
        }

        return createMyEdgeWithUUIDCall(edgeUuid, createEdgeRequest, _callback);

    }

    /**
     * Create My Edge With UUID
     * 指定したUUIDを持つ新しいエッジを作成し、自分を所有者に設定します。
     * @param edgeUuid エッジのUUID (required)
     * @param createEdgeRequest  (optional)
     * @return Edge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public Edge createMyEdgeWithUUID(String edgeUuid, CreateEdgeRequest createEdgeRequest) throws ApiException {
        ApiResponse<Edge> localVarResp = createMyEdgeWithUUIDWithHttpInfo(edgeUuid, createEdgeRequest);
        return localVarResp.getData();
    }

    /**
     * Create My Edge With UUID
     * 指定したUUIDを持つ新しいエッジを作成し、自分を所有者に設定します。
     * @param edgeUuid エッジのUUID (required)
     * @param createEdgeRequest  (optional)
     * @return ApiResponse&lt;Edge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Edge> createMyEdgeWithUUIDWithHttpInfo(String edgeUuid, CreateEdgeRequest createEdgeRequest) throws ApiException {
        okhttp3.Call localVarCall = createMyEdgeWithUUIDValidateBeforeCall(edgeUuid, createEdgeRequest, null);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create My Edge With UUID (asynchronously)
     * 指定したUUIDを持つ新しいエッジを作成し、自分を所有者に設定します。
     * @param edgeUuid エッジのUUID (required)
     * @param createEdgeRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMyEdgeWithUUIDAsync(String edgeUuid, CreateEdgeRequest createEdgeRequest, final ApiCallback<Edge> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMyEdgeWithUUIDValidateBeforeCall(edgeUuid, createEdgeRequest, _callback);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUsersEdge
     * @param userUuid  (required)
     * @param createEdgeRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUsersEdgeCall(String userUuid, CreateEdgeRequest createEdgeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEdgeRequest;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}/edges"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUsersEdgeValidateBeforeCall(String userUuid, CreateEdgeRequest createEdgeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling createUsersEdge(Async)");
        }

        return createUsersEdgeCall(userUuid, createEdgeRequest, _callback);

    }

    /**
     * Create User&#39;s Edge
     * 指定されたユーザーを所有者とするエッジを作成します。
     * @param userUuid  (required)
     * @param createEdgeRequest  (optional)
     * @return Edge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public Edge createUsersEdge(String userUuid, CreateEdgeRequest createEdgeRequest) throws ApiException {
        ApiResponse<Edge> localVarResp = createUsersEdgeWithHttpInfo(userUuid, createEdgeRequest);
        return localVarResp.getData();
    }

    /**
     * Create User&#39;s Edge
     * 指定されたユーザーを所有者とするエッジを作成します。
     * @param userUuid  (required)
     * @param createEdgeRequest  (optional)
     * @return ApiResponse&lt;Edge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Edge> createUsersEdgeWithHttpInfo(String userUuid, CreateEdgeRequest createEdgeRequest) throws ApiException {
        okhttp3.Call localVarCall = createUsersEdgeValidateBeforeCall(userUuid, createEdgeRequest, null);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create User&#39;s Edge (asynchronously)
     * 指定されたユーザーを所有者とするエッジを作成します。
     * @param userUuid  (required)
     * @param createEdgeRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUsersEdgeAsync(String userUuid, CreateEdgeRequest createEdgeRequest, final ApiCallback<Edge> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUsersEdgeValidateBeforeCall(userUuid, createEdgeRequest, _callback);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEdge
     * @param edgeUuid エッジのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEdgeCall(String edgeUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/edges/{edge_uuid}"
            .replace("{" + "edge_uuid" + "}", localVarApiClient.escapeString(edgeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEdgeValidateBeforeCall(String edgeUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'edgeUuid' is set
        if (edgeUuid == null) {
            throw new ApiException("Missing the required parameter 'edgeUuid' when calling deleteEdge(Async)");
        }

        return deleteEdgeCall(edgeUuid, _callback);

    }

    /**
     * Delete Edge
     * エッジを削除します。
     * @param edgeUuid エッジのUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteEdge(String edgeUuid) throws ApiException {
        deleteEdgeWithHttpInfo(edgeUuid);
    }

    /**
     * Delete Edge
     * エッジを削除します。
     * @param edgeUuid エッジのUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteEdgeWithHttpInfo(String edgeUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteEdgeValidateBeforeCall(edgeUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Edge (asynchronously)
     * エッジを削除します。
     * @param edgeUuid エッジのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEdgeAsync(String edgeUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEdgeValidateBeforeCall(edgeUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMyEdge
     * @param edgeUuid エッジのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMyEdgeCall(String edgeUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/users/me/edges/{edge_uuid}"
            .replace("{" + "edge_uuid" + "}", localVarApiClient.escapeString(edgeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMyEdgeValidateBeforeCall(String edgeUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'edgeUuid' is set
        if (edgeUuid == null) {
            throw new ApiException("Missing the required parameter 'edgeUuid' when calling deleteMyEdge(Async)");
        }

        return deleteMyEdgeCall(edgeUuid, _callback);

    }

    /**
     * Delete My Edge
     * 自分（ユーザー）が所有するエッジを削除します。
     * @param edgeUuid エッジのUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMyEdge(String edgeUuid) throws ApiException {
        deleteMyEdgeWithHttpInfo(edgeUuid);
    }

    /**
     * Delete My Edge
     * 自分（ユーザー）が所有するエッジを削除します。
     * @param edgeUuid エッジのUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMyEdgeWithHttpInfo(String edgeUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteMyEdgeValidateBeforeCall(edgeUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete My Edge (asynchronously)
     * 自分（ユーザー）が所有するエッジを削除します。
     * @param edgeUuid エッジのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMyEdgeAsync(String edgeUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMyEdgeValidateBeforeCall(edgeUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUsersEdge
     * @param userUuid  (required)
     * @param edgeUuid エッジのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUsersEdgeCall(String userUuid, String edgeUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}/edges/{edge_uuid}"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "edge_uuid" + "}", localVarApiClient.escapeString(edgeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUsersEdgeValidateBeforeCall(String userUuid, String edgeUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling deleteUsersEdge(Async)");
        }

        // verify the required parameter 'edgeUuid' is set
        if (edgeUuid == null) {
            throw new ApiException("Missing the required parameter 'edgeUuid' when calling deleteUsersEdge(Async)");
        }

        return deleteUsersEdgeCall(userUuid, edgeUuid, _callback);

    }

    /**
     * Delete User&#39;s Edge
     * ユーザーが所有するエッジを削除します。
     * @param userUuid  (required)
     * @param edgeUuid エッジのUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUsersEdge(String userUuid, String edgeUuid) throws ApiException {
        deleteUsersEdgeWithHttpInfo(userUuid, edgeUuid);
    }

    /**
     * Delete User&#39;s Edge
     * ユーザーが所有するエッジを削除します。
     * @param userUuid  (required)
     * @param edgeUuid エッジのUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUsersEdgeWithHttpInfo(String userUuid, String edgeUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteUsersEdgeValidateBeforeCall(userUuid, edgeUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete User&#39;s Edge (asynchronously)
     * ユーザーが所有するエッジを削除します。
     * @param userUuid  (required)
     * @param edgeUuid エッジのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUsersEdgeAsync(String userUuid, String edgeUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUsersEdgeValidateBeforeCall(userUuid, edgeUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEdge
     * @param edgeUuid エッジのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEdgeCall(String edgeUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/edges/{edge_uuid}"
            .replace("{" + "edge_uuid" + "}", localVarApiClient.escapeString(edgeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEdgeValidateBeforeCall(String edgeUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'edgeUuid' is set
        if (edgeUuid == null) {
            throw new ApiException("Missing the required parameter 'edgeUuid' when calling getEdge(Async)");
        }

        return getEdgeCall(edgeUuid, _callback);

    }

    /**
     * Get Edge
     * エッジを取得します。
     * @param edgeUuid エッジのUUID (required)
     * @return Edge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Edge getEdge(String edgeUuid) throws ApiException {
        ApiResponse<Edge> localVarResp = getEdgeWithHttpInfo(edgeUuid);
        return localVarResp.getData();
    }

    /**
     * Get Edge
     * エッジを取得します。
     * @param edgeUuid エッジのUUID (required)
     * @return ApiResponse&lt;Edge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Edge> getEdgeWithHttpInfo(String edgeUuid) throws ApiException {
        okhttp3.Call localVarCall = getEdgeValidateBeforeCall(edgeUuid, null);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Edge (asynchronously)
     * エッジを取得します。
     * @param edgeUuid エッジのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEdgeAsync(String edgeUuid, final ApiCallback<Edge> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEdgeValidateBeforeCall(edgeUuid, _callback);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMeAsEdge
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeAsEdgeCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/edges/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeAsEdgeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getMeAsEdgeCall(_callback);

    }

    /**
     * Get Edge having the same UUID as Me
     * 自分のUUIDと同じエッジUUIDを持つエッジを取得します。
     * @return Edge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Edge getMeAsEdge() throws ApiException {
        ApiResponse<Edge> localVarResp = getMeAsEdgeWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Edge having the same UUID as Me
     * 自分のUUIDと同じエッジUUIDを持つエッジを取得します。
     * @return ApiResponse&lt;Edge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Edge> getMeAsEdgeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getMeAsEdgeValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Edge having the same UUID as Me (asynchronously)
     * 自分のUUIDと同じエッジUUIDを持つエッジを取得します。
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeAsEdgeAsync(final ApiCallback<Edge> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeAsEdgeValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMyEdge
     * @param edgeUuid エッジのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMyEdgeCall(String edgeUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/users/me/edges/{edge_uuid}"
            .replace("{" + "edge_uuid" + "}", localVarApiClient.escapeString(edgeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMyEdgeValidateBeforeCall(String edgeUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'edgeUuid' is set
        if (edgeUuid == null) {
            throw new ApiException("Missing the required parameter 'edgeUuid' when calling getMyEdge(Async)");
        }

        return getMyEdgeCall(edgeUuid, _callback);

    }

    /**
     * Get My Edge
     * 自分（ユーザー）が所有するエッジを取得します。
     * @param edgeUuid エッジのUUID (required)
     * @return Edge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Edge getMyEdge(String edgeUuid) throws ApiException {
        ApiResponse<Edge> localVarResp = getMyEdgeWithHttpInfo(edgeUuid);
        return localVarResp.getData();
    }

    /**
     * Get My Edge
     * 自分（ユーザー）が所有するエッジを取得します。
     * @param edgeUuid エッジのUUID (required)
     * @return ApiResponse&lt;Edge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Edge> getMyEdgeWithHttpInfo(String edgeUuid) throws ApiException {
        okhttp3.Call localVarCall = getMyEdgeValidateBeforeCall(edgeUuid, null);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get My Edge (asynchronously)
     * 自分（ユーザー）が所有するエッジを取得します。
     * @param edgeUuid エッジのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMyEdgeAsync(String edgeUuid, final ApiCallback<Edge> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMyEdgeValidateBeforeCall(edgeUuid, _callback);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsersEdge
     * @param userUuid  (required)
     * @param edgeUuid エッジのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersEdgeCall(String userUuid, String edgeUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}/edges/{edge_uuid}"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "edge_uuid" + "}", localVarApiClient.escapeString(edgeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersEdgeValidateBeforeCall(String userUuid, String edgeUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling getUsersEdge(Async)");
        }

        // verify the required parameter 'edgeUuid' is set
        if (edgeUuid == null) {
            throw new ApiException("Missing the required parameter 'edgeUuid' when calling getUsersEdge(Async)");
        }

        return getUsersEdgeCall(userUuid, edgeUuid, _callback);

    }

    /**
     * Get User&#39;s Edge
     * ユーザーが所有するエッジを取得します。
     * @param userUuid  (required)
     * @param edgeUuid エッジのUUID (required)
     * @return Edge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Edge getUsersEdge(String userUuid, String edgeUuid) throws ApiException {
        ApiResponse<Edge> localVarResp = getUsersEdgeWithHttpInfo(userUuid, edgeUuid);
        return localVarResp.getData();
    }

    /**
     * Get User&#39;s Edge
     * ユーザーが所有するエッジを取得します。
     * @param userUuid  (required)
     * @param edgeUuid エッジのUUID (required)
     * @return ApiResponse&lt;Edge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Edge> getUsersEdgeWithHttpInfo(String userUuid, String edgeUuid) throws ApiException {
        okhttp3.Call localVarCall = getUsersEdgeValidateBeforeCall(userUuid, edgeUuid, null);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User&#39;s Edge (asynchronously)
     * ユーザーが所有するエッジを取得します。
     * @param userUuid  (required)
     * @param edgeUuid エッジのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersEdgeAsync(String userUuid, String edgeUuid, final ApiCallback<Edge> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersEdgeValidateBeforeCall(userUuid, edgeUuid, _callback);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listEdges
     * @param uuid エッジのUUID (optional)
     * @param name 名前による部分一致検索 (optional)
     * @param nickname 表示名による部分一致検索 (optional)
     * @param ownerUuid 所有者ユーザーのUUID (optional)
     * @param hasOwner 所有者の有無。  * &#x60;true&#x60; : 所有者が設定されているエッジを取得します。 * &#x60;false&#x60; : 所有者が設定されていないエッジを取得します。 (optional)
     * @param sort 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at (optional, default to name+)
     * @param page 取得するページの番号 (optional, default to 1)
     * @param perPage 1回のリクエストで取得する件数 (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEdgesCall(List<String> uuid, List<String> name, List<String> nickname, List<String> ownerUuid, String hasOwner, String sort, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/edges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "uuid", uuid));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (nickname != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "nickname", nickname));
        }

        if (ownerUuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "owner_uuid", ownerUuid));
        }

        if (hasOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_owner", hasOwner));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEdgesValidateBeforeCall(List<String> uuid, List<String> name, List<String> nickname, List<String> ownerUuid, String hasOwner, String sort, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return listEdgesCall(uuid, name, nickname, ownerUuid, hasOwner, sort, page, perPage, _callback);

    }

    /**
     * List Edges
     * エッジのリストを取得します。
     * @param uuid エッジのUUID (optional)
     * @param name 名前による部分一致検索 (optional)
     * @param nickname 表示名による部分一致検索 (optional)
     * @param ownerUuid 所有者ユーザーのUUID (optional)
     * @param hasOwner 所有者の有無。  * &#x60;true&#x60; : 所有者が設定されているエッジを取得します。 * &#x60;false&#x60; : 所有者が設定されていないエッジを取得します。 (optional)
     * @param sort 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at (optional, default to name+)
     * @param page 取得するページの番号 (optional, default to 1)
     * @param perPage 1回のリクエストで取得する件数 (optional, default to 30)
     * @return Edges
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Edges listEdges(List<String> uuid, List<String> name, List<String> nickname, List<String> ownerUuid, String hasOwner, String sort, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Edges> localVarResp = listEdgesWithHttpInfo(uuid, name, nickname, ownerUuid, hasOwner, sort, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List Edges
     * エッジのリストを取得します。
     * @param uuid エッジのUUID (optional)
     * @param name 名前による部分一致検索 (optional)
     * @param nickname 表示名による部分一致検索 (optional)
     * @param ownerUuid 所有者ユーザーのUUID (optional)
     * @param hasOwner 所有者の有無。  * &#x60;true&#x60; : 所有者が設定されているエッジを取得します。 * &#x60;false&#x60; : 所有者が設定されていないエッジを取得します。 (optional)
     * @param sort 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at (optional, default to name+)
     * @param page 取得するページの番号 (optional, default to 1)
     * @param perPage 1回のリクエストで取得する件数 (optional, default to 30)
     * @return ApiResponse&lt;Edges&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Edges> listEdgesWithHttpInfo(List<String> uuid, List<String> name, List<String> nickname, List<String> ownerUuid, String hasOwner, String sort, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listEdgesValidateBeforeCall(uuid, name, nickname, ownerUuid, hasOwner, sort, page, perPage, null);
        Type localVarReturnType = new TypeToken<Edges>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Edges (asynchronously)
     * エッジのリストを取得します。
     * @param uuid エッジのUUID (optional)
     * @param name 名前による部分一致検索 (optional)
     * @param nickname 表示名による部分一致検索 (optional)
     * @param ownerUuid 所有者ユーザーのUUID (optional)
     * @param hasOwner 所有者の有無。  * &#x60;true&#x60; : 所有者が設定されているエッジを取得します。 * &#x60;false&#x60; : 所有者が設定されていないエッジを取得します。 (optional)
     * @param sort 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at (optional, default to name+)
     * @param page 取得するページの番号 (optional, default to 1)
     * @param perPage 1回のリクエストで取得する件数 (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEdgesAsync(List<String> uuid, List<String> name, List<String> nickname, List<String> ownerUuid, String hasOwner, String sort, Integer page, Integer perPage, final ApiCallback<Edges> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEdgesValidateBeforeCall(uuid, name, nickname, ownerUuid, hasOwner, sort, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Edges>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMyEdges
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMyEdgesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/users/me/edges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMyEdgesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listMyEdgesCall(_callback);

    }

    /**
     * List My Edges
     * 自分（ユーザー）が所有するエッジのリストを取得します。
     * @return Edges
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Edges listMyEdges() throws ApiException {
        ApiResponse<Edges> localVarResp = listMyEdgesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List My Edges
     * 自分（ユーザー）が所有するエッジのリストを取得します。
     * @return ApiResponse&lt;Edges&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Edges> listMyEdgesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listMyEdgesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Edges>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List My Edges (asynchronously)
     * 自分（ユーザー）が所有するエッジのリストを取得します。
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMyEdgesAsync(final ApiCallback<Edges> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMyEdgesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Edges>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUsersEdges
     * @param userUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsersEdgesCall(String userUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}/edges"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUsersEdgesValidateBeforeCall(String userUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling listUsersEdges(Async)");
        }

        return listUsersEdgesCall(userUuid, _callback);

    }

    /**
     * List User&#39;s Edges
     * 指定されたユーザーが所有するエッジのリストを取得します。
     * @param userUuid  (required)
     * @return Edges
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Edges listUsersEdges(String userUuid) throws ApiException {
        ApiResponse<Edges> localVarResp = listUsersEdgesWithHttpInfo(userUuid);
        return localVarResp.getData();
    }

    /**
     * List User&#39;s Edges
     * 指定されたユーザーが所有するエッジのリストを取得します。
     * @param userUuid  (required)
     * @return ApiResponse&lt;Edges&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Edges> listUsersEdgesWithHttpInfo(String userUuid) throws ApiException {
        okhttp3.Call localVarCall = listUsersEdgesValidateBeforeCall(userUuid, null);
        Type localVarReturnType = new TypeToken<Edges>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List User&#39;s Edges (asynchronously)
     * 指定されたユーザーが所有するエッジのリストを取得します。
     * @param userUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsersEdgesAsync(String userUuid, final ApiCallback<Edges> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUsersEdgesValidateBeforeCall(userUuid, _callback);
        Type localVarReturnType = new TypeToken<Edges>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeOwner
     * @param edgeUuid エッジのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeOwnerCall(String edgeUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/edges/{edge_uuid}/owner"
            .replace("{" + "edge_uuid" + "}", localVarApiClient.escapeString(edgeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeOwnerValidateBeforeCall(String edgeUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'edgeUuid' is set
        if (edgeUuid == null) {
            throw new ApiException("Missing the required parameter 'edgeUuid' when calling removeOwner(Async)");
        }

        return removeOwnerCall(edgeUuid, _callback);

    }

    /**
     * Unassign Owner
     * エッジに所有者がない状態にします。
     * @param edgeUuid エッジのUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void removeOwner(String edgeUuid) throws ApiException {
        removeOwnerWithHttpInfo(edgeUuid);
    }

    /**
     * Unassign Owner
     * エッジに所有者がない状態にします。
     * @param edgeUuid エッジのUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeOwnerWithHttpInfo(String edgeUuid) throws ApiException {
        okhttp3.Call localVarCall = removeOwnerValidateBeforeCall(edgeUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unassign Owner (asynchronously)
     * エッジに所有者がない状態にします。
     * @param edgeUuid エッジのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeOwnerAsync(String edgeUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeOwnerValidateBeforeCall(edgeUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEdge
     * @param edgeUuid エッジのUUID (required)
     * @param patchEdgeRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEdgeCall(String edgeUuid, PatchEdgeRequest patchEdgeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchEdgeRequest;

        // create path and map variables
        String localVarPath = "/auth/edges/{edge_uuid}"
            .replace("{" + "edge_uuid" + "}", localVarApiClient.escapeString(edgeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEdgeValidateBeforeCall(String edgeUuid, PatchEdgeRequest patchEdgeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'edgeUuid' is set
        if (edgeUuid == null) {
            throw new ApiException("Missing the required parameter 'edgeUuid' when calling updateEdge(Async)");
        }

        return updateEdgeCall(edgeUuid, patchEdgeRequest, _callback);

    }

    /**
     * Update Edge
     * エッジを更新します。
     * @param edgeUuid エッジのUUID (required)
     * @param patchEdgeRequest  (optional)
     * @return Edge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Edge updateEdge(String edgeUuid, PatchEdgeRequest patchEdgeRequest) throws ApiException {
        ApiResponse<Edge> localVarResp = updateEdgeWithHttpInfo(edgeUuid, patchEdgeRequest);
        return localVarResp.getData();
    }

    /**
     * Update Edge
     * エッジを更新します。
     * @param edgeUuid エッジのUUID (required)
     * @param patchEdgeRequest  (optional)
     * @return ApiResponse&lt;Edge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Edge> updateEdgeWithHttpInfo(String edgeUuid, PatchEdgeRequest patchEdgeRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEdgeValidateBeforeCall(edgeUuid, patchEdgeRequest, null);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Edge (asynchronously)
     * エッジを更新します。
     * @param edgeUuid エッジのUUID (required)
     * @param patchEdgeRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEdgeAsync(String edgeUuid, PatchEdgeRequest patchEdgeRequest, final ApiCallback<Edge> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEdgeValidateBeforeCall(edgeUuid, patchEdgeRequest, _callback);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMyEdge
     * @param edgeUuid エッジのUUID (required)
     * @param patchEdgeRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMyEdgeCall(String edgeUuid, PatchEdgeRequest patchEdgeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchEdgeRequest;

        // create path and map variables
        String localVarPath = "/auth/users/me/edges/{edge_uuid}"
            .replace("{" + "edge_uuid" + "}", localVarApiClient.escapeString(edgeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMyEdgeValidateBeforeCall(String edgeUuid, PatchEdgeRequest patchEdgeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'edgeUuid' is set
        if (edgeUuid == null) {
            throw new ApiException("Missing the required parameter 'edgeUuid' when calling updateMyEdge(Async)");
        }

        return updateMyEdgeCall(edgeUuid, patchEdgeRequest, _callback);

    }

    /**
     * Update My Edge
     * 自分（ユーザー）が所有するエッジを更新します。
     * @param edgeUuid エッジのUUID (required)
     * @param patchEdgeRequest  (optional)
     * @return Edge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Edge updateMyEdge(String edgeUuid, PatchEdgeRequest patchEdgeRequest) throws ApiException {
        ApiResponse<Edge> localVarResp = updateMyEdgeWithHttpInfo(edgeUuid, patchEdgeRequest);
        return localVarResp.getData();
    }

    /**
     * Update My Edge
     * 自分（ユーザー）が所有するエッジを更新します。
     * @param edgeUuid エッジのUUID (required)
     * @param patchEdgeRequest  (optional)
     * @return ApiResponse&lt;Edge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Edge> updateMyEdgeWithHttpInfo(String edgeUuid, PatchEdgeRequest patchEdgeRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMyEdgeValidateBeforeCall(edgeUuid, patchEdgeRequest, null);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update My Edge (asynchronously)
     * 自分（ユーザー）が所有するエッジを更新します。
     * @param edgeUuid エッジのUUID (required)
     * @param patchEdgeRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMyEdgeAsync(String edgeUuid, PatchEdgeRequest patchEdgeRequest, final ApiCallback<Edge> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMyEdgeValidateBeforeCall(edgeUuid, patchEdgeRequest, _callback);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUsersEdge
     * @param userUuid  (required)
     * @param edgeUuid エッジのUUID (required)
     * @param patchEdgeRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUsersEdgeCall(String userUuid, String edgeUuid, PatchEdgeRequest patchEdgeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchEdgeRequest;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}/edges/{edge_uuid}"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "edge_uuid" + "}", localVarApiClient.escapeString(edgeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUsersEdgeValidateBeforeCall(String userUuid, String edgeUuid, PatchEdgeRequest patchEdgeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling updateUsersEdge(Async)");
        }

        // verify the required parameter 'edgeUuid' is set
        if (edgeUuid == null) {
            throw new ApiException("Missing the required parameter 'edgeUuid' when calling updateUsersEdge(Async)");
        }

        return updateUsersEdgeCall(userUuid, edgeUuid, patchEdgeRequest, _callback);

    }

    /**
     * Update User&#39;s Edge
     * ユーザーが所有するエッジを更新します。
     * @param userUuid  (required)
     * @param edgeUuid エッジのUUID (required)
     * @param patchEdgeRequest  (optional)
     * @return Edge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Edge updateUsersEdge(String userUuid, String edgeUuid, PatchEdgeRequest patchEdgeRequest) throws ApiException {
        ApiResponse<Edge> localVarResp = updateUsersEdgeWithHttpInfo(userUuid, edgeUuid, patchEdgeRequest);
        return localVarResp.getData();
    }

    /**
     * Update User&#39;s Edge
     * ユーザーが所有するエッジを更新します。
     * @param userUuid  (required)
     * @param edgeUuid エッジのUUID (required)
     * @param patchEdgeRequest  (optional)
     * @return ApiResponse&lt;Edge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Edge> updateUsersEdgeWithHttpInfo(String userUuid, String edgeUuid, PatchEdgeRequest patchEdgeRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUsersEdgeValidateBeforeCall(userUuid, edgeUuid, patchEdgeRequest, null);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update User&#39;s Edge (asynchronously)
     * ユーザーが所有するエッジを更新します。
     * @param userUuid  (required)
     * @param edgeUuid エッジのUUID (required)
     * @param patchEdgeRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUsersEdgeAsync(String userUuid, String edgeUuid, PatchEdgeRequest patchEdgeRequest, final ApiCallback<Edge> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUsersEdgeValidateBeforeCall(userUuid, edgeUuid, patchEdgeRequest, _callback);
        Type localVarReturnType = new TypeToken<Edge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
