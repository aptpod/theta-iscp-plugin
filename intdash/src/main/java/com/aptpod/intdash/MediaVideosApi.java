/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aptpod.intdash;

import com.aptpod.ApiCallback;
import com.aptpod.ApiClient;
import com.aptpod.ApiException;
import com.aptpod.ApiResponse;
import com.aptpod.Configuration;
import com.aptpod.Pair;
import com.aptpod.ProgressRequestBody;
import com.aptpod.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateJpegRequest;
import org.openapitools.client.model.CreateMP4Request;
import org.openapitools.client.model.ErrorProblemMedia;
import java.io.File;
import org.openapitools.client.model.Jpeg;
import org.openapitools.client.model.Jpegs;
import org.openapitools.client.model.MP4;
import org.openapitools.client.model.MP4s;
import org.openapitools.client.model.Video;
import org.openapitools.client.model.Videos;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MediaVideosApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MediaVideosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MediaVideosApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelCreatingJpeg
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call cancelCreatingJpegCall(String videoUuid, String jpegUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/videos/{video_uuid}/jpegs/{jpeg_uuid}/cancel_convert"
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()))
            .replace("{" + "jpeg_uuid" + "}", localVarApiClient.escapeString(jpegUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelCreatingJpegValidateBeforeCall(String videoUuid, String jpegUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling cancelCreatingJpeg(Async)");
        }

        // verify the required parameter 'jpegUuid' is set
        if (jpegUuid == null) {
            throw new ApiException("Missing the required parameter 'jpegUuid' when calling cancelCreatingJpeg(Async)");
        }

        return cancelCreatingJpegCall(videoUuid, jpegUuid, _callback);

    }

    /**
     * Cancel Creating JPEG
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からJPEGデータへの変換をキャンセルします。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @return Jpeg
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Jpeg cancelCreatingJpeg(String videoUuid, String jpegUuid) throws ApiException {
        ApiResponse<Jpeg> localVarResp = cancelCreatingJpegWithHttpInfo(videoUuid, jpegUuid);
        return localVarResp.getData();
    }

    /**
     * Cancel Creating JPEG
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からJPEGデータへの変換をキャンセルします。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @return ApiResponse&lt;Jpeg&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Jpeg> cancelCreatingJpegWithHttpInfo(String videoUuid, String jpegUuid) throws ApiException {
        okhttp3.Call localVarCall = cancelCreatingJpegValidateBeforeCall(videoUuid, jpegUuid, null);
        Type localVarReturnType = new TypeToken<Jpeg>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel Creating JPEG (asynchronously)
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からJPEGデータへの変換をキャンセルします。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call cancelCreatingJpegAsync(String videoUuid, String jpegUuid, final ApiCallback<Jpeg> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelCreatingJpegValidateBeforeCall(videoUuid, jpegUuid, _callback);
        Type localVarReturnType = new TypeToken<Jpeg>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelCreatingMP4
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call cancelCreatingMP4Call(String videoUuid, String mp4Uuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/videos/{video_uuid}/mp4s/{mp4_uuid}/cancel_convert"
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()))
            .replace("{" + "mp4_uuid" + "}", localVarApiClient.escapeString(mp4Uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelCreatingMP4ValidateBeforeCall(String videoUuid, String mp4Uuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling cancelCreatingMP4(Async)");
        }

        // verify the required parameter 'mp4Uuid' is set
        if (mp4Uuid == null) {
            throw new ApiException("Missing the required parameter 'mp4Uuid' when calling cancelCreatingMP4(Async)");
        }

        return cancelCreatingMP4Call(videoUuid, mp4Uuid, _callback);

    }

    /**
     * Cancel Creating MP4
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からMP4データへの変換をキャンセルします。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @return MP4
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MP4 cancelCreatingMP4(String videoUuid, String mp4Uuid) throws ApiException {
        ApiResponse<MP4> localVarResp = cancelCreatingMP4WithHttpInfo(videoUuid, mp4Uuid);
        return localVarResp.getData();
    }

    /**
     * Cancel Creating MP4
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からMP4データへの変換をキャンセルします。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @return ApiResponse&lt;MP4&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MP4> cancelCreatingMP4WithHttpInfo(String videoUuid, String mp4Uuid) throws ApiException {
        okhttp3.Call localVarCall = cancelCreatingMP4ValidateBeforeCall(videoUuid, mp4Uuid, null);
        Type localVarReturnType = new TypeToken<MP4>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel Creating MP4 (asynchronously)
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からMP4データへの変換をキャンセルします。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call cancelCreatingMP4Async(String videoUuid, String mp4Uuid, final ApiCallback<MP4> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelCreatingMP4ValidateBeforeCall(videoUuid, mp4Uuid, _callback);
        Type localVarReturnType = new TypeToken<MP4>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelCreatingProjectJpeg
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelCreatingProjectJpegCall(String projectUuid, String videoUuid, String jpegUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}/cancel_convert"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()))
            .replace("{" + "jpeg_uuid" + "}", localVarApiClient.escapeString(jpegUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelCreatingProjectJpegValidateBeforeCall(String projectUuid, String videoUuid, String jpegUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling cancelCreatingProjectJpeg(Async)");
        }

        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling cancelCreatingProjectJpeg(Async)");
        }

        // verify the required parameter 'jpegUuid' is set
        if (jpegUuid == null) {
            throw new ApiException("Missing the required parameter 'jpegUuid' when calling cancelCreatingProjectJpeg(Async)");
        }

        return cancelCreatingProjectJpegCall(projectUuid, videoUuid, jpegUuid, _callback);

    }

    /**
     * Cancel Creating Project JPEG
     * 動画（video）からJPEGデータへの変換をキャンセルします。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @return Jpeg
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public Jpeg cancelCreatingProjectJpeg(String projectUuid, String videoUuid, String jpegUuid) throws ApiException {
        ApiResponse<Jpeg> localVarResp = cancelCreatingProjectJpegWithHttpInfo(projectUuid, videoUuid, jpegUuid);
        return localVarResp.getData();
    }

    /**
     * Cancel Creating Project JPEG
     * 動画（video）からJPEGデータへの変換をキャンセルします。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @return ApiResponse&lt;Jpeg&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Jpeg> cancelCreatingProjectJpegWithHttpInfo(String projectUuid, String videoUuid, String jpegUuid) throws ApiException {
        okhttp3.Call localVarCall = cancelCreatingProjectJpegValidateBeforeCall(projectUuid, videoUuid, jpegUuid, null);
        Type localVarReturnType = new TypeToken<Jpeg>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel Creating Project JPEG (asynchronously)
     * 動画（video）からJPEGデータへの変換をキャンセルします。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelCreatingProjectJpegAsync(String projectUuid, String videoUuid, String jpegUuid, final ApiCallback<Jpeg> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelCreatingProjectJpegValidateBeforeCall(projectUuid, videoUuid, jpegUuid, _callback);
        Type localVarReturnType = new TypeToken<Jpeg>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelCreatingProjectMP4
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelCreatingProjectMP4Call(String projectUuid, String videoUuid, String mp4Uuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/projects/{project_uuid}/videos/{video_uuid}/mp4s/{mp4_uuid}/cancel_convert"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()))
            .replace("{" + "mp4_uuid" + "}", localVarApiClient.escapeString(mp4Uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelCreatingProjectMP4ValidateBeforeCall(String projectUuid, String videoUuid, String mp4Uuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling cancelCreatingProjectMP4(Async)");
        }

        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling cancelCreatingProjectMP4(Async)");
        }

        // verify the required parameter 'mp4Uuid' is set
        if (mp4Uuid == null) {
            throw new ApiException("Missing the required parameter 'mp4Uuid' when calling cancelCreatingProjectMP4(Async)");
        }

        return cancelCreatingProjectMP4Call(projectUuid, videoUuid, mp4Uuid, _callback);

    }

    /**
     * Cancel Creating Project MP4
     * 動画（video）からMP4データへの変換をキャンセルします。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @return MP4
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public MP4 cancelCreatingProjectMP4(String projectUuid, String videoUuid, String mp4Uuid) throws ApiException {
        ApiResponse<MP4> localVarResp = cancelCreatingProjectMP4WithHttpInfo(projectUuid, videoUuid, mp4Uuid);
        return localVarResp.getData();
    }

    /**
     * Cancel Creating Project MP4
     * 動画（video）からMP4データへの変換をキャンセルします。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @return ApiResponse&lt;MP4&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MP4> cancelCreatingProjectMP4WithHttpInfo(String projectUuid, String videoUuid, String mp4Uuid) throws ApiException {
        okhttp3.Call localVarCall = cancelCreatingProjectMP4ValidateBeforeCall(projectUuid, videoUuid, mp4Uuid, null);
        Type localVarReturnType = new TypeToken<MP4>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel Creating Project MP4 (asynchronously)
     * 動画（video）からMP4データへの変換をキャンセルします。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelCreatingProjectMP4Async(String projectUuid, String videoUuid, String mp4Uuid, final ApiCallback<MP4> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelCreatingProjectMP4ValidateBeforeCall(projectUuid, videoUuid, mp4Uuid, _callback);
        Type localVarReturnType = new TypeToken<MP4>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createJpeg
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param createJpegRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createJpegCall(String videoUuid, CreateJpegRequest createJpegRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createJpegRequest;

        // create path and map variables
        String localVarPath = "/media/videos/{video_uuid}/jpegs"
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createJpegValidateBeforeCall(String videoUuid, CreateJpegRequest createJpegRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling createJpeg(Async)");
        }

        return createJpegCall(videoUuid, createJpegRequest, _callback);

    }

    /**
     * Create JPEG
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してJPEGデータを作成します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param createJpegRequest  (optional)
     * @return Jpeg
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Jpeg createJpeg(String videoUuid, CreateJpegRequest createJpegRequest) throws ApiException {
        ApiResponse<Jpeg> localVarResp = createJpegWithHttpInfo(videoUuid, createJpegRequest);
        return localVarResp.getData();
    }

    /**
     * Create JPEG
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してJPEGデータを作成します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param createJpegRequest  (optional)
     * @return ApiResponse&lt;Jpeg&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Jpeg> createJpegWithHttpInfo(String videoUuid, CreateJpegRequest createJpegRequest) throws ApiException {
        okhttp3.Call localVarCall = createJpegValidateBeforeCall(videoUuid, createJpegRequest, null);
        Type localVarReturnType = new TypeToken<Jpeg>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create JPEG (asynchronously)
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してJPEGデータを作成します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param createJpegRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createJpegAsync(String videoUuid, CreateJpegRequest createJpegRequest, final ApiCallback<Jpeg> _callback) throws ApiException {

        okhttp3.Call localVarCall = createJpegValidateBeforeCall(videoUuid, createJpegRequest, _callback);
        Type localVarReturnType = new TypeToken<Jpeg>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMP4
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param createMP4Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createMP4Call(String videoUuid, CreateMP4Request createMP4Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMP4Request;

        // create path and map variables
        String localVarPath = "/media/videos/{video_uuid}/mp4s"
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMP4ValidateBeforeCall(String videoUuid, CreateMP4Request createMP4Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling createMP4(Async)");
        }

        return createMP4Call(videoUuid, createMP4Request, _callback);

    }

    /**
     * Create MP4
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してMP4データを作成します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param createMP4Request  (optional)
     * @return MP4
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MP4 createMP4(String videoUuid, CreateMP4Request createMP4Request) throws ApiException {
        ApiResponse<MP4> localVarResp = createMP4WithHttpInfo(videoUuid, createMP4Request);
        return localVarResp.getData();
    }

    /**
     * Create MP4
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してMP4データを作成します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param createMP4Request  (optional)
     * @return ApiResponse&lt;MP4&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MP4> createMP4WithHttpInfo(String videoUuid, CreateMP4Request createMP4Request) throws ApiException {
        okhttp3.Call localVarCall = createMP4ValidateBeforeCall(videoUuid, createMP4Request, null);
        Type localVarReturnType = new TypeToken<MP4>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create MP4 (asynchronously)
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してMP4データを作成します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param createMP4Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createMP4Async(String videoUuid, CreateMP4Request createMP4Request, final ApiCallback<MP4> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMP4ValidateBeforeCall(videoUuid, createMP4Request, _callback);
        Type localVarReturnType = new TypeToken<MP4>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProjectJpeg
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param createJpegRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectJpegCall(String projectUuid, String videoUuid, CreateJpegRequest createJpegRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createJpegRequest;

        // create path and map variables
        String localVarPath = "/media/projects/{project_uuid}/videos/{video_uuid}/jpegs"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectJpegValidateBeforeCall(String projectUuid, String videoUuid, CreateJpegRequest createJpegRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling createProjectJpeg(Async)");
        }

        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling createProjectJpeg(Async)");
        }

        return createProjectJpegCall(projectUuid, videoUuid, createJpegRequest, _callback);

    }

    /**
     * Create Project JPEG
     * 動画（video）を変換してJPEGデータを作成します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param createJpegRequest  (optional)
     * @return Jpeg
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public Jpeg createProjectJpeg(String projectUuid, String videoUuid, CreateJpegRequest createJpegRequest) throws ApiException {
        ApiResponse<Jpeg> localVarResp = createProjectJpegWithHttpInfo(projectUuid, videoUuid, createJpegRequest);
        return localVarResp.getData();
    }

    /**
     * Create Project JPEG
     * 動画（video）を変換してJPEGデータを作成します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param createJpegRequest  (optional)
     * @return ApiResponse&lt;Jpeg&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Jpeg> createProjectJpegWithHttpInfo(String projectUuid, String videoUuid, CreateJpegRequest createJpegRequest) throws ApiException {
        okhttp3.Call localVarCall = createProjectJpegValidateBeforeCall(projectUuid, videoUuid, createJpegRequest, null);
        Type localVarReturnType = new TypeToken<Jpeg>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Project JPEG (asynchronously)
     * 動画（video）を変換してJPEGデータを作成します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param createJpegRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectJpegAsync(String projectUuid, String videoUuid, CreateJpegRequest createJpegRequest, final ApiCallback<Jpeg> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectJpegValidateBeforeCall(projectUuid, videoUuid, createJpegRequest, _callback);
        Type localVarReturnType = new TypeToken<Jpeg>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProjectMP4
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param createMP4Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectMP4Call(String projectUuid, String videoUuid, CreateMP4Request createMP4Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMP4Request;

        // create path and map variables
        String localVarPath = "/media/projects/{project_uuid}/videos/{video_uuid}/mp4s"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectMP4ValidateBeforeCall(String projectUuid, String videoUuid, CreateMP4Request createMP4Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling createProjectMP4(Async)");
        }

        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling createProjectMP4(Async)");
        }

        return createProjectMP4Call(projectUuid, videoUuid, createMP4Request, _callback);

    }

    /**
     * Create Project MP4
     * 動画（video）を変換してMP4データを作成します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param createMP4Request  (optional)
     * @return MP4
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public MP4 createProjectMP4(String projectUuid, String videoUuid, CreateMP4Request createMP4Request) throws ApiException {
        ApiResponse<MP4> localVarResp = createProjectMP4WithHttpInfo(projectUuid, videoUuid, createMP4Request);
        return localVarResp.getData();
    }

    /**
     * Create Project MP4
     * 動画（video）を変換してMP4データを作成します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param createMP4Request  (optional)
     * @return ApiResponse&lt;MP4&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MP4> createProjectMP4WithHttpInfo(String projectUuid, String videoUuid, CreateMP4Request createMP4Request) throws ApiException {
        okhttp3.Call localVarCall = createProjectMP4ValidateBeforeCall(projectUuid, videoUuid, createMP4Request, null);
        Type localVarReturnType = new TypeToken<MP4>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Project MP4 (asynchronously)
     * 動画（video）を変換してMP4データを作成します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param createMP4Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectMP4Async(String projectUuid, String videoUuid, CreateMP4Request createMP4Request, final ApiCallback<MP4> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectMP4ValidateBeforeCall(projectUuid, videoUuid, createMP4Request, _callback);
        Type localVarReturnType = new TypeToken<MP4>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteJpeg
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteJpegCall(String videoUuid, String jpegUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/videos/{video_uuid}/jpegs/{jpeg_uuid}"
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()))
            .replace("{" + "jpeg_uuid" + "}", localVarApiClient.escapeString(jpegUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteJpegValidateBeforeCall(String videoUuid, String jpegUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling deleteJpeg(Async)");
        }

        // verify the required parameter 'jpegUuid' is set
        if (jpegUuid == null) {
            throw new ApiException("Missing the required parameter 'jpegUuid' when calling deleteJpeg(Async)");
        }

        return deleteJpegCall(videoUuid, jpegUuid, _callback);

    }

    /**
     * Delete JPEG
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータを削除します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteJpeg(String videoUuid, String jpegUuid) throws ApiException {
        deleteJpegWithHttpInfo(videoUuid, jpegUuid);
    }

    /**
     * Delete JPEG
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータを削除します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteJpegWithHttpInfo(String videoUuid, String jpegUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteJpegValidateBeforeCall(videoUuid, jpegUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete JPEG (asynchronously)
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータを削除します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteJpegAsync(String videoUuid, String jpegUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteJpegValidateBeforeCall(videoUuid, jpegUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMP4
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteMP4Call(String videoUuid, String mp4Uuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/videos/{video_uuid}/mp4s/{mp4_uuid}"
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()))
            .replace("{" + "mp4_uuid" + "}", localVarApiClient.escapeString(mp4Uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMP4ValidateBeforeCall(String videoUuid, String mp4Uuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling deleteMP4(Async)");
        }

        // verify the required parameter 'mp4Uuid' is set
        if (mp4Uuid == null) {
            throw new ApiException("Missing the required parameter 'mp4Uuid' when calling deleteMP4(Async)");
        }

        return deleteMP4Call(videoUuid, mp4Uuid, _callback);

    }

    /**
     * Delete MP4
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データを削除します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteMP4(String videoUuid, String mp4Uuid) throws ApiException {
        deleteMP4WithHttpInfo(videoUuid, mp4Uuid);
    }

    /**
     * Delete MP4
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データを削除します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteMP4WithHttpInfo(String videoUuid, String mp4Uuid) throws ApiException {
        okhttp3.Call localVarCall = deleteMP4ValidateBeforeCall(videoUuid, mp4Uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete MP4 (asynchronously)
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データを削除します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteMP4Async(String videoUuid, String mp4Uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMP4ValidateBeforeCall(videoUuid, mp4Uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProjectJpeg
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectJpegCall(String projectUuid, String videoUuid, String jpegUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()))
            .replace("{" + "jpeg_uuid" + "}", localVarApiClient.escapeString(jpegUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectJpegValidateBeforeCall(String projectUuid, String videoUuid, String jpegUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling deleteProjectJpeg(Async)");
        }

        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling deleteProjectJpeg(Async)");
        }

        // verify the required parameter 'jpegUuid' is set
        if (jpegUuid == null) {
            throw new ApiException("Missing the required parameter 'jpegUuid' when calling deleteProjectJpeg(Async)");
        }

        return deleteProjectJpegCall(projectUuid, videoUuid, jpegUuid, _callback);

    }

    /**
     * Delete Project JPEG
     * 動画（video）から変換されたJPEGデータを削除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProjectJpeg(String projectUuid, String videoUuid, String jpegUuid) throws ApiException {
        deleteProjectJpegWithHttpInfo(projectUuid, videoUuid, jpegUuid);
    }

    /**
     * Delete Project JPEG
     * 動画（video）から変換されたJPEGデータを削除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProjectJpegWithHttpInfo(String projectUuid, String videoUuid, String jpegUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectJpegValidateBeforeCall(projectUuid, videoUuid, jpegUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Project JPEG (asynchronously)
     * 動画（video）から変換されたJPEGデータを削除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectJpegAsync(String projectUuid, String videoUuid, String jpegUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectJpegValidateBeforeCall(projectUuid, videoUuid, jpegUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProjectMP4
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectMP4Call(String projectUuid, String videoUuid, String mp4Uuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/projects/{project_uuid}/videos/{video_uuid}/mp4s/{mp4_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()))
            .replace("{" + "mp4_uuid" + "}", localVarApiClient.escapeString(mp4Uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectMP4ValidateBeforeCall(String projectUuid, String videoUuid, String mp4Uuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling deleteProjectMP4(Async)");
        }

        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling deleteProjectMP4(Async)");
        }

        // verify the required parameter 'mp4Uuid' is set
        if (mp4Uuid == null) {
            throw new ApiException("Missing the required parameter 'mp4Uuid' when calling deleteProjectMP4(Async)");
        }

        return deleteProjectMP4Call(projectUuid, videoUuid, mp4Uuid, _callback);

    }

    /**
     * Delete Project MP4
     * 動画（video）から変換されたMP4データを削除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProjectMP4(String projectUuid, String videoUuid, String mp4Uuid) throws ApiException {
        deleteProjectMP4WithHttpInfo(projectUuid, videoUuid, mp4Uuid);
    }

    /**
     * Delete Project MP4
     * 動画（video）から変換されたMP4データを削除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProjectMP4WithHttpInfo(String projectUuid, String videoUuid, String mp4Uuid) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectMP4ValidateBeforeCall(projectUuid, videoUuid, mp4Uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Project MP4 (asynchronously)
     * 動画（video）から変換されたMP4データを削除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectMP4Async(String projectUuid, String videoUuid, String mp4Uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectMP4ValidateBeforeCall(projectUuid, videoUuid, mp4Uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJpeg
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getJpegCall(String videoUuid, String jpegUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/videos/{video_uuid}/jpegs/{jpeg_uuid}"
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()))
            .replace("{" + "jpeg_uuid" + "}", localVarApiClient.escapeString(jpegUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJpegValidateBeforeCall(String videoUuid, String jpegUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling getJpeg(Async)");
        }

        // verify the required parameter 'jpegUuid' is set
        if (jpegUuid == null) {
            throw new ApiException("Missing the required parameter 'jpegUuid' when calling getJpeg(Async)");
        }

        return getJpegCall(videoUuid, jpegUuid, _callback);

    }

    /**
     * Get JPEG
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @return Jpeg
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Jpeg getJpeg(String videoUuid, String jpegUuid) throws ApiException {
        ApiResponse<Jpeg> localVarResp = getJpegWithHttpInfo(videoUuid, jpegUuid);
        return localVarResp.getData();
    }

    /**
     * Get JPEG
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @return ApiResponse&lt;Jpeg&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Jpeg> getJpegWithHttpInfo(String videoUuid, String jpegUuid) throws ApiException {
        okhttp3.Call localVarCall = getJpegValidateBeforeCall(videoUuid, jpegUuid, null);
        Type localVarReturnType = new TypeToken<Jpeg>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get JPEG (asynchronously)
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getJpegAsync(String videoUuid, String jpegUuid, final ApiCallback<Jpeg> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJpegValidateBeforeCall(videoUuid, jpegUuid, _callback);
        Type localVarReturnType = new TypeToken<Jpeg>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJpegAsZip
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @param indexes 取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getJpegAsZipCall(String videoUuid, String jpegUuid, List<Integer> indexes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip"
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()))
            .replace("{" + "jpeg_uuid" + "}", localVarApiClient.escapeString(jpegUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (indexes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "indexes", indexes));
        }

        final String[] localVarAccepts = {
            "application/zip"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJpegAsZipValidateBeforeCall(String videoUuid, String jpegUuid, List<Integer> indexes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling getJpegAsZip(Async)");
        }

        // verify the required parameter 'jpegUuid' is set
        if (jpegUuid == null) {
            throw new ApiException("Missing the required parameter 'jpegUuid' when calling getJpegAsZip(Async)");
        }

        return getJpegAsZipCall(videoUuid, jpegUuid, indexes, _callback);

    }

    /**
     * Get JPEG as zip
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） JPEGデータをZIPファイルにまとめた形で取得します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @param indexes 取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public File getJpegAsZip(String videoUuid, String jpegUuid, List<Integer> indexes) throws ApiException {
        ApiResponse<File> localVarResp = getJpegAsZipWithHttpInfo(videoUuid, jpegUuid, indexes);
        return localVarResp.getData();
    }

    /**
     * Get JPEG as zip
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） JPEGデータをZIPファイルにまとめた形で取得します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @param indexes 取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> getJpegAsZipWithHttpInfo(String videoUuid, String jpegUuid, List<Integer> indexes) throws ApiException {
        okhttp3.Call localVarCall = getJpegAsZipValidateBeforeCall(videoUuid, jpegUuid, indexes, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get JPEG as zip (asynchronously)
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） JPEGデータをZIPファイルにまとめた形で取得します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @param indexes 取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getJpegAsZipAsync(String videoUuid, String jpegUuid, List<Integer> indexes, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJpegAsZipValidateBeforeCall(videoUuid, jpegUuid, indexes, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJpegs
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getJpegsCall(String videoUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/videos/{video_uuid}/jpegs"
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJpegsValidateBeforeCall(String videoUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling getJpegs(Async)");
        }

        return getJpegsCall(videoUuid, _callback);

    }

    /**
     * List JPEGs
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータのリストを取得します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @return Jpegs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Jpegs getJpegs(String videoUuid) throws ApiException {
        ApiResponse<Jpegs> localVarResp = getJpegsWithHttpInfo(videoUuid);
        return localVarResp.getData();
    }

    /**
     * List JPEGs
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータのリストを取得します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @return ApiResponse&lt;Jpegs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Jpegs> getJpegsWithHttpInfo(String videoUuid) throws ApiException {
        okhttp3.Call localVarCall = getJpegsValidateBeforeCall(videoUuid, null);
        Type localVarReturnType = new TypeToken<Jpegs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List JPEGs (asynchronously)
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータのリストを取得します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getJpegsAsync(String videoUuid, final ApiCallback<Jpegs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJpegsValidateBeforeCall(videoUuid, _callback);
        Type localVarReturnType = new TypeToken<Jpegs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMP4
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMP4Call(String videoUuid, String mp4Uuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/videos/{video_uuid}/mp4s/{mp4_uuid}"
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()))
            .replace("{" + "mp4_uuid" + "}", localVarApiClient.escapeString(mp4Uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMP4ValidateBeforeCall(String videoUuid, String mp4Uuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling getMP4(Async)");
        }

        // verify the required parameter 'mp4Uuid' is set
        if (mp4Uuid == null) {
            throw new ApiException("Missing the required parameter 'mp4Uuid' when calling getMP4(Async)");
        }

        return getMP4Call(videoUuid, mp4Uuid, _callback);

    }

    /**
     * Get MP4
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データの情報を取得します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @return MP4
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MP4 getMP4(String videoUuid, String mp4Uuid) throws ApiException {
        ApiResponse<MP4> localVarResp = getMP4WithHttpInfo(videoUuid, mp4Uuid);
        return localVarResp.getData();
    }

    /**
     * Get MP4
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データの情報を取得します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @return ApiResponse&lt;MP4&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MP4> getMP4WithHttpInfo(String videoUuid, String mp4Uuid) throws ApiException {
        okhttp3.Call localVarCall = getMP4ValidateBeforeCall(videoUuid, mp4Uuid, null);
        Type localVarReturnType = new TypeToken<MP4>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get MP4 (asynchronously)
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データの情報を取得します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMP4Async(String videoUuid, String mp4Uuid, final ApiCallback<MP4> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMP4ValidateBeforeCall(videoUuid, mp4Uuid, _callback);
        Type localVarReturnType = new TypeToken<MP4>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMP4s
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMP4sCall(String videoUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/videos/{video_uuid}/mp4s"
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMP4sValidateBeforeCall(String videoUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling getMP4s(Async)");
        }

        return getMP4sCall(videoUuid, _callback);

    }

    /**
     * List MP4s
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データのリストを取得します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @return MP4s
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MP4s getMP4s(String videoUuid) throws ApiException {
        ApiResponse<MP4s> localVarResp = getMP4sWithHttpInfo(videoUuid);
        return localVarResp.getData();
    }

    /**
     * List MP4s
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データのリストを取得します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @return ApiResponse&lt;MP4s&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MP4s> getMP4sWithHttpInfo(String videoUuid) throws ApiException {
        okhttp3.Call localVarCall = getMP4sValidateBeforeCall(videoUuid, null);
        Type localVarReturnType = new TypeToken<MP4s>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List MP4s (asynchronously)
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データのリストを取得します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMP4sAsync(String videoUuid, final ApiCallback<MP4s> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMP4sValidateBeforeCall(videoUuid, _callback);
        Type localVarReturnType = new TypeToken<MP4s>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectJpeg
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectJpegCall(String projectUuid, String videoUuid, String jpegUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()))
            .replace("{" + "jpeg_uuid" + "}", localVarApiClient.escapeString(jpegUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectJpegValidateBeforeCall(String projectUuid, String videoUuid, String jpegUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling getProjectJpeg(Async)");
        }

        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling getProjectJpeg(Async)");
        }

        // verify the required parameter 'jpegUuid' is set
        if (jpegUuid == null) {
            throw new ApiException("Missing the required parameter 'jpegUuid' when calling getProjectJpeg(Async)");
        }

        return getProjectJpegCall(projectUuid, videoUuid, jpegUuid, _callback);

    }

    /**
     * Get Project JPEG
     * 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @return Jpeg
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Jpeg getProjectJpeg(String projectUuid, String videoUuid, String jpegUuid) throws ApiException {
        ApiResponse<Jpeg> localVarResp = getProjectJpegWithHttpInfo(projectUuid, videoUuid, jpegUuid);
        return localVarResp.getData();
    }

    /**
     * Get Project JPEG
     * 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @return ApiResponse&lt;Jpeg&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Jpeg> getProjectJpegWithHttpInfo(String projectUuid, String videoUuid, String jpegUuid) throws ApiException {
        okhttp3.Call localVarCall = getProjectJpegValidateBeforeCall(projectUuid, videoUuid, jpegUuid, null);
        Type localVarReturnType = new TypeToken<Jpeg>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Project JPEG (asynchronously)
     * 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectJpegAsync(String projectUuid, String videoUuid, String jpegUuid, final ApiCallback<Jpeg> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectJpegValidateBeforeCall(projectUuid, videoUuid, jpegUuid, _callback);
        Type localVarReturnType = new TypeToken<Jpeg>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectJpegAsZip
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @param indexes 取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectJpegAsZipCall(String projectUuid, String videoUuid, String jpegUuid, List<Integer> indexes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()))
            .replace("{" + "jpeg_uuid" + "}", localVarApiClient.escapeString(jpegUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (indexes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "indexes", indexes));
        }

        final String[] localVarAccepts = {
            "application/zip"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectJpegAsZipValidateBeforeCall(String projectUuid, String videoUuid, String jpegUuid, List<Integer> indexes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling getProjectJpegAsZip(Async)");
        }

        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling getProjectJpegAsZip(Async)");
        }

        // verify the required parameter 'jpegUuid' is set
        if (jpegUuid == null) {
            throw new ApiException("Missing the required parameter 'jpegUuid' when calling getProjectJpegAsZip(Async)");
        }

        return getProjectJpegAsZipCall(projectUuid, videoUuid, jpegUuid, indexes, _callback);

    }

    /**
     * Get Project JPEG as zip
     * JPEGデータをZIPファイルにまとめた形で取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @param indexes 取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public File getProjectJpegAsZip(String projectUuid, String videoUuid, String jpegUuid, List<Integer> indexes) throws ApiException {
        ApiResponse<File> localVarResp = getProjectJpegAsZipWithHttpInfo(projectUuid, videoUuid, jpegUuid, indexes);
        return localVarResp.getData();
    }

    /**
     * Get Project JPEG as zip
     * JPEGデータをZIPファイルにまとめた形で取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @param indexes 取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getProjectJpegAsZipWithHttpInfo(String projectUuid, String videoUuid, String jpegUuid, List<Integer> indexes) throws ApiException {
        okhttp3.Call localVarCall = getProjectJpegAsZipValidateBeforeCall(projectUuid, videoUuid, jpegUuid, indexes, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Project JPEG as zip (asynchronously)
     * JPEGデータをZIPファイルにまとめた形で取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param jpegUuid JPEGのUUID (required)
     * @param indexes 取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectJpegAsZipAsync(String projectUuid, String videoUuid, String jpegUuid, List<Integer> indexes, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectJpegAsZipValidateBeforeCall(projectUuid, videoUuid, jpegUuid, indexes, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectJpegs
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectJpegsCall(String projectUuid, String videoUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/projects/{project_uuid}/videos/{video_uuid}/jpegs"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectJpegsValidateBeforeCall(String projectUuid, String videoUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling getProjectJpegs(Async)");
        }

        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling getProjectJpegs(Async)");
        }

        return getProjectJpegsCall(projectUuid, videoUuid, _callback);

    }

    /**
     * List Project JPEGs
     * 動画（video）から変換されたJPEGデータのリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @return Jpegs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Jpegs getProjectJpegs(String projectUuid, String videoUuid) throws ApiException {
        ApiResponse<Jpegs> localVarResp = getProjectJpegsWithHttpInfo(projectUuid, videoUuid);
        return localVarResp.getData();
    }

    /**
     * List Project JPEGs
     * 動画（video）から変換されたJPEGデータのリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @return ApiResponse&lt;Jpegs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Jpegs> getProjectJpegsWithHttpInfo(String projectUuid, String videoUuid) throws ApiException {
        okhttp3.Call localVarCall = getProjectJpegsValidateBeforeCall(projectUuid, videoUuid, null);
        Type localVarReturnType = new TypeToken<Jpegs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Project JPEGs (asynchronously)
     * 動画（video）から変換されたJPEGデータのリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectJpegsAsync(String projectUuid, String videoUuid, final ApiCallback<Jpegs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectJpegsValidateBeforeCall(projectUuid, videoUuid, _callback);
        Type localVarReturnType = new TypeToken<Jpegs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectMP4
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMP4Call(String projectUuid, String videoUuid, String mp4Uuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/projects/{project_uuid}/videos/{video_uuid}/mp4s/{mp4_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()))
            .replace("{" + "mp4_uuid" + "}", localVarApiClient.escapeString(mp4Uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectMP4ValidateBeforeCall(String projectUuid, String videoUuid, String mp4Uuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling getProjectMP4(Async)");
        }

        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling getProjectMP4(Async)");
        }

        // verify the required parameter 'mp4Uuid' is set
        if (mp4Uuid == null) {
            throw new ApiException("Missing the required parameter 'mp4Uuid' when calling getProjectMP4(Async)");
        }

        return getProjectMP4Call(projectUuid, videoUuid, mp4Uuid, _callback);

    }

    /**
     * Get Project MP4
     * 動画（video）から変換されたMP4データの情報を取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @return MP4
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MP4 getProjectMP4(String projectUuid, String videoUuid, String mp4Uuid) throws ApiException {
        ApiResponse<MP4> localVarResp = getProjectMP4WithHttpInfo(projectUuid, videoUuid, mp4Uuid);
        return localVarResp.getData();
    }

    /**
     * Get Project MP4
     * 動画（video）から変換されたMP4データの情報を取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @return ApiResponse&lt;MP4&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MP4> getProjectMP4WithHttpInfo(String projectUuid, String videoUuid, String mp4Uuid) throws ApiException {
        okhttp3.Call localVarCall = getProjectMP4ValidateBeforeCall(projectUuid, videoUuid, mp4Uuid, null);
        Type localVarReturnType = new TypeToken<MP4>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Project MP4 (asynchronously)
     * 動画（video）から変換されたMP4データの情報を取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param mp4Uuid MP4のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMP4Async(String projectUuid, String videoUuid, String mp4Uuid, final ApiCallback<MP4> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectMP4ValidateBeforeCall(projectUuid, videoUuid, mp4Uuid, _callback);
        Type localVarReturnType = new TypeToken<MP4>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectMP4s
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMP4sCall(String projectUuid, String videoUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/projects/{project_uuid}/videos/{video_uuid}/mp4s"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectMP4sValidateBeforeCall(String projectUuid, String videoUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling getProjectMP4s(Async)");
        }

        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling getProjectMP4s(Async)");
        }

        return getProjectMP4sCall(projectUuid, videoUuid, _callback);

    }

    /**
     * List Project MP4s
     * 動画（video）から変換されたMP4データのリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @return MP4s
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MP4s getProjectMP4s(String projectUuid, String videoUuid) throws ApiException {
        ApiResponse<MP4s> localVarResp = getProjectMP4sWithHttpInfo(projectUuid, videoUuid);
        return localVarResp.getData();
    }

    /**
     * List Project MP4s
     * 動画（video）から変換されたMP4データのリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @return ApiResponse&lt;MP4s&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MP4s> getProjectMP4sWithHttpInfo(String projectUuid, String videoUuid) throws ApiException {
        okhttp3.Call localVarCall = getProjectMP4sValidateBeforeCall(projectUuid, videoUuid, null);
        Type localVarReturnType = new TypeToken<MP4s>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Project MP4s (asynchronously)
     * 動画（video）から変換されたMP4データのリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMP4sAsync(String projectUuid, String videoUuid, final ApiCallback<MP4s> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectMP4sValidateBeforeCall(projectUuid, videoUuid, _callback);
        Type localVarReturnType = new TypeToken<MP4s>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectVideo
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectVideoCall(String projectUuid, String videoUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/projects/{project_uuid}/videos/{video_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectVideoValidateBeforeCall(String projectUuid, String videoUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling getProjectVideo(Async)");
        }

        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling getProjectVideo(Async)");
        }

        return getProjectVideoCall(projectUuid, videoUuid, _callback);

    }

    /**
     * Get Project Video
     * 動画を取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @return Video
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Video getProjectVideo(String projectUuid, String videoUuid) throws ApiException {
        ApiResponse<Video> localVarResp = getProjectVideoWithHttpInfo(projectUuid, videoUuid);
        return localVarResp.getData();
    }

    /**
     * Get Project Video
     * 動画を取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @return ApiResponse&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Video> getProjectVideoWithHttpInfo(String projectUuid, String videoUuid) throws ApiException {
        okhttp3.Call localVarCall = getProjectVideoValidateBeforeCall(projectUuid, videoUuid, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Project Video (asynchronously)
     * 動画を取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectVideoAsync(String projectUuid, String videoUuid, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectVideoValidateBeforeCall(projectUuid, videoUuid, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectVideos
     * @param projectUuid プロジェクトのUUID (required)
     * @param uuid 動画（video）のUUID (optional)
     * @param measUuid 計測のUUID (optional)
     * @param channel チャンネル (optional)
     * @param sort 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to create_at+)
     * @param page 取得するページ番号 (optional, default to 1)
     * @param perPage 1回のリクエストで取得する件数 (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectVideosCall(String projectUuid, String uuid, String measUuid, Integer channel, String sort, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/projects/{project_uuid}/videos"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uuid", uuid));
        }

        if (measUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meas_uuid", measUuid));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectVideosValidateBeforeCall(String projectUuid, String uuid, String measUuid, Integer channel, String sort, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling getProjectVideos(Async)");
        }

        return getProjectVideosCall(projectUuid, uuid, measUuid, channel, sort, page, perPage, _callback);

    }

    /**
     * List Project Videos
     * 動画（video）のリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param uuid 動画（video）のUUID (optional)
     * @param measUuid 計測のUUID (optional)
     * @param channel チャンネル (optional)
     * @param sort 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to create_at+)
     * @param page 取得するページ番号 (optional, default to 1)
     * @param perPage 1回のリクエストで取得する件数 (optional, default to 100)
     * @return Videos
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public Videos getProjectVideos(String projectUuid, String uuid, String measUuid, Integer channel, String sort, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Videos> localVarResp = getProjectVideosWithHttpInfo(projectUuid, uuid, measUuid, channel, sort, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List Project Videos
     * 動画（video）のリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param uuid 動画（video）のUUID (optional)
     * @param measUuid 計測のUUID (optional)
     * @param channel チャンネル (optional)
     * @param sort 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to create_at+)
     * @param page 取得するページ番号 (optional, default to 1)
     * @param perPage 1回のリクエストで取得する件数 (optional, default to 100)
     * @return ApiResponse&lt;Videos&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Videos> getProjectVideosWithHttpInfo(String projectUuid, String uuid, String measUuid, Integer channel, String sort, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getProjectVideosValidateBeforeCall(projectUuid, uuid, measUuid, channel, sort, page, perPage, null);
        Type localVarReturnType = new TypeToken<Videos>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Project Videos (asynchronously)
     * 動画（video）のリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param uuid 動画（video）のUUID (optional)
     * @param measUuid 計測のUUID (optional)
     * @param channel チャンネル (optional)
     * @param sort 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to create_at+)
     * @param page 取得するページ番号 (optional, default to 1)
     * @param perPage 1回のリクエストで取得する件数 (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectVideosAsync(String projectUuid, String uuid, String measUuid, Integer channel, String sort, Integer page, Integer perPage, final ApiCallback<Videos> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectVideosValidateBeforeCall(projectUuid, uuid, measUuid, channel, sort, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Videos>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideo
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVideoCall(String videoUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/videos/{video_uuid}"
            .replace("{" + "video_uuid" + "}", localVarApiClient.escapeString(videoUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoValidateBeforeCall(String videoUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoUuid' is set
        if (videoUuid == null) {
            throw new ApiException("Missing the required parameter 'videoUuid' when calling getVideo(Async)");
        }

        return getVideoCall(videoUuid, _callback);

    }

    /**
     * Get Video
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画を取得します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @return Video
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Video getVideo(String videoUuid) throws ApiException {
        ApiResponse<Video> localVarResp = getVideoWithHttpInfo(videoUuid);
        return localVarResp.getData();
    }

    /**
     * Get Video
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画を取得します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @return ApiResponse&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Video> getVideoWithHttpInfo(String videoUuid) throws ApiException {
        okhttp3.Call localVarCall = getVideoValidateBeforeCall(videoUuid, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Video (asynchronously)
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画を取得します。
     * @param videoUuid 変換元の動画（video）のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVideoAsync(String videoUuid, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoValidateBeforeCall(videoUuid, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideos
     * @param uuid 動画（video）のUUID (optional)
     * @param measUuid 計測のUUID (optional)
     * @param channel チャンネル (optional)
     * @param sort 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to create_at+)
     * @param page 取得するページ番号 (optional, default to 1)
     * @param perPage 1回のリクエストで取得する件数 (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVideosCall(String uuid, String measUuid, Integer channel, String sort, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uuid", uuid));
        }

        if (measUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meas_uuid", measUuid));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideosValidateBeforeCall(String uuid, String measUuid, Integer channel, String sort, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return getVideosCall(uuid, measUuid, channel, sort, page, perPage, _callback);

    }

    /**
     * List Videos
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）のリストを取得します。
     * @param uuid 動画（video）のUUID (optional)
     * @param measUuid 計測のUUID (optional)
     * @param channel チャンネル (optional)
     * @param sort 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to create_at+)
     * @param page 取得するページ番号 (optional, default to 1)
     * @param perPage 1回のリクエストで取得する件数 (optional, default to 100)
     * @return Videos
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Videos getVideos(String uuid, String measUuid, Integer channel, String sort, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Videos> localVarResp = getVideosWithHttpInfo(uuid, measUuid, channel, sort, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List Videos
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）のリストを取得します。
     * @param uuid 動画（video）のUUID (optional)
     * @param measUuid 計測のUUID (optional)
     * @param channel チャンネル (optional)
     * @param sort 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to create_at+)
     * @param page 取得するページ番号 (optional, default to 1)
     * @param perPage 1回のリクエストで取得する件数 (optional, default to 100)
     * @return ApiResponse&lt;Videos&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Videos> getVideosWithHttpInfo(String uuid, String measUuid, Integer channel, String sort, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getVideosValidateBeforeCall(uuid, measUuid, channel, sort, page, perPage, null);
        Type localVarReturnType = new TypeToken<Videos>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Videos (asynchronously)
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）のリストを取得します。
     * @param uuid 動画（video）のUUID (optional)
     * @param measUuid 計測のUUID (optional)
     * @param channel チャンネル (optional)
     * @param sort 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to create_at+)
     * @param page 取得するページ番号 (optional, default to 1)
     * @param perPage 1回のリクエストで取得する件数 (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVideosAsync(String uuid, String measUuid, Integer channel, String sort, Integer page, Integer perPage, final ApiCallback<Videos> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideosValidateBeforeCall(uuid, measUuid, channel, sort, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Videos>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
