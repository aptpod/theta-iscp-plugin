/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aptpod.intdash;

import com.aptpod.ApiCallback;
import com.aptpod.ApiClient;
import com.aptpod.ApiException;
import com.aptpod.ApiResponse;
import com.aptpod.Configuration;
import com.aptpod.Pair;
import com.aptpod.ProgressRequestBody;
import com.aptpod.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateMeasurementChunksResult;
import java.io.File;
import org.openapitools.client.model.MeasBaseTime;
import org.openapitools.client.model.MeasBaseTimePut;
import org.openapitools.client.model.MeasBaseTimes;
import org.openapitools.client.model.MeasCreate;
import org.openapitools.client.model.MeasReplace;
import org.openapitools.client.model.Measurement;
import org.openapitools.client.model.MeasurementSectionsGetResponse;
import org.openapitools.client.model.MeasurementSequenceGroup;
import org.openapitools.client.model.MeasurementSequenceGroupReplace;
import org.openapitools.client.model.MeasurementSequenceGroups;
import org.openapitools.client.model.Measurements;
import org.openapitools.client.model.SequenceSummary;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MeasMeasurementsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MeasMeasurementsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MeasMeasurementsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for completeMeasurement
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call completeMeasurementCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}/complete"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeMeasurementValidateBeforeCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling completeMeasurement(Async)");
        }

        return completeMeasurementCall(measurementUuid, _callback);

    }

    /**
     * Complete Measurement
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/complete&#x60; を使用してください）  計測を回収完了（completed）にします。  completedは、エッジでのデータ取得が終了し（ended）、  かつ、すべてのデータがサーバーに送信されたことを意味します。
     * @param measurementUuid 計測のUUID (required)
     * @return Measurement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Measurement completeMeasurement(String measurementUuid) throws ApiException {
        ApiResponse<Measurement> localVarResp = completeMeasurementWithHttpInfo(measurementUuid);
        return localVarResp.getData();
    }

    /**
     * Complete Measurement
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/complete&#x60; を使用してください）  計測を回収完了（completed）にします。  completedは、エッジでのデータ取得が終了し（ended）、  かつ、すべてのデータがサーバーに送信されたことを意味します。
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;Measurement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Measurement> completeMeasurementWithHttpInfo(String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = completeMeasurementValidateBeforeCall(measurementUuid, null);
        Type localVarReturnType = new TypeToken<Measurement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Complete Measurement (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/complete&#x60; を使用してください）  計測を回収完了（completed）にします。  completedは、エッジでのデータ取得が終了し（ended）、  かつ、すべてのデータがサーバーに送信されたことを意味します。
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call completeMeasurementAsync(String measurementUuid, final ApiCallback<Measurement> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeMeasurementValidateBeforeCall(measurementUuid, _callback);
        Type localVarReturnType = new TypeToken<Measurement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for completeProjectMeasurement
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeProjectMeasurementCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/complete"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeProjectMeasurementValidateBeforeCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling completeProjectMeasurement(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling completeProjectMeasurement(Async)");
        }

        return completeProjectMeasurementCall(projectUuid, measurementUuid, _callback);

    }

    /**
     * Complete Project Measurement
     * 計測を回収完了（completed）にします。 completedは、エッジでのデータ取得が終了し（ended）、 かつ、すべてのデータがサーバーに送信されたことを意味します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @return Measurement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Measurement completeProjectMeasurement(String projectUuid, String measurementUuid) throws ApiException {
        ApiResponse<Measurement> localVarResp = completeProjectMeasurementWithHttpInfo(projectUuid, measurementUuid);
        return localVarResp.getData();
    }

    /**
     * Complete Project Measurement
     * 計測を回収完了（completed）にします。 completedは、エッジでのデータ取得が終了し（ended）、 かつ、すべてのデータがサーバーに送信されたことを意味します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;Measurement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Measurement> completeProjectMeasurementWithHttpInfo(String projectUuid, String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = completeProjectMeasurementValidateBeforeCall(projectUuid, measurementUuid, null);
        Type localVarReturnType = new TypeToken<Measurement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Complete Project Measurement (asynchronously)
     * 計測を回収完了（completed）にします。 completedは、エッジでのデータ取得が終了し（ended）、 かつ、すべてのデータがサーバーに送信されたことを意味します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeProjectMeasurementAsync(String projectUuid, String measurementUuid, final ApiCallback<Measurement> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeProjectMeasurementValidateBeforeCall(projectUuid, measurementUuid, _callback);
        Type localVarReturnType = new TypeToken<Measurement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMeasurement
     * @param measCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createMeasurementCall(MeasCreate measCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = measCreate;

        // create path and map variables
        String localVarPath = "/v1/measurements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMeasurementValidateBeforeCall(MeasCreate measCreate, final ApiCallback _callback) throws ApiException {
        return createMeasurementCall(measCreate, _callback);

    }

    /**
     * Create Measurement
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測を作成します。   - **Note**    - 計測の保護／非保護を切り替える権限を持たないエッジも、      計測作成時は保護された計測を作成することが可能です。
     * @param measCreate  (optional)
     * @return Measurement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Measurement createMeasurement(MeasCreate measCreate) throws ApiException {
        ApiResponse<Measurement> localVarResp = createMeasurementWithHttpInfo(measCreate);
        return localVarResp.getData();
    }

    /**
     * Create Measurement
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測を作成します。   - **Note**    - 計測の保護／非保護を切り替える権限を持たないエッジも、      計測作成時は保護された計測を作成することが可能です。
     * @param measCreate  (optional)
     * @return ApiResponse&lt;Measurement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Measurement> createMeasurementWithHttpInfo(MeasCreate measCreate) throws ApiException {
        okhttp3.Call localVarCall = createMeasurementValidateBeforeCall(measCreate, null);
        Type localVarReturnType = new TypeToken<Measurement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Measurement (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測を作成します。   - **Note**    - 計測の保護／非保護を切り替える権限を持たないエッジも、      計測作成時は保護された計測を作成することが可能です。
     * @param measCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createMeasurementAsync(MeasCreate measCreate, final ApiCallback<Measurement> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMeasurementValidateBeforeCall(measCreate, _callback);
        Type localVarReturnType = new TypeToken<Measurement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMeasurementSequenceChunks
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createMeasurementSequenceChunksCall(File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/measurements/sequences/chunks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.iscp.v2.protobuf",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMeasurementSequenceChunksValidateBeforeCall(File body, final ApiCallback _callback) throws ApiException {
        return createMeasurementSequenceChunksCall(body, _callback);

    }

    /**
     * Create Measurement Sequence Chunk
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/sequence/chunks&#x60; を使用してください） 計測シーケンスにチャンクを作成します。
     * @param body  (optional)
     * @return CreateMeasurementChunksResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CreateMeasurementChunksResult createMeasurementSequenceChunks(File body) throws ApiException {
        ApiResponse<CreateMeasurementChunksResult> localVarResp = createMeasurementSequenceChunksWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create Measurement Sequence Chunk
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/sequence/chunks&#x60; を使用してください） 計測シーケンスにチャンクを作成します。
     * @param body  (optional)
     * @return ApiResponse&lt;CreateMeasurementChunksResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CreateMeasurementChunksResult> createMeasurementSequenceChunksWithHttpInfo(File body) throws ApiException {
        okhttp3.Call localVarCall = createMeasurementSequenceChunksValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateMeasurementChunksResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Measurement Sequence Chunk (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/sequence/chunks&#x60; を使用してください） 計測シーケンスにチャンクを作成します。
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createMeasurementSequenceChunksAsync(File body, final ApiCallback<CreateMeasurementChunksResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMeasurementSequenceChunksValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateMeasurementChunksResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMeasurementWithUUID
     * @param measurementUuid 計測のUUID (required)
     * @param measCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createMeasurementWithUUIDCall(String measurementUuid, MeasCreate measCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = measCreate;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMeasurementWithUUIDValidateBeforeCall(String measurementUuid, MeasCreate measCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling createMeasurementWithUUID(Async)");
        }

        return createMeasurementWithUUIDCall(measurementUuid, measCreate, _callback);

    }

    /**
     * Create Measurement with UUID
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 指定したUUIDの計測を作成します。
     * @param measurementUuid 計測のUUID (required)
     * @param measCreate  (optional)
     * @return Measurement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Measurement createMeasurementWithUUID(String measurementUuid, MeasCreate measCreate) throws ApiException {
        ApiResponse<Measurement> localVarResp = createMeasurementWithUUIDWithHttpInfo(measurementUuid, measCreate);
        return localVarResp.getData();
    }

    /**
     * Create Measurement with UUID
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 指定したUUIDの計測を作成します。
     * @param measurementUuid 計測のUUID (required)
     * @param measCreate  (optional)
     * @return ApiResponse&lt;Measurement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Measurement> createMeasurementWithUUIDWithHttpInfo(String measurementUuid, MeasCreate measCreate) throws ApiException {
        okhttp3.Call localVarCall = createMeasurementWithUUIDValidateBeforeCall(measurementUuid, measCreate, null);
        Type localVarReturnType = new TypeToken<Measurement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Measurement with UUID (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 指定したUUIDの計測を作成します。
     * @param measurementUuid 計測のUUID (required)
     * @param measCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createMeasurementWithUUIDAsync(String measurementUuid, MeasCreate measCreate, final ApiCallback<Measurement> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMeasurementWithUUIDValidateBeforeCall(measurementUuid, measCreate, _callback);
        Type localVarReturnType = new TypeToken<Measurement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProjectMeasurement
     * @param projectUuid プロジェクトのUUID (required)
     * @param measCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectMeasurementCall(String projectUuid, MeasCreate measCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = measCreate;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectMeasurementValidateBeforeCall(String projectUuid, MeasCreate measCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling createProjectMeasurement(Async)");
        }

        return createProjectMeasurementCall(projectUuid, measCreate, _callback);

    }

    /**
     * Create Project Measurement
     * 計測を作成します。  - **Note**   - 計測の保護／非保護を切り替える権限を持たないエッジも、     計測作成時は保護された計測を作成することが可能です。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measCreate  (optional)
     * @return Measurement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public Measurement createProjectMeasurement(String projectUuid, MeasCreate measCreate) throws ApiException {
        ApiResponse<Measurement> localVarResp = createProjectMeasurementWithHttpInfo(projectUuid, measCreate);
        return localVarResp.getData();
    }

    /**
     * Create Project Measurement
     * 計測を作成します。  - **Note**   - 計測の保護／非保護を切り替える権限を持たないエッジも、     計測作成時は保護された計測を作成することが可能です。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measCreate  (optional)
     * @return ApiResponse&lt;Measurement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Measurement> createProjectMeasurementWithHttpInfo(String projectUuid, MeasCreate measCreate) throws ApiException {
        okhttp3.Call localVarCall = createProjectMeasurementValidateBeforeCall(projectUuid, measCreate, null);
        Type localVarReturnType = new TypeToken<Measurement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Project Measurement (asynchronously)
     * 計測を作成します。  - **Note**   - 計測の保護／非保護を切り替える権限を持たないエッジも、     計測作成時は保護された計測を作成することが可能です。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectMeasurementAsync(String projectUuid, MeasCreate measCreate, final ApiCallback<Measurement> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectMeasurementValidateBeforeCall(projectUuid, measCreate, _callback);
        Type localVarReturnType = new TypeToken<Measurement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProjectMeasurementSequenceChunks
     * @param projectUuid プロジェクトのUUID (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectMeasurementSequenceChunksCall(String projectUuid, File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/sequences/chunks"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.iscp.v2.protobuf",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectMeasurementSequenceChunksValidateBeforeCall(String projectUuid, File body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling createProjectMeasurementSequenceChunks(Async)");
        }

        return createProjectMeasurementSequenceChunksCall(projectUuid, body, _callback);

    }

    /**
     * Create Project Measurement Sequence Chunk
     * 計測シーケンスにチャンクを作成します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param body  (optional)
     * @return CreateMeasurementChunksResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateMeasurementChunksResult createProjectMeasurementSequenceChunks(String projectUuid, File body) throws ApiException {
        ApiResponse<CreateMeasurementChunksResult> localVarResp = createProjectMeasurementSequenceChunksWithHttpInfo(projectUuid, body);
        return localVarResp.getData();
    }

    /**
     * Create Project Measurement Sequence Chunk
     * 計測シーケンスにチャンクを作成します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param body  (optional)
     * @return ApiResponse&lt;CreateMeasurementChunksResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateMeasurementChunksResult> createProjectMeasurementSequenceChunksWithHttpInfo(String projectUuid, File body) throws ApiException {
        okhttp3.Call localVarCall = createProjectMeasurementSequenceChunksValidateBeforeCall(projectUuid, body, null);
        Type localVarReturnType = new TypeToken<CreateMeasurementChunksResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Project Measurement Sequence Chunk (asynchronously)
     * 計測シーケンスにチャンクを作成します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectMeasurementSequenceChunksAsync(String projectUuid, File body, final ApiCallback<CreateMeasurementChunksResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectMeasurementSequenceChunksValidateBeforeCall(projectUuid, body, _callback);
        Type localVarReturnType = new TypeToken<CreateMeasurementChunksResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProjectMeasurementWithUUID
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectMeasurementWithUUIDCall(String projectUuid, String measurementUuid, MeasCreate measCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = measCreate;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectMeasurementWithUUIDValidateBeforeCall(String projectUuid, String measurementUuid, MeasCreate measCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling createProjectMeasurementWithUUID(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling createProjectMeasurementWithUUID(Async)");
        }

        return createProjectMeasurementWithUUIDCall(projectUuid, measurementUuid, measCreate, _callback);

    }

    /**
     * Create Project Measurement with UUID
     * 指定したUUIDの計測を作成します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measCreate  (optional)
     * @return Measurement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public Measurement createProjectMeasurementWithUUID(String projectUuid, String measurementUuid, MeasCreate measCreate) throws ApiException {
        ApiResponse<Measurement> localVarResp = createProjectMeasurementWithUUIDWithHttpInfo(projectUuid, measurementUuid, measCreate);
        return localVarResp.getData();
    }

    /**
     * Create Project Measurement with UUID
     * 指定したUUIDの計測を作成します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measCreate  (optional)
     * @return ApiResponse&lt;Measurement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Measurement> createProjectMeasurementWithUUIDWithHttpInfo(String projectUuid, String measurementUuid, MeasCreate measCreate) throws ApiException {
        okhttp3.Call localVarCall = createProjectMeasurementWithUUIDValidateBeforeCall(projectUuid, measurementUuid, measCreate, null);
        Type localVarReturnType = new TypeToken<Measurement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Project Measurement with UUID (asynchronously)
     * 指定したUUIDの計測を作成します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectMeasurementWithUUIDAsync(String projectUuid, String measurementUuid, MeasCreate measCreate, final ApiCallback<Measurement> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectMeasurementWithUUIDValidateBeforeCall(projectUuid, measurementUuid, measCreate, _callback);
        Type localVarReturnType = new TypeToken<Measurement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMeasurement
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteMeasurementCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMeasurementValidateBeforeCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling deleteMeasurement(Async)");
        }

        return deleteMeasurementCall(measurementUuid, _callback);

    }

    /**
     * Trash Measurement
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください）  計測を削除します。  - **Note**    - 保護された計測は削除できません。
     * @param measurementUuid 計測のUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteMeasurement(String measurementUuid) throws ApiException {
        deleteMeasurementWithHttpInfo(measurementUuid);
    }

    /**
     * Trash Measurement
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください）  計測を削除します。  - **Note**    - 保護された計測は削除できません。
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteMeasurementWithHttpInfo(String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteMeasurementValidateBeforeCall(measurementUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Trash Measurement (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください）  計測を削除します。  - **Note**    - 保護された計測は削除できません。
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteMeasurementAsync(String measurementUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMeasurementValidateBeforeCall(measurementUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMeasurementBaseTime
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteMeasurementBaseTimeCall(String measurementUuid, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}/basetimes/{type}"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMeasurementBaseTimeValidateBeforeCall(String measurementUuid, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling deleteMeasurementBaseTime(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deleteMeasurementBaseTime(Async)");
        }

        return deleteMeasurementBaseTimeCall(measurementUuid, type, _callback);

    }

    /**
     * Delete Measurement Base Time
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を削除します。   指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、  その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。   このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteMeasurementBaseTime(String measurementUuid, String type) throws ApiException {
        deleteMeasurementBaseTimeWithHttpInfo(measurementUuid, type);
    }

    /**
     * Delete Measurement Base Time
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を削除します。   指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、  その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。   このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteMeasurementBaseTimeWithHttpInfo(String measurementUuid, String type) throws ApiException {
        okhttp3.Call localVarCall = deleteMeasurementBaseTimeValidateBeforeCall(measurementUuid, type, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Measurement Base Time (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を削除します。   指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、  その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。   このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteMeasurementBaseTimeAsync(String measurementUuid, String type, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMeasurementBaseTimeValidateBeforeCall(measurementUuid, type, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProjectMeasurement
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectMeasurementCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectMeasurementValidateBeforeCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling deleteProjectMeasurement(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling deleteProjectMeasurement(Async)");
        }

        return deleteProjectMeasurementCall(projectUuid, measurementUuid, _callback);

    }

    /**
     * Trash Project Measurement
     * 計測を削除します。 - **Note**   - 保護された計測は削除できません。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProjectMeasurement(String projectUuid, String measurementUuid) throws ApiException {
        deleteProjectMeasurementWithHttpInfo(projectUuid, measurementUuid);
    }

    /**
     * Trash Project Measurement
     * 計測を削除します。 - **Note**   - 保護された計測は削除できません。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProjectMeasurementWithHttpInfo(String projectUuid, String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectMeasurementValidateBeforeCall(projectUuid, measurementUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Trash Project Measurement (asynchronously)
     * 計測を削除します。 - **Note**   - 保護された計測は削除できません。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectMeasurementAsync(String projectUuid, String measurementUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectMeasurementValidateBeforeCall(projectUuid, measurementUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProjectMeasurementBaseTime
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectMeasurementBaseTimeCall(String projectUuid, String measurementUuid, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes/{type}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectMeasurementBaseTimeValidateBeforeCall(String projectUuid, String measurementUuid, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling deleteProjectMeasurementBaseTime(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling deleteProjectMeasurementBaseTime(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deleteProjectMeasurementBaseTime(Async)");
        }

        return deleteProjectMeasurementBaseTimeCall(projectUuid, measurementUuid, type, _callback);

    }

    /**
     * Delete Project Measurement Base Time
     * 基準時刻を削除します。 指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、 その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。 このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProjectMeasurementBaseTime(String projectUuid, String measurementUuid, String type) throws ApiException {
        deleteProjectMeasurementBaseTimeWithHttpInfo(projectUuid, measurementUuid, type);
    }

    /**
     * Delete Project Measurement Base Time
     * 基準時刻を削除します。 指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、 その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。 このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProjectMeasurementBaseTimeWithHttpInfo(String projectUuid, String measurementUuid, String type) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectMeasurementBaseTimeValidateBeforeCall(projectUuid, measurementUuid, type, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Project Measurement Base Time (asynchronously)
     * 基準時刻を削除します。 指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、 その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。 このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectMeasurementBaseTimeAsync(String projectUuid, String measurementUuid, String type, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectMeasurementBaseTimeValidateBeforeCall(projectUuid, measurementUuid, type, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for endMeasurement
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call endMeasurementCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}/end"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call endMeasurementValidateBeforeCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling endMeasurement(Async)");
        }

        return endMeasurementCall(measurementUuid, _callback);

    }

    /**
     * End Measurement
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/end&#x60; を使用してください）  計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。  （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
     * @param measurementUuid 計測のUUID (required)
     * @return SequenceSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public SequenceSummary endMeasurement(String measurementUuid) throws ApiException {
        ApiResponse<SequenceSummary> localVarResp = endMeasurementWithHttpInfo(measurementUuid);
        return localVarResp.getData();
    }

    /**
     * End Measurement
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/end&#x60; を使用してください）  計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。  （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;SequenceSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SequenceSummary> endMeasurementWithHttpInfo(String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = endMeasurementValidateBeforeCall(measurementUuid, null);
        Type localVarReturnType = new TypeToken<SequenceSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * End Measurement (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/end&#x60; を使用してください）  計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。  （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call endMeasurementAsync(String measurementUuid, final ApiCallback<SequenceSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = endMeasurementValidateBeforeCall(measurementUuid, _callback);
        Type localVarReturnType = new TypeToken<SequenceSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for endProjectMeasurement
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endProjectMeasurementCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/end"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endProjectMeasurementValidateBeforeCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling endProjectMeasurement(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling endProjectMeasurement(Async)");
        }

        return endProjectMeasurementCall(projectUuid, measurementUuid, _callback);

    }

    /**
     * End Project Measurement
     * 計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。 （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @return SequenceSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SequenceSummary endProjectMeasurement(String projectUuid, String measurementUuid) throws ApiException {
        ApiResponse<SequenceSummary> localVarResp = endProjectMeasurementWithHttpInfo(projectUuid, measurementUuid);
        return localVarResp.getData();
    }

    /**
     * End Project Measurement
     * 計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。 （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;SequenceSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SequenceSummary> endProjectMeasurementWithHttpInfo(String projectUuid, String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = endProjectMeasurementValidateBeforeCall(projectUuid, measurementUuid, null);
        Type localVarReturnType = new TypeToken<SequenceSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * End Project Measurement (asynchronously)
     * 計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。 （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endProjectMeasurementAsync(String projectUuid, String measurementUuid, final ApiCallback<SequenceSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = endProjectMeasurementValidateBeforeCall(projectUuid, measurementUuid, _callback);
        Type localVarReturnType = new TypeToken<SequenceSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMeasurement
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMeasurementCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeasurementValidateBeforeCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling getMeasurement(Async)");
        }

        return getMeasurementCall(measurementUuid, _callback);

    }

    /**
     * Get Measurement
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測を取得します。
     * @param measurementUuid 計測のUUID (required)
     * @return Measurement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Measurement getMeasurement(String measurementUuid) throws ApiException {
        ApiResponse<Measurement> localVarResp = getMeasurementWithHttpInfo(measurementUuid);
        return localVarResp.getData();
    }

    /**
     * Get Measurement
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測を取得します。
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;Measurement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Measurement> getMeasurementWithHttpInfo(String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = getMeasurementValidateBeforeCall(measurementUuid, null);
        Type localVarReturnType = new TypeToken<Measurement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Measurement (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測を取得します。
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMeasurementAsync(String measurementUuid, final ApiCallback<Measurement> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeasurementValidateBeforeCall(measurementUuid, _callback);
        Type localVarReturnType = new TypeToken<Measurement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMeasurementBaseTime
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMeasurementBaseTimeCall(String measurementUuid, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}/basetimes/{type}"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeasurementBaseTimeValidateBeforeCall(String measurementUuid, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling getMeasurementBaseTime(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getMeasurementBaseTime(Async)");
        }

        return getMeasurementBaseTimeCall(measurementUuid, type, _callback);

    }

    /**
     * Get Measurement Base Time
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください） 基準時刻タイプを指定して計測の基準時刻を取得します。
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @return MeasBaseTime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasBaseTime getMeasurementBaseTime(String measurementUuid, String type) throws ApiException {
        ApiResponse<MeasBaseTime> localVarResp = getMeasurementBaseTimeWithHttpInfo(measurementUuid, type);
        return localVarResp.getData();
    }

    /**
     * Get Measurement Base Time
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください） 基準時刻タイプを指定して計測の基準時刻を取得します。
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @return ApiResponse&lt;MeasBaseTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasBaseTime> getMeasurementBaseTimeWithHttpInfo(String measurementUuid, String type) throws ApiException {
        okhttp3.Call localVarCall = getMeasurementBaseTimeValidateBeforeCall(measurementUuid, type, null);
        Type localVarReturnType = new TypeToken<MeasBaseTime>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Measurement Base Time (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください） 基準時刻タイプを指定して計測の基準時刻を取得します。
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMeasurementBaseTimeAsync(String measurementUuid, String type, final ApiCallback<MeasBaseTime> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeasurementBaseTimeValidateBeforeCall(measurementUuid, type, _callback);
        Type localVarReturnType = new TypeToken<MeasBaseTime>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMeasurementFromMeasurementMarker
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMeasurementFromMeasurementMarkerCall(String measurementMarkerUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/markers/{measurement_marker_uuid}/measurement"
            .replace("{" + "measurement_marker_uuid" + "}", localVarApiClient.escapeString(measurementMarkerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeasurementFromMeasurementMarkerValidateBeforeCall(String measurementMarkerUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementMarkerUuid' is set
        if (measurementMarkerUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementMarkerUuid' when calling getMeasurementFromMeasurementMarker(Async)");
        }

        return getMeasurementFromMeasurementMarkerCall(measurementMarkerUuid, _callback);

    }

    /**
     * Get Measurement from Marker
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}/measurement&#x60; を使用してください）
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @return Measurement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Measurement getMeasurementFromMeasurementMarker(String measurementMarkerUuid) throws ApiException {
        ApiResponse<Measurement> localVarResp = getMeasurementFromMeasurementMarkerWithHttpInfo(measurementMarkerUuid);
        return localVarResp.getData();
    }

    /**
     * Get Measurement from Marker
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}/measurement&#x60; を使用してください）
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @return ApiResponse&lt;Measurement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Measurement> getMeasurementFromMeasurementMarkerWithHttpInfo(String measurementMarkerUuid) throws ApiException {
        okhttp3.Call localVarCall = getMeasurementFromMeasurementMarkerValidateBeforeCall(measurementMarkerUuid, null);
        Type localVarReturnType = new TypeToken<Measurement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Measurement from Marker (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}/measurement&#x60; を使用してください）
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMeasurementFromMeasurementMarkerAsync(String measurementMarkerUuid, final ApiCallback<Measurement> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeasurementFromMeasurementMarkerValidateBeforeCall(measurementMarkerUuid, _callback);
        Type localVarReturnType = new TypeToken<Measurement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMeasurementSections
     * @param measurementUuid 計測のUUID (required)
     * @param filter 計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMeasurementSectionsCall(String measurementUuid, String filter, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}/sections"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeasurementSectionsValidateBeforeCall(String measurementUuid, String filter, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling getMeasurementSections(Async)");
        }

        return getMeasurementSectionsCall(measurementUuid, filter, limit, _callback);

    }

    /**
     * List Measurement Sections
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sections&#x60; を使用してください）  計測に含まれるセクションのリストを取得します。
     * @param measurementUuid 計測のUUID (required)
     * @param filter 計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @return MeasurementSectionsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasurementSectionsGetResponse getMeasurementSections(String measurementUuid, String filter, Integer limit) throws ApiException {
        ApiResponse<MeasurementSectionsGetResponse> localVarResp = getMeasurementSectionsWithHttpInfo(measurementUuid, filter, limit);
        return localVarResp.getData();
    }

    /**
     * List Measurement Sections
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sections&#x60; を使用してください）  計測に含まれるセクションのリストを取得します。
     * @param measurementUuid 計測のUUID (required)
     * @param filter 計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @return ApiResponse&lt;MeasurementSectionsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasurementSectionsGetResponse> getMeasurementSectionsWithHttpInfo(String measurementUuid, String filter, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getMeasurementSectionsValidateBeforeCall(measurementUuid, filter, limit, null);
        Type localVarReturnType = new TypeToken<MeasurementSectionsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Measurement Sections (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sections&#x60; を使用してください）  計測に含まれるセクションのリストを取得します。
     * @param measurementUuid 計測のUUID (required)
     * @param filter 計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMeasurementSectionsAsync(String measurementUuid, String filter, Integer limit, final ApiCallback<MeasurementSectionsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeasurementSectionsValidateBeforeCall(measurementUuid, filter, limit, _callback);
        Type localVarReturnType = new TypeToken<MeasurementSectionsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMeasurementSequence
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMeasurementSequenceCall(String measurementUuid, String sequencesUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}/sequences/{sequences_uuid}"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()))
            .replace("{" + "sequences_uuid" + "}", localVarApiClient.escapeString(sequencesUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeasurementSequenceValidateBeforeCall(String measurementUuid, String sequencesUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling getMeasurementSequence(Async)");
        }

        // verify the required parameter 'sequencesUuid' is set
        if (sequencesUuid == null) {
            throw new ApiException("Missing the required parameter 'sequencesUuid' when calling getMeasurementSequence(Async)");
        }

        return getMeasurementSequenceCall(measurementUuid, sequencesUuid, _callback);

    }

    /**
     * Get Measurement Sequence
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを取得します。
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @return MeasurementSequenceGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasurementSequenceGroup getMeasurementSequence(String measurementUuid, String sequencesUuid) throws ApiException {
        ApiResponse<MeasurementSequenceGroup> localVarResp = getMeasurementSequenceWithHttpInfo(measurementUuid, sequencesUuid);
        return localVarResp.getData();
    }

    /**
     * Get Measurement Sequence
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを取得します。
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @return ApiResponse&lt;MeasurementSequenceGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasurementSequenceGroup> getMeasurementSequenceWithHttpInfo(String measurementUuid, String sequencesUuid) throws ApiException {
        okhttp3.Call localVarCall = getMeasurementSequenceValidateBeforeCall(measurementUuid, sequencesUuid, null);
        Type localVarReturnType = new TypeToken<MeasurementSequenceGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Measurement Sequence (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを取得します。
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMeasurementSequenceAsync(String measurementUuid, String sequencesUuid, final ApiCallback<MeasurementSequenceGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeasurementSequenceValidateBeforeCall(measurementUuid, sequencesUuid, _callback);
        Type localVarReturnType = new TypeToken<MeasurementSequenceGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectMeasurement
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMeasurementCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectMeasurementValidateBeforeCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling getProjectMeasurement(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling getProjectMeasurement(Async)");
        }

        return getProjectMeasurementCall(projectUuid, measurementUuid, _callback);

    }

    /**
     * Get Project Measurement
     * 計測を取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @return Measurement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Measurement getProjectMeasurement(String projectUuid, String measurementUuid) throws ApiException {
        ApiResponse<Measurement> localVarResp = getProjectMeasurementWithHttpInfo(projectUuid, measurementUuid);
        return localVarResp.getData();
    }

    /**
     * Get Project Measurement
     * 計測を取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;Measurement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Measurement> getProjectMeasurementWithHttpInfo(String projectUuid, String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = getProjectMeasurementValidateBeforeCall(projectUuid, measurementUuid, null);
        Type localVarReturnType = new TypeToken<Measurement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Project Measurement (asynchronously)
     * 計測を取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMeasurementAsync(String projectUuid, String measurementUuid, final ApiCallback<Measurement> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectMeasurementValidateBeforeCall(projectUuid, measurementUuid, _callback);
        Type localVarReturnType = new TypeToken<Measurement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectMeasurementBaseTime
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMeasurementBaseTimeCall(String projectUuid, String measurementUuid, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes/{type}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectMeasurementBaseTimeValidateBeforeCall(String projectUuid, String measurementUuid, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling getProjectMeasurementBaseTime(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling getProjectMeasurementBaseTime(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getProjectMeasurementBaseTime(Async)");
        }

        return getProjectMeasurementBaseTimeCall(projectUuid, measurementUuid, type, _callback);

    }

    /**
     * Get Project Measurement Base Time
     * 基準時刻タイプを指定して計測の基準時刻を取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @return MeasBaseTime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MeasBaseTime getProjectMeasurementBaseTime(String projectUuid, String measurementUuid, String type) throws ApiException {
        ApiResponse<MeasBaseTime> localVarResp = getProjectMeasurementBaseTimeWithHttpInfo(projectUuid, measurementUuid, type);
        return localVarResp.getData();
    }

    /**
     * Get Project Measurement Base Time
     * 基準時刻タイプを指定して計測の基準時刻を取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @return ApiResponse&lt;MeasBaseTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeasBaseTime> getProjectMeasurementBaseTimeWithHttpInfo(String projectUuid, String measurementUuid, String type) throws ApiException {
        okhttp3.Call localVarCall = getProjectMeasurementBaseTimeValidateBeforeCall(projectUuid, measurementUuid, type, null);
        Type localVarReturnType = new TypeToken<MeasBaseTime>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Project Measurement Base Time (asynchronously)
     * 基準時刻タイプを指定して計測の基準時刻を取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMeasurementBaseTimeAsync(String projectUuid, String measurementUuid, String type, final ApiCallback<MeasBaseTime> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectMeasurementBaseTimeValidateBeforeCall(projectUuid, measurementUuid, type, _callback);
        Type localVarReturnType = new TypeToken<MeasBaseTime>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectMeasurementSections
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param filter 計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMeasurementSectionsCall(String projectUuid, String measurementUuid, String filter, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/sections"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectMeasurementSectionsValidateBeforeCall(String projectUuid, String measurementUuid, String filter, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling getProjectMeasurementSections(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling getProjectMeasurementSections(Async)");
        }

        return getProjectMeasurementSectionsCall(projectUuid, measurementUuid, filter, limit, _callback);

    }

    /**
     * List Project Measurement Sections
     * 計測に含まれるセクションのリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param filter 計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @return MeasurementSectionsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MeasurementSectionsGetResponse getProjectMeasurementSections(String projectUuid, String measurementUuid, String filter, Integer limit) throws ApiException {
        ApiResponse<MeasurementSectionsGetResponse> localVarResp = getProjectMeasurementSectionsWithHttpInfo(projectUuid, measurementUuid, filter, limit);
        return localVarResp.getData();
    }

    /**
     * List Project Measurement Sections
     * 計測に含まれるセクションのリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param filter 計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @return ApiResponse&lt;MeasurementSectionsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeasurementSectionsGetResponse> getProjectMeasurementSectionsWithHttpInfo(String projectUuid, String measurementUuid, String filter, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getProjectMeasurementSectionsValidateBeforeCall(projectUuid, measurementUuid, filter, limit, null);
        Type localVarReturnType = new TypeToken<MeasurementSectionsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Project Measurement Sections (asynchronously)
     * 計測に含まれるセクションのリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param filter 計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMeasurementSectionsAsync(String projectUuid, String measurementUuid, String filter, Integer limit, final ApiCallback<MeasurementSectionsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectMeasurementSectionsValidateBeforeCall(projectUuid, measurementUuid, filter, limit, _callback);
        Type localVarReturnType = new TypeToken<MeasurementSectionsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectMeasurementSequence
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMeasurementSequenceCall(String projectUuid, String measurementUuid, String sequencesUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences/{sequences_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()))
            .replace("{" + "sequences_uuid" + "}", localVarApiClient.escapeString(sequencesUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectMeasurementSequenceValidateBeforeCall(String projectUuid, String measurementUuid, String sequencesUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling getProjectMeasurementSequence(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling getProjectMeasurementSequence(Async)");
        }

        // verify the required parameter 'sequencesUuid' is set
        if (sequencesUuid == null) {
            throw new ApiException("Missing the required parameter 'sequencesUuid' when calling getProjectMeasurementSequence(Async)");
        }

        return getProjectMeasurementSequenceCall(projectUuid, measurementUuid, sequencesUuid, _callback);

    }

    /**
     * Get Project Measurement Sequence
     * 計測シーケンスを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @return MeasurementSequenceGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MeasurementSequenceGroup getProjectMeasurementSequence(String projectUuid, String measurementUuid, String sequencesUuid) throws ApiException {
        ApiResponse<MeasurementSequenceGroup> localVarResp = getProjectMeasurementSequenceWithHttpInfo(projectUuid, measurementUuid, sequencesUuid);
        return localVarResp.getData();
    }

    /**
     * Get Project Measurement Sequence
     * 計測シーケンスを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @return ApiResponse&lt;MeasurementSequenceGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeasurementSequenceGroup> getProjectMeasurementSequenceWithHttpInfo(String projectUuid, String measurementUuid, String sequencesUuid) throws ApiException {
        okhttp3.Call localVarCall = getProjectMeasurementSequenceValidateBeforeCall(projectUuid, measurementUuid, sequencesUuid, null);
        Type localVarReturnType = new TypeToken<MeasurementSequenceGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Project Measurement Sequence (asynchronously)
     * 計測シーケンスを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMeasurementSequenceAsync(String projectUuid, String measurementUuid, String sequencesUuid, final ApiCallback<MeasurementSequenceGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectMeasurementSequenceValidateBeforeCall(projectUuid, measurementUuid, sequencesUuid, _callback);
        Type localVarReturnType = new TypeToken<MeasurementSequenceGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMeasurementBaseTimes
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listMeasurementBaseTimesCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}/basetimes"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMeasurementBaseTimesValidateBeforeCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling listMeasurementBaseTimes(Async)");
        }

        return listMeasurementBaseTimesCall(measurementUuid, _callback);

    }

    /**
     * List Measurement Base Times
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes&#x60; を使用してください）  計測の基準時刻のリストを取得します。
     * @param measurementUuid 計測のUUID (required)
     * @return MeasBaseTimes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasBaseTimes listMeasurementBaseTimes(String measurementUuid) throws ApiException {
        ApiResponse<MeasBaseTimes> localVarResp = listMeasurementBaseTimesWithHttpInfo(measurementUuid);
        return localVarResp.getData();
    }

    /**
     * List Measurement Base Times
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes&#x60; を使用してください）  計測の基準時刻のリストを取得します。
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;MeasBaseTimes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasBaseTimes> listMeasurementBaseTimesWithHttpInfo(String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = listMeasurementBaseTimesValidateBeforeCall(measurementUuid, null);
        Type localVarReturnType = new TypeToken<MeasBaseTimes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Measurement Base Times (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes&#x60; を使用してください）  計測の基準時刻のリストを取得します。
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listMeasurementBaseTimesAsync(String measurementUuid, final ApiCallback<MeasBaseTimes> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMeasurementBaseTimesValidateBeforeCall(measurementUuid, _callback);
        Type localVarReturnType = new TypeToken<MeasBaseTimes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMeasurementSequences
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listMeasurementSequencesCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}/sequences"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMeasurementSequencesValidateBeforeCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling listMeasurementSequences(Async)");
        }

        return listMeasurementSequencesCall(measurementUuid, _callback);

    }

    /**
     * List Measurement Sequences
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences&#x60; を使用してください） 計測シーケンスのリストを取得します。
     * @param measurementUuid 計測のUUID (required)
     * @return MeasurementSequenceGroups
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasurementSequenceGroups listMeasurementSequences(String measurementUuid) throws ApiException {
        ApiResponse<MeasurementSequenceGroups> localVarResp = listMeasurementSequencesWithHttpInfo(measurementUuid);
        return localVarResp.getData();
    }

    /**
     * List Measurement Sequences
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences&#x60; を使用してください） 計測シーケンスのリストを取得します。
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;MeasurementSequenceGroups&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasurementSequenceGroups> listMeasurementSequencesWithHttpInfo(String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = listMeasurementSequencesValidateBeforeCall(measurementUuid, null);
        Type localVarReturnType = new TypeToken<MeasurementSequenceGroups>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Measurement Sequences (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences&#x60; を使用してください） 計測シーケンスのリストを取得します。
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listMeasurementSequencesAsync(String measurementUuid, final ApiCallback<MeasurementSequenceGroups> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMeasurementSequencesValidateBeforeCall(measurementUuid, _callback);
        Type localVarReturnType = new TypeToken<MeasurementSequenceGroups>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMeasurements
     * @param uuid 計測のUUID (optional)
     * @param name 名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)
     * @param edgeUuid 計測に関連付けられたエッジのUUID (optional)
     * @param start 取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param end 取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param partialMatch &#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +--------------+                                    | measurement2 |                                    +--------------+                        | measurement3 |                        +--------------+                                                         time -----------+----------------------------+------------&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)
     * @param basetimeType 計測の基準時刻のタイプ (optional)
     * @param ended 計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)
     * @param since 指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param durationStart 計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)
     * @param durationEnd 計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)
     * @param status 計測のステータス (optional)
     * @param limit 1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)
     * @param sort 並べ替えに使用するキー (optional, default to base_time)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listMeasurementsCall(List<String> uuid, Integer name, String edgeUuid, String start, String end, Boolean partialMatch, String basetimeType, Boolean ended, String since, Long durationStart, Long durationEnd, List<String> status, Integer limit, String sort, Integer page, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "uuid", uuid));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (edgeUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("edge_uuid", edgeUuid));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (partialMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partial_match", partialMatch));
        }

        if (basetimeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("basetime_type", basetimeType));
        }

        if (ended != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ended", ended));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (durationStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration_start", durationStart));
        }

        if (durationEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration_end", durationEnd));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status", status));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMeasurementsValidateBeforeCall(List<String> uuid, Integer name, String edgeUuid, String start, String end, Boolean partialMatch, String basetimeType, Boolean ended, String since, Long durationStart, Long durationEnd, List<String> status, Integer limit, String sort, Integer page, String order, final ApiCallback _callback) throws ApiException {
        return listMeasurementsCall(uuid, name, edgeUuid, start, end, partialMatch, basetimeType, ended, since, durationStart, durationEnd, status, limit, sort, page, order, _callback);

    }

    /**
     * List Measurements
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測のリストを取得します。
     * @param uuid 計測のUUID (optional)
     * @param name 名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)
     * @param edgeUuid 計測に関連付けられたエッジのUUID (optional)
     * @param start 取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param end 取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param partialMatch &#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +--------------+                                    | measurement2 |                                    +--------------+                        | measurement3 |                        +--------------+                                                         time -----------+----------------------------+------------&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)
     * @param basetimeType 計測の基準時刻のタイプ (optional)
     * @param ended 計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)
     * @param since 指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param durationStart 計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)
     * @param durationEnd 計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)
     * @param status 計測のステータス (optional)
     * @param limit 1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)
     * @param sort 並べ替えに使用するキー (optional, default to base_time)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @return Measurements
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Measurements listMeasurements(List<String> uuid, Integer name, String edgeUuid, String start, String end, Boolean partialMatch, String basetimeType, Boolean ended, String since, Long durationStart, Long durationEnd, List<String> status, Integer limit, String sort, Integer page, String order) throws ApiException {
        ApiResponse<Measurements> localVarResp = listMeasurementsWithHttpInfo(uuid, name, edgeUuid, start, end, partialMatch, basetimeType, ended, since, durationStart, durationEnd, status, limit, sort, page, order);
        return localVarResp.getData();
    }

    /**
     * List Measurements
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測のリストを取得します。
     * @param uuid 計測のUUID (optional)
     * @param name 名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)
     * @param edgeUuid 計測に関連付けられたエッジのUUID (optional)
     * @param start 取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param end 取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param partialMatch &#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +--------------+                                    | measurement2 |                                    +--------------+                        | measurement3 |                        +--------------+                                                         time -----------+----------------------------+------------&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)
     * @param basetimeType 計測の基準時刻のタイプ (optional)
     * @param ended 計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)
     * @param since 指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param durationStart 計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)
     * @param durationEnd 計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)
     * @param status 計測のステータス (optional)
     * @param limit 1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)
     * @param sort 並べ替えに使用するキー (optional, default to base_time)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @return ApiResponse&lt;Measurements&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Measurements> listMeasurementsWithHttpInfo(List<String> uuid, Integer name, String edgeUuid, String start, String end, Boolean partialMatch, String basetimeType, Boolean ended, String since, Long durationStart, Long durationEnd, List<String> status, Integer limit, String sort, Integer page, String order) throws ApiException {
        okhttp3.Call localVarCall = listMeasurementsValidateBeforeCall(uuid, name, edgeUuid, start, end, partialMatch, basetimeType, ended, since, durationStart, durationEnd, status, limit, sort, page, order, null);
        Type localVarReturnType = new TypeToken<Measurements>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Measurements (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測のリストを取得します。
     * @param uuid 計測のUUID (optional)
     * @param name 名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)
     * @param edgeUuid 計測に関連付けられたエッジのUUID (optional)
     * @param start 取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param end 取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param partialMatch &#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +--------------+                                    | measurement2 |                                    +--------------+                        | measurement3 |                        +--------------+                                                         time -----------+----------------------------+------------&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)
     * @param basetimeType 計測の基準時刻のタイプ (optional)
     * @param ended 計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)
     * @param since 指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param durationStart 計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)
     * @param durationEnd 計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)
     * @param status 計測のステータス (optional)
     * @param limit 1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)
     * @param sort 並べ替えに使用するキー (optional, default to base_time)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listMeasurementsAsync(List<String> uuid, Integer name, String edgeUuid, String start, String end, Boolean partialMatch, String basetimeType, Boolean ended, String since, Long durationStart, Long durationEnd, List<String> status, Integer limit, String sort, Integer page, String order, final ApiCallback<Measurements> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMeasurementsValidateBeforeCall(uuid, name, edgeUuid, start, end, partialMatch, basetimeType, ended, since, durationStart, durationEnd, status, limit, sort, page, order, _callback);
        Type localVarReturnType = new TypeToken<Measurements>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProjectMeasurementBaseTimes
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectMeasurementBaseTimesCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectMeasurementBaseTimesValidateBeforeCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling listProjectMeasurementBaseTimes(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling listProjectMeasurementBaseTimes(Async)");
        }

        return listProjectMeasurementBaseTimesCall(projectUuid, measurementUuid, _callback);

    }

    /**
     * List Project Measurement Base Times
     * 計測の基準時刻のリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @return MeasBaseTimes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MeasBaseTimes listProjectMeasurementBaseTimes(String projectUuid, String measurementUuid) throws ApiException {
        ApiResponse<MeasBaseTimes> localVarResp = listProjectMeasurementBaseTimesWithHttpInfo(projectUuid, measurementUuid);
        return localVarResp.getData();
    }

    /**
     * List Project Measurement Base Times
     * 計測の基準時刻のリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;MeasBaseTimes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeasBaseTimes> listProjectMeasurementBaseTimesWithHttpInfo(String projectUuid, String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = listProjectMeasurementBaseTimesValidateBeforeCall(projectUuid, measurementUuid, null);
        Type localVarReturnType = new TypeToken<MeasBaseTimes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Project Measurement Base Times (asynchronously)
     * 計測の基準時刻のリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectMeasurementBaseTimesAsync(String projectUuid, String measurementUuid, final ApiCallback<MeasBaseTimes> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectMeasurementBaseTimesValidateBeforeCall(projectUuid, measurementUuid, _callback);
        Type localVarReturnType = new TypeToken<MeasBaseTimes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProjectMeasurementSequences
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectMeasurementSequencesCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectMeasurementSequencesValidateBeforeCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling listProjectMeasurementSequences(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling listProjectMeasurementSequences(Async)");
        }

        return listProjectMeasurementSequencesCall(projectUuid, measurementUuid, _callback);

    }

    /**
     * List Project Measurement Sequences
     * 計測シーケンスのリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @return MeasurementSequenceGroups
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MeasurementSequenceGroups listProjectMeasurementSequences(String projectUuid, String measurementUuid) throws ApiException {
        ApiResponse<MeasurementSequenceGroups> localVarResp = listProjectMeasurementSequencesWithHttpInfo(projectUuid, measurementUuid);
        return localVarResp.getData();
    }

    /**
     * List Project Measurement Sequences
     * 計測シーケンスのリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;MeasurementSequenceGroups&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeasurementSequenceGroups> listProjectMeasurementSequencesWithHttpInfo(String projectUuid, String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = listProjectMeasurementSequencesValidateBeforeCall(projectUuid, measurementUuid, null);
        Type localVarReturnType = new TypeToken<MeasurementSequenceGroups>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Project Measurement Sequences (asynchronously)
     * 計測シーケンスのリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectMeasurementSequencesAsync(String projectUuid, String measurementUuid, final ApiCallback<MeasurementSequenceGroups> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectMeasurementSequencesValidateBeforeCall(projectUuid, measurementUuid, _callback);
        Type localVarReturnType = new TypeToken<MeasurementSequenceGroups>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProjectMeasurements
     * @param projectUuid プロジェクトのUUID (required)
     * @param uuid 計測のUUID (optional)
     * @param name 名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)
     * @param edgeUuid 計測に関連付けられたエッジのUUID (optional)
     * @param start 取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param end 取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param partialMatch &#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +--------------+                                    | measurement2 |                                    +--------------+                        | measurement3 |                        +--------------+                                                         time -----------+----------------------------+------------&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)
     * @param basetimeType 計測の基準時刻のタイプ (optional)
     * @param ended 計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)
     * @param since 指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param durationStart 計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)
     * @param durationEnd 計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)
     * @param status 計測のステータス (optional)
     * @param limit 1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)
     * @param sort 並べ替えに使用するキー (optional, default to base_time)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectMeasurementsCall(String projectUuid, List<String> uuid, Integer name, String edgeUuid, String start, String end, Boolean partialMatch, String basetimeType, Boolean ended, String since, Long durationStart, Long durationEnd, List<String> status, Integer limit, String sort, Integer page, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "uuid", uuid));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (edgeUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("edge_uuid", edgeUuid));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (partialMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partial_match", partialMatch));
        }

        if (basetimeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("basetime_type", basetimeType));
        }

        if (ended != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ended", ended));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (durationStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration_start", durationStart));
        }

        if (durationEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration_end", durationEnd));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status", status));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectMeasurementsValidateBeforeCall(String projectUuid, List<String> uuid, Integer name, String edgeUuid, String start, String end, Boolean partialMatch, String basetimeType, Boolean ended, String since, Long durationStart, Long durationEnd, List<String> status, Integer limit, String sort, Integer page, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling listProjectMeasurements(Async)");
        }

        return listProjectMeasurementsCall(projectUuid, uuid, name, edgeUuid, start, end, partialMatch, basetimeType, ended, since, durationStart, durationEnd, status, limit, sort, page, order, _callback);

    }

    /**
     * List Project Measurements
     * 計測のリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param uuid 計測のUUID (optional)
     * @param name 名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)
     * @param edgeUuid 計測に関連付けられたエッジのUUID (optional)
     * @param start 取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param end 取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param partialMatch &#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +--------------+                                    | measurement2 |                                    +--------------+                        | measurement3 |                        +--------------+                                                         time -----------+----------------------------+------------&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)
     * @param basetimeType 計測の基準時刻のタイプ (optional)
     * @param ended 計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)
     * @param since 指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param durationStart 計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)
     * @param durationEnd 計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)
     * @param status 計測のステータス (optional)
     * @param limit 1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)
     * @param sort 並べ替えに使用するキー (optional, default to base_time)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @return Measurements
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Measurements listProjectMeasurements(String projectUuid, List<String> uuid, Integer name, String edgeUuid, String start, String end, Boolean partialMatch, String basetimeType, Boolean ended, String since, Long durationStart, Long durationEnd, List<String> status, Integer limit, String sort, Integer page, String order) throws ApiException {
        ApiResponse<Measurements> localVarResp = listProjectMeasurementsWithHttpInfo(projectUuid, uuid, name, edgeUuid, start, end, partialMatch, basetimeType, ended, since, durationStart, durationEnd, status, limit, sort, page, order);
        return localVarResp.getData();
    }

    /**
     * List Project Measurements
     * 計測のリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param uuid 計測のUUID (optional)
     * @param name 名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)
     * @param edgeUuid 計測に関連付けられたエッジのUUID (optional)
     * @param start 取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param end 取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param partialMatch &#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +--------------+                                    | measurement2 |                                    +--------------+                        | measurement3 |                        +--------------+                                                         time -----------+----------------------------+------------&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)
     * @param basetimeType 計測の基準時刻のタイプ (optional)
     * @param ended 計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)
     * @param since 指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param durationStart 計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)
     * @param durationEnd 計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)
     * @param status 計測のステータス (optional)
     * @param limit 1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)
     * @param sort 並べ替えに使用するキー (optional, default to base_time)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @return ApiResponse&lt;Measurements&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Measurements> listProjectMeasurementsWithHttpInfo(String projectUuid, List<String> uuid, Integer name, String edgeUuid, String start, String end, Boolean partialMatch, String basetimeType, Boolean ended, String since, Long durationStart, Long durationEnd, List<String> status, Integer limit, String sort, Integer page, String order) throws ApiException {
        okhttp3.Call localVarCall = listProjectMeasurementsValidateBeforeCall(projectUuid, uuid, name, edgeUuid, start, end, partialMatch, basetimeType, ended, since, durationStart, durationEnd, status, limit, sort, page, order, null);
        Type localVarReturnType = new TypeToken<Measurements>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Project Measurements (asynchronously)
     * 計測のリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param uuid 計測のUUID (optional)
     * @param name 名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)
     * @param edgeUuid 計測に関連付けられたエッジのUUID (optional)
     * @param start 取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param end 取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param partialMatch &#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +--------------+                                    | measurement2 |                                    +--------------+                        | measurement3 |                        +--------------+                                                         time -----------+----------------------------+------------&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)
     * @param basetimeType 計測の基準時刻のタイプ (optional)
     * @param ended 計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)
     * @param since 指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param durationStart 計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)
     * @param durationEnd 計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)
     * @param status 計測のステータス (optional)
     * @param limit 1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)
     * @param sort 並べ替えに使用するキー (optional, default to base_time)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectMeasurementsAsync(String projectUuid, List<String> uuid, Integer name, String edgeUuid, String start, String end, Boolean partialMatch, String basetimeType, Boolean ended, String since, Long durationStart, Long durationEnd, List<String> status, Integer limit, String sort, Integer page, String order, final ApiCallback<Measurements> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectMeasurementsValidateBeforeCall(projectUuid, uuid, name, edgeUuid, start, end, partialMatch, basetimeType, ended, since, durationStart, durationEnd, status, limit, sort, page, order, _callback);
        Type localVarReturnType = new TypeToken<Measurements>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protectMeasurement
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call protectMeasurementCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}/protected"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call protectMeasurementValidateBeforeCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling protectMeasurement(Async)");
        }

        return protectMeasurementCall(measurementUuid, _callback);

    }

    /**
     * Protect Measurement
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
     * @param measurementUuid 計測のUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void protectMeasurement(String measurementUuid) throws ApiException {
        protectMeasurementWithHttpInfo(measurementUuid);
    }

    /**
     * Protect Measurement
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> protectMeasurementWithHttpInfo(String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = protectMeasurementValidateBeforeCall(measurementUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Protect Measurement (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call protectMeasurementAsync(String measurementUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = protectMeasurementValidateBeforeCall(measurementUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for protectProjectMeasurement
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectProjectMeasurementCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/protected"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protectProjectMeasurementValidateBeforeCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling protectProjectMeasurement(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling protectProjectMeasurement(Async)");
        }

        return protectProjectMeasurementCall(projectUuid, measurementUuid, _callback);

    }

    /**
     * Protect Project Measurement
     * 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void protectProjectMeasurement(String projectUuid, String measurementUuid) throws ApiException {
        protectProjectMeasurementWithHttpInfo(projectUuid, measurementUuid);
    }

    /**
     * Protect Project Measurement
     * 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> protectProjectMeasurementWithHttpInfo(String projectUuid, String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = protectProjectMeasurementValidateBeforeCall(projectUuid, measurementUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Protect Project Measurement (asynchronously)
     * 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectProjectMeasurementAsync(String projectUuid, String measurementUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = protectProjectMeasurementValidateBeforeCall(projectUuid, measurementUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceMeasurementSequence
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @param measurementSequenceGroupReplace  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call replaceMeasurementSequenceCall(String measurementUuid, String sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = measurementSequenceGroupReplace;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}/sequences/{sequences_uuid}"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()))
            .replace("{" + "sequences_uuid" + "}", localVarApiClient.escapeString(sequencesUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceMeasurementSequenceValidateBeforeCall(String measurementUuid, String sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling replaceMeasurementSequence(Async)");
        }

        // verify the required parameter 'sequencesUuid' is set
        if (sequencesUuid == null) {
            throw new ApiException("Missing the required parameter 'sequencesUuid' when calling replaceMeasurementSequence(Async)");
        }

        return replaceMeasurementSequenceCall(measurementUuid, sequencesUuid, measurementSequenceGroupReplace, _callback);

    }

    /**
     * Replace Measurement Sequence
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを置換します。
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @param measurementSequenceGroupReplace  (optional)
     * @return MeasurementSequenceGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasurementSequenceGroup replaceMeasurementSequence(String measurementUuid, String sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace) throws ApiException {
        ApiResponse<MeasurementSequenceGroup> localVarResp = replaceMeasurementSequenceWithHttpInfo(measurementUuid, sequencesUuid, measurementSequenceGroupReplace);
        return localVarResp.getData();
    }

    /**
     * Replace Measurement Sequence
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを置換します。
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @param measurementSequenceGroupReplace  (optional)
     * @return ApiResponse&lt;MeasurementSequenceGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasurementSequenceGroup> replaceMeasurementSequenceWithHttpInfo(String measurementUuid, String sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace) throws ApiException {
        okhttp3.Call localVarCall = replaceMeasurementSequenceValidateBeforeCall(measurementUuid, sequencesUuid, measurementSequenceGroupReplace, null);
        Type localVarReturnType = new TypeToken<MeasurementSequenceGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace Measurement Sequence (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを置換します。
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @param measurementSequenceGroupReplace  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call replaceMeasurementSequenceAsync(String measurementUuid, String sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace, final ApiCallback<MeasurementSequenceGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceMeasurementSequenceValidateBeforeCall(measurementUuid, sequencesUuid, measurementSequenceGroupReplace, _callback);
        Type localVarReturnType = new TypeToken<MeasurementSequenceGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceProjectMeasurementSequence
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @param measurementSequenceGroupReplace  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceProjectMeasurementSequenceCall(String projectUuid, String measurementUuid, String sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = measurementSequenceGroupReplace;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences/{sequences_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()))
            .replace("{" + "sequences_uuid" + "}", localVarApiClient.escapeString(sequencesUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceProjectMeasurementSequenceValidateBeforeCall(String projectUuid, String measurementUuid, String sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling replaceProjectMeasurementSequence(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling replaceProjectMeasurementSequence(Async)");
        }

        // verify the required parameter 'sequencesUuid' is set
        if (sequencesUuid == null) {
            throw new ApiException("Missing the required parameter 'sequencesUuid' when calling replaceProjectMeasurementSequence(Async)");
        }

        return replaceProjectMeasurementSequenceCall(projectUuid, measurementUuid, sequencesUuid, measurementSequenceGroupReplace, _callback);

    }

    /**
     * Replace Project Measurement Sequence
     * 計測シーケンスを置換します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @param measurementSequenceGroupReplace  (optional)
     * @return MeasurementSequenceGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MeasurementSequenceGroup replaceProjectMeasurementSequence(String projectUuid, String measurementUuid, String sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace) throws ApiException {
        ApiResponse<MeasurementSequenceGroup> localVarResp = replaceProjectMeasurementSequenceWithHttpInfo(projectUuid, measurementUuid, sequencesUuid, measurementSequenceGroupReplace);
        return localVarResp.getData();
    }

    /**
     * Replace Project Measurement Sequence
     * 計測シーケンスを置換します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @param measurementSequenceGroupReplace  (optional)
     * @return ApiResponse&lt;MeasurementSequenceGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeasurementSequenceGroup> replaceProjectMeasurementSequenceWithHttpInfo(String projectUuid, String measurementUuid, String sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace) throws ApiException {
        okhttp3.Call localVarCall = replaceProjectMeasurementSequenceValidateBeforeCall(projectUuid, measurementUuid, sequencesUuid, measurementSequenceGroupReplace, null);
        Type localVarReturnType = new TypeToken<MeasurementSequenceGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace Project Measurement Sequence (asynchronously)
     * 計測シーケンスを置換します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @param measurementSequenceGroupReplace  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceProjectMeasurementSequenceAsync(String projectUuid, String measurementUuid, String sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace, final ApiCallback<MeasurementSequenceGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceProjectMeasurementSequenceValidateBeforeCall(projectUuid, measurementUuid, sequencesUuid, measurementSequenceGroupReplace, _callback);
        Type localVarReturnType = new TypeToken<MeasurementSequenceGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unprotectMeasurement
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call unprotectMeasurementCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}/protected"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call unprotectMeasurementValidateBeforeCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling unprotectMeasurement(Async)");
        }

        return unprotectMeasurementCall(measurementUuid, _callback);

    }

    /**
     * Unprotect Measurement
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測の保護を解除します。
     * @param measurementUuid 計測のUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void unprotectMeasurement(String measurementUuid) throws ApiException {
        unprotectMeasurementWithHttpInfo(measurementUuid);
    }

    /**
     * Unprotect Measurement
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測の保護を解除します。
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> unprotectMeasurementWithHttpInfo(String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = unprotectMeasurementValidateBeforeCall(measurementUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unprotect Measurement (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測の保護を解除します。
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call unprotectMeasurementAsync(String measurementUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unprotectMeasurementValidateBeforeCall(measurementUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for unprotectProjectMeasurement
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unprotectProjectMeasurementCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/protected"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unprotectProjectMeasurementValidateBeforeCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling unprotectProjectMeasurement(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling unprotectProjectMeasurement(Async)");
        }

        return unprotectProjectMeasurementCall(projectUuid, measurementUuid, _callback);

    }

    /**
     * Unprotect Project Measurement
     * 計測の保護を解除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void unprotectProjectMeasurement(String projectUuid, String measurementUuid) throws ApiException {
        unprotectProjectMeasurementWithHttpInfo(projectUuid, measurementUuid);
    }

    /**
     * Unprotect Project Measurement
     * 計測の保護を解除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unprotectProjectMeasurementWithHttpInfo(String projectUuid, String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = unprotectProjectMeasurementValidateBeforeCall(projectUuid, measurementUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unprotect Project Measurement (asynchronously)
     * 計測の保護を解除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unprotectProjectMeasurementAsync(String projectUuid, String measurementUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unprotectProjectMeasurementValidateBeforeCall(projectUuid, measurementUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMeasurement
     * @param measurementUuid 計測のUUID (required)
     * @param measReplace  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateMeasurementCall(String measurementUuid, MeasReplace measReplace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = measReplace;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMeasurementValidateBeforeCall(String measurementUuid, MeasReplace measReplace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling updateMeasurement(Async)");
        }

        return updateMeasurementCall(measurementUuid, measReplace, _callback);

    }

    /**
     * Update Measurement
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測に関する情報を更新します。
     * @param measurementUuid 計測のUUID (required)
     * @param measReplace  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void updateMeasurement(String measurementUuid, MeasReplace measReplace) throws ApiException {
        updateMeasurementWithHttpInfo(measurementUuid, measReplace);
    }

    /**
     * Update Measurement
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測に関する情報を更新します。
     * @param measurementUuid 計測のUUID (required)
     * @param measReplace  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> updateMeasurementWithHttpInfo(String measurementUuid, MeasReplace measReplace) throws ApiException {
        okhttp3.Call localVarCall = updateMeasurementValidateBeforeCall(measurementUuid, measReplace, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Measurement (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測に関する情報を更新します。
     * @param measurementUuid 計測のUUID (required)
     * @param measReplace  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateMeasurementAsync(String measurementUuid, MeasReplace measReplace, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMeasurementValidateBeforeCall(measurementUuid, measReplace, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMeasurementBaseTime
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @param measBaseTimePut  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateMeasurementBaseTimeCall(String measurementUuid, String type, MeasBaseTimePut measBaseTimePut, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = measBaseTimePut;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}/basetimes/{type}"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMeasurementBaseTimeValidateBeforeCall(String measurementUuid, String type, MeasBaseTimePut measBaseTimePut, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling updateMeasurementBaseTime(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling updateMeasurementBaseTime(Async)");
        }

        return updateMeasurementBaseTimeCall(measurementUuid, type, measBaseTimePut, _callback);

    }

    /**
     * Replace Measurement Base Time
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を更新します。  この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、  新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @param measBaseTimePut  (optional)
     * @return MeasBaseTime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasBaseTime updateMeasurementBaseTime(String measurementUuid, String type, MeasBaseTimePut measBaseTimePut) throws ApiException {
        ApiResponse<MeasBaseTime> localVarResp = updateMeasurementBaseTimeWithHttpInfo(measurementUuid, type, measBaseTimePut);
        return localVarResp.getData();
    }

    /**
     * Replace Measurement Base Time
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を更新します。  この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、  新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @param measBaseTimePut  (optional)
     * @return ApiResponse&lt;MeasBaseTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasBaseTime> updateMeasurementBaseTimeWithHttpInfo(String measurementUuid, String type, MeasBaseTimePut measBaseTimePut) throws ApiException {
        okhttp3.Call localVarCall = updateMeasurementBaseTimeValidateBeforeCall(measurementUuid, type, measBaseTimePut, null);
        Type localVarReturnType = new TypeToken<MeasBaseTime>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace Measurement Base Time (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を更新します。  この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、  新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @param measBaseTimePut  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateMeasurementBaseTimeAsync(String measurementUuid, String type, MeasBaseTimePut measBaseTimePut, final ApiCallback<MeasBaseTime> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMeasurementBaseTimeValidateBeforeCall(measurementUuid, type, measBaseTimePut, _callback);
        Type localVarReturnType = new TypeToken<MeasBaseTime>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMeasurementSequence
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @param measurementSequenceGroupReplace  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateMeasurementSequenceCall(String measurementUuid, String sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = measurementSequenceGroupReplace;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}/sequences/{sequences_uuid}"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()))
            .replace("{" + "sequences_uuid" + "}", localVarApiClient.escapeString(sequencesUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMeasurementSequenceValidateBeforeCall(String measurementUuid, String sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling updateMeasurementSequence(Async)");
        }

        // verify the required parameter 'sequencesUuid' is set
        if (sequencesUuid == null) {
            throw new ApiException("Missing the required parameter 'sequencesUuid' when calling updateMeasurementSequence(Async)");
        }

        return updateMeasurementSequenceCall(measurementUuid, sequencesUuid, measurementSequenceGroupReplace, _callback);

    }

    /**
     * Update Measurement Sequence
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを更新します。
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @param measurementSequenceGroupReplace  (optional)
     * @return MeasurementSequenceGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasurementSequenceGroup updateMeasurementSequence(String measurementUuid, String sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace) throws ApiException {
        ApiResponse<MeasurementSequenceGroup> localVarResp = updateMeasurementSequenceWithHttpInfo(measurementUuid, sequencesUuid, measurementSequenceGroupReplace);
        return localVarResp.getData();
    }

    /**
     * Update Measurement Sequence
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを更新します。
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @param measurementSequenceGroupReplace  (optional)
     * @return ApiResponse&lt;MeasurementSequenceGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasurementSequenceGroup> updateMeasurementSequenceWithHttpInfo(String measurementUuid, String sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace) throws ApiException {
        okhttp3.Call localVarCall = updateMeasurementSequenceValidateBeforeCall(measurementUuid, sequencesUuid, measurementSequenceGroupReplace, null);
        Type localVarReturnType = new TypeToken<MeasurementSequenceGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Measurement Sequence (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを更新します。
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @param measurementSequenceGroupReplace  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateMeasurementSequenceAsync(String measurementUuid, String sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace, final ApiCallback<MeasurementSequenceGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMeasurementSequenceValidateBeforeCall(measurementUuid, sequencesUuid, measurementSequenceGroupReplace, _callback);
        Type localVarReturnType = new TypeToken<MeasurementSequenceGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProjectMeasurement
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measReplace  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectMeasurementCall(String projectUuid, String measurementUuid, MeasReplace measReplace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = measReplace;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectMeasurementValidateBeforeCall(String projectUuid, String measurementUuid, MeasReplace measReplace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling updateProjectMeasurement(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling updateProjectMeasurement(Async)");
        }

        return updateProjectMeasurementCall(projectUuid, measurementUuid, measReplace, _callback);

    }

    /**
     * Update Project Measurement
     * 計測に関する情報を更新します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measReplace  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void updateProjectMeasurement(String projectUuid, String measurementUuid, MeasReplace measReplace) throws ApiException {
        updateProjectMeasurementWithHttpInfo(projectUuid, measurementUuid, measReplace);
    }

    /**
     * Update Project Measurement
     * 計測に関する情報を更新します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measReplace  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateProjectMeasurementWithHttpInfo(String projectUuid, String measurementUuid, MeasReplace measReplace) throws ApiException {
        okhttp3.Call localVarCall = updateProjectMeasurementValidateBeforeCall(projectUuid, measurementUuid, measReplace, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Project Measurement (asynchronously)
     * 計測に関する情報を更新します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measReplace  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectMeasurementAsync(String projectUuid, String measurementUuid, MeasReplace measReplace, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectMeasurementValidateBeforeCall(projectUuid, measurementUuid, measReplace, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProjectMeasurementBaseTime
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @param measBaseTimePut  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectMeasurementBaseTimeCall(String projectUuid, String measurementUuid, String type, MeasBaseTimePut measBaseTimePut, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = measBaseTimePut;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes/{type}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectMeasurementBaseTimeValidateBeforeCall(String projectUuid, String measurementUuid, String type, MeasBaseTimePut measBaseTimePut, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling updateProjectMeasurementBaseTime(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling updateProjectMeasurementBaseTime(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling updateProjectMeasurementBaseTime(Async)");
        }

        return updateProjectMeasurementBaseTimeCall(projectUuid, measurementUuid, type, measBaseTimePut, _callback);

    }

    /**
     * Replace Project Measurement Base Time
     * 基準時刻を更新します。 この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、 新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @param measBaseTimePut  (optional)
     * @return MeasBaseTime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MeasBaseTime updateProjectMeasurementBaseTime(String projectUuid, String measurementUuid, String type, MeasBaseTimePut measBaseTimePut) throws ApiException {
        ApiResponse<MeasBaseTime> localVarResp = updateProjectMeasurementBaseTimeWithHttpInfo(projectUuid, measurementUuid, type, measBaseTimePut);
        return localVarResp.getData();
    }

    /**
     * Replace Project Measurement Base Time
     * 基準時刻を更新します。 この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、 新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @param measBaseTimePut  (optional)
     * @return ApiResponse&lt;MeasBaseTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeasBaseTime> updateProjectMeasurementBaseTimeWithHttpInfo(String projectUuid, String measurementUuid, String type, MeasBaseTimePut measBaseTimePut) throws ApiException {
        okhttp3.Call localVarCall = updateProjectMeasurementBaseTimeValidateBeforeCall(projectUuid, measurementUuid, type, measBaseTimePut, null);
        Type localVarReturnType = new TypeToken<MeasBaseTime>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace Project Measurement Base Time (asynchronously)
     * 基準時刻を更新します。 この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、 新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param type 基準時刻のタイプ (required)
     * @param measBaseTimePut  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectMeasurementBaseTimeAsync(String projectUuid, String measurementUuid, String type, MeasBaseTimePut measBaseTimePut, final ApiCallback<MeasBaseTime> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectMeasurementBaseTimeValidateBeforeCall(projectUuid, measurementUuid, type, measBaseTimePut, _callback);
        Type localVarReturnType = new TypeToken<MeasBaseTime>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProjectMeasurementSequence
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @param measurementSequenceGroupReplace  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectMeasurementSequenceCall(String projectUuid, String measurementUuid, String sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = measurementSequenceGroupReplace;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences/{sequences_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()))
            .replace("{" + "sequences_uuid" + "}", localVarApiClient.escapeString(sequencesUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectMeasurementSequenceValidateBeforeCall(String projectUuid, String measurementUuid, String sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling updateProjectMeasurementSequence(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling updateProjectMeasurementSequence(Async)");
        }

        // verify the required parameter 'sequencesUuid' is set
        if (sequencesUuid == null) {
            throw new ApiException("Missing the required parameter 'sequencesUuid' when calling updateProjectMeasurementSequence(Async)");
        }

        return updateProjectMeasurementSequenceCall(projectUuid, measurementUuid, sequencesUuid, measurementSequenceGroupReplace, _callback);

    }

    /**
     * Update Project Measurement Sequence
     * 計測シーケンスを更新します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @param measurementSequenceGroupReplace  (optional)
     * @return MeasurementSequenceGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MeasurementSequenceGroup updateProjectMeasurementSequence(String projectUuid, String measurementUuid, String sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace) throws ApiException {
        ApiResponse<MeasurementSequenceGroup> localVarResp = updateProjectMeasurementSequenceWithHttpInfo(projectUuid, measurementUuid, sequencesUuid, measurementSequenceGroupReplace);
        return localVarResp.getData();
    }

    /**
     * Update Project Measurement Sequence
     * 計測シーケンスを更新します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @param measurementSequenceGroupReplace  (optional)
     * @return ApiResponse&lt;MeasurementSequenceGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeasurementSequenceGroup> updateProjectMeasurementSequenceWithHttpInfo(String projectUuid, String measurementUuid, String sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace) throws ApiException {
        okhttp3.Call localVarCall = updateProjectMeasurementSequenceValidateBeforeCall(projectUuid, measurementUuid, sequencesUuid, measurementSequenceGroupReplace, null);
        Type localVarReturnType = new TypeToken<MeasurementSequenceGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Project Measurement Sequence (asynchronously)
     * 計測シーケンスを更新します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param sequencesUuid 計測シーケンスのUUID (required)
     * @param measurementSequenceGroupReplace  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectMeasurementSequenceAsync(String projectUuid, String measurementUuid, String sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace, final ApiCallback<MeasurementSequenceGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectMeasurementSequenceValidateBeforeCall(projectUuid, measurementUuid, sequencesUuid, measurementSequenceGroupReplace, _callback);
        Type localVarReturnType = new TypeToken<MeasurementSequenceGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
