/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aptpod.intdash;

import com.aptpod.ApiCallback;
import com.aptpod.ApiClient;
import com.aptpod.ApiException;
import com.aptpod.ApiResponse;
import com.aptpod.Configuration;
import com.aptpod.Pair;
import com.aptpod.ProgressRequestBody;
import com.aptpod.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.Date;
import java.io.File;
import org.openapitools.client.model.MeasurementUploadPostResponse;
import org.openapitools.client.model.MeasurementUploadStatusesGetResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MeasUploadingMeasurementsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MeasUploadingMeasurementsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MeasUploadingMeasurementsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listMeasurementStatuses
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listMeasurementStatusesCall(Integer limit, String sort, Integer page, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMeasurementStatusesValidateBeforeCall(Integer limit, String sort, Integer page, String order, final ApiCallback _callback) throws ApiException {
        return listMeasurementStatusesCall(limit, sort, page, order, _callback);

    }

    /**
     * List Uploading Statuses of Measurements
     * （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @return MeasurementUploadStatusesGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasurementUploadStatusesGetResponse listMeasurementStatuses(Integer limit, String sort, Integer page, String order) throws ApiException {
        ApiResponse<MeasurementUploadStatusesGetResponse> localVarResp = listMeasurementStatusesWithHttpInfo(limit, sort, page, order);
        return localVarResp.getData();
    }

    /**
     * List Uploading Statuses of Measurements
     * （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @return ApiResponse&lt;MeasurementUploadStatusesGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasurementUploadStatusesGetResponse> listMeasurementStatusesWithHttpInfo(Integer limit, String sort, Integer page, String order) throws ApiException {
        okhttp3.Call localVarCall = listMeasurementStatusesValidateBeforeCall(limit, sort, page, order, null);
        Type localVarReturnType = new TypeToken<MeasurementUploadStatusesGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Uploading Statuses of Measurements (asynchronously)
     * （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listMeasurementStatusesAsync(Integer limit, String sort, Integer page, String order, final ApiCallback<MeasurementUploadStatusesGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMeasurementStatusesValidateBeforeCall(limit, sort, page, order, _callback);
        Type localVarReturnType = new TypeToken<MeasurementUploadStatusesGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProjectMeasurementStatuses
     * @param projectUuid プロジェクトのUUID (required)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listProjectMeasurementStatusesCall(String projectUuid, Integer limit, String sort, Integer page, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/upload"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectMeasurementStatusesValidateBeforeCall(String projectUuid, Integer limit, String sort, Integer page, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling listProjectMeasurementStatuses(Async)");
        }

        return listProjectMeasurementStatusesCall(projectUuid, limit, sort, page, order, _callback);

    }

    /**
     * List Project Uploading Statuses of Measurements
     * （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @return MeasurementUploadStatusesGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasurementUploadStatusesGetResponse listProjectMeasurementStatuses(String projectUuid, Integer limit, String sort, Integer page, String order) throws ApiException {
        ApiResponse<MeasurementUploadStatusesGetResponse> localVarResp = listProjectMeasurementStatusesWithHttpInfo(projectUuid, limit, sort, page, order);
        return localVarResp.getData();
    }

    /**
     * List Project Uploading Statuses of Measurements
     * （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @return ApiResponse&lt;MeasurementUploadStatusesGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasurementUploadStatusesGetResponse> listProjectMeasurementStatusesWithHttpInfo(String projectUuid, Integer limit, String sort, Integer page, String order) throws ApiException {
        okhttp3.Call localVarCall = listProjectMeasurementStatusesValidateBeforeCall(projectUuid, limit, sort, page, order, null);
        Type localVarReturnType = new TypeToken<MeasurementUploadStatusesGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Project Uploading Statuses of Measurements (asynchronously)
     * （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listProjectMeasurementStatusesAsync(String projectUuid, Integer limit, String sort, Integer page, String order, final ApiCallback<MeasurementUploadStatusesGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectMeasurementStatusesValidateBeforeCall(projectUuid, limit, sort, page, order, _callback);
        Type localVarReturnType = new TypeToken<MeasurementUploadStatusesGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadMeasurement
     * @param edgeUuid エッジのUUID (required)
     * @param dataFile アップロードするファイル (required)
     * @param baseTime 計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)
     * @param baseTimeType 基準時刻のタイプ (optional, default to edge_rtc)
     * @param channel 計測のチャンネル（十進表記の文字列） (optional)
     * @param measEnd &#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)
     * @param labelDataType 列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadMeasurementCall(UUID edgeUuid, File dataFile, Date baseTime, String baseTimeType, Integer channel, Boolean measEnd, String labelDataType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (edgeUuid != null) {
            localVarFormParams.put("edge_uuid", edgeUuid);
        }

        if (baseTime != null) {
            localVarFormParams.put("base_time", baseTime);
        }

        if (baseTimeType != null) {
            localVarFormParams.put("base_time_type", baseTimeType);
        }

        if (channel != null) {
            localVarFormParams.put("channel", channel);
        }

        if (measEnd != null) {
            localVarFormParams.put("meas_end", measEnd);
        }

        if (labelDataType != null) {
            localVarFormParams.put("label_data_type", labelDataType);
        }

        if (dataFile != null) {
            localVarFormParams.put("data_file", dataFile);
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadMeasurementValidateBeforeCall(UUID edgeUuid, File dataFile, Date baseTime, String baseTimeType, Integer channel, Boolean measEnd, String labelDataType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'edgeUuid' is set
        if (edgeUuid == null) {
            throw new ApiException("Missing the required parameter 'edgeUuid' when calling uploadMeasurement(Async)");
        }

        // verify the required parameter 'dataFile' is set
        if (dataFile == null) {
            throw new ApiException("Missing the required parameter 'dataFile' when calling uploadMeasurement(Async)");
        }

        return uploadMeasurementCall(edgeUuid, dataFile, baseTime, baseTimeType, channel, measEnd, labelDataType, _callback);

    }

    /**
     * Create Measurement from CSV File
     * CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
     * @param edgeUuid エッジのUUID (required)
     * @param dataFile アップロードするファイル (required)
     * @param baseTime 計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)
     * @param baseTimeType 基準時刻のタイプ (optional, default to edge_rtc)
     * @param channel 計測のチャンネル（十進表記の文字列） (optional)
     * @param measEnd &#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)
     * @param labelDataType 列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)
     * @return MeasurementUploadPostResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MeasurementUploadPostResponse uploadMeasurement(UUID edgeUuid, File dataFile, Date baseTime, String baseTimeType, Integer channel, Boolean measEnd, String labelDataType) throws ApiException {
        ApiResponse<MeasurementUploadPostResponse> localVarResp = uploadMeasurementWithHttpInfo(edgeUuid, dataFile, baseTime, baseTimeType, channel, measEnd, labelDataType);
        return localVarResp.getData();
    }

    /**
     * Create Measurement from CSV File
     * CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
     * @param edgeUuid エッジのUUID (required)
     * @param dataFile アップロードするファイル (required)
     * @param baseTime 計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)
     * @param baseTimeType 基準時刻のタイプ (optional, default to edge_rtc)
     * @param channel 計測のチャンネル（十進表記の文字列） (optional)
     * @param measEnd &#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)
     * @param labelDataType 列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)
     * @return ApiResponse&lt;MeasurementUploadPostResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeasurementUploadPostResponse> uploadMeasurementWithHttpInfo(UUID edgeUuid, File dataFile, Date baseTime, String baseTimeType, Integer channel, Boolean measEnd, String labelDataType) throws ApiException {
        okhttp3.Call localVarCall = uploadMeasurementValidateBeforeCall(edgeUuid, dataFile, baseTime, baseTimeType, channel, measEnd, labelDataType, null);
        Type localVarReturnType = new TypeToken<MeasurementUploadPostResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Measurement from CSV File (asynchronously)
     * CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
     * @param edgeUuid エッジのUUID (required)
     * @param dataFile アップロードするファイル (required)
     * @param baseTime 計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)
     * @param baseTimeType 基準時刻のタイプ (optional, default to edge_rtc)
     * @param channel 計測のチャンネル（十進表記の文字列） (optional)
     * @param measEnd &#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)
     * @param labelDataType 列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadMeasurementAsync(UUID edgeUuid, File dataFile, Date baseTime, String baseTimeType, Integer channel, Boolean measEnd, String labelDataType, final ApiCallback<MeasurementUploadPostResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadMeasurementValidateBeforeCall(edgeUuid, dataFile, baseTime, baseTimeType, channel, measEnd, labelDataType, _callback);
        Type localVarReturnType = new TypeToken<MeasurementUploadPostResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadMeasurementIntoMeasurement
     * @param measurementUuid 計測のUUID (required)
     * @param dataFile アップロードするファイル (required)
     * @param channel 作成された計測のチャンネル (optional)
     * @param measEnd * &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)
     * @param labelDataType 列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call uploadMeasurementIntoMeasurementCall(String measurementUuid, File dataFile, Integer channel, Boolean measEnd, String labelDataType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}/upload"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channel != null) {
            localVarFormParams.put("channel", channel);
        }

        if (measEnd != null) {
            localVarFormParams.put("meas_end", measEnd);
        }

        if (labelDataType != null) {
            localVarFormParams.put("label_data_type", labelDataType);
        }

        if (dataFile != null) {
            localVarFormParams.put("data_file", dataFile);
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadMeasurementIntoMeasurementValidateBeforeCall(String measurementUuid, File dataFile, Integer channel, Boolean measEnd, String labelDataType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling uploadMeasurementIntoMeasurement(Async)");
        }

        // verify the required parameter 'dataFile' is set
        if (dataFile == null) {
            throw new ApiException("Missing the required parameter 'dataFile' when calling uploadMeasurementIntoMeasurement(Async)");
        }

        return uploadMeasurementIntoMeasurementCall(measurementUuid, dataFile, channel, measEnd, labelDataType, _callback);

    }

    /**
     * Store Data Points by CSV File
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/upload&#x60; を使用してください）  CSVファイルをアップロードし、計測にデータを追加します。
     * @param measurementUuid 計測のUUID (required)
     * @param dataFile アップロードするファイル (required)
     * @param channel 作成された計測のチャンネル (optional)
     * @param measEnd * &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)
     * @param labelDataType 列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)
     * @return MeasurementUploadPostResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasurementUploadPostResponse uploadMeasurementIntoMeasurement(String measurementUuid, File dataFile, Integer channel, Boolean measEnd, String labelDataType) throws ApiException {
        ApiResponse<MeasurementUploadPostResponse> localVarResp = uploadMeasurementIntoMeasurementWithHttpInfo(measurementUuid, dataFile, channel, measEnd, labelDataType);
        return localVarResp.getData();
    }

    /**
     * Store Data Points by CSV File
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/upload&#x60; を使用してください）  CSVファイルをアップロードし、計測にデータを追加します。
     * @param measurementUuid 計測のUUID (required)
     * @param dataFile アップロードするファイル (required)
     * @param channel 作成された計測のチャンネル (optional)
     * @param measEnd * &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)
     * @param labelDataType 列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)
     * @return ApiResponse&lt;MeasurementUploadPostResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasurementUploadPostResponse> uploadMeasurementIntoMeasurementWithHttpInfo(String measurementUuid, File dataFile, Integer channel, Boolean measEnd, String labelDataType) throws ApiException {
        okhttp3.Call localVarCall = uploadMeasurementIntoMeasurementValidateBeforeCall(measurementUuid, dataFile, channel, measEnd, labelDataType, null);
        Type localVarReturnType = new TypeToken<MeasurementUploadPostResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Store Data Points by CSV File (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/upload&#x60; を使用してください）  CSVファイルをアップロードし、計測にデータを追加します。
     * @param measurementUuid 計測のUUID (required)
     * @param dataFile アップロードするファイル (required)
     * @param channel 作成された計測のチャンネル (optional)
     * @param measEnd * &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)
     * @param labelDataType 列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call uploadMeasurementIntoMeasurementAsync(String measurementUuid, File dataFile, Integer channel, Boolean measEnd, String labelDataType, final ApiCallback<MeasurementUploadPostResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadMeasurementIntoMeasurementValidateBeforeCall(measurementUuid, dataFile, channel, measEnd, labelDataType, _callback);
        Type localVarReturnType = new TypeToken<MeasurementUploadPostResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadProjectMeasurement
     * @param projectUuid プロジェクトのUUID (required)
     * @param edgeUuid エッジのUUID (required)
     * @param dataFile アップロードするファイル (required)
     * @param baseTime 計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)
     * @param baseTimeType 基準時刻のタイプ (optional, default to edge_rtc)
     * @param channel 計測のチャンネル（十進表記の文字列） (optional)
     * @param measEnd &#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)
     * @param labelDataType 列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadProjectMeasurementCall(String projectUuid, UUID edgeUuid, File dataFile, Date baseTime, String baseTimeType, Integer channel, Boolean measEnd, String labelDataType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/upload"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (edgeUuid != null) {
            localVarFormParams.put("edge_uuid", edgeUuid);
        }

        if (baseTime != null) {
            localVarFormParams.put("base_time", baseTime);
        }

        if (baseTimeType != null) {
            localVarFormParams.put("base_time_type", baseTimeType);
        }

        if (channel != null) {
            localVarFormParams.put("channel", channel);
        }

        if (measEnd != null) {
            localVarFormParams.put("meas_end", measEnd);
        }

        if (labelDataType != null) {
            localVarFormParams.put("label_data_type", labelDataType);
        }

        if (dataFile != null) {
            localVarFormParams.put("data_file", dataFile);
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadProjectMeasurementValidateBeforeCall(String projectUuid, UUID edgeUuid, File dataFile, Date baseTime, String baseTimeType, Integer channel, Boolean measEnd, String labelDataType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling uploadProjectMeasurement(Async)");
        }

        // verify the required parameter 'edgeUuid' is set
        if (edgeUuid == null) {
            throw new ApiException("Missing the required parameter 'edgeUuid' when calling uploadProjectMeasurement(Async)");
        }

        // verify the required parameter 'dataFile' is set
        if (dataFile == null) {
            throw new ApiException("Missing the required parameter 'dataFile' when calling uploadProjectMeasurement(Async)");
        }

        return uploadProjectMeasurementCall(projectUuid, edgeUuid, dataFile, baseTime, baseTimeType, channel, measEnd, labelDataType, _callback);

    }

    /**
     * Create Project Measurement from CSV File
     * CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
     * @param projectUuid プロジェクトのUUID (required)
     * @param edgeUuid エッジのUUID (required)
     * @param dataFile アップロードするファイル (required)
     * @param baseTime 計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)
     * @param baseTimeType 基準時刻のタイプ (optional, default to edge_rtc)
     * @param channel 計測のチャンネル（十進表記の文字列） (optional)
     * @param measEnd &#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)
     * @param labelDataType 列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)
     * @return MeasurementUploadPostResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MeasurementUploadPostResponse uploadProjectMeasurement(String projectUuid, UUID edgeUuid, File dataFile, Date baseTime, String baseTimeType, Integer channel, Boolean measEnd, String labelDataType) throws ApiException {
        ApiResponse<MeasurementUploadPostResponse> localVarResp = uploadProjectMeasurementWithHttpInfo(projectUuid, edgeUuid, dataFile, baseTime, baseTimeType, channel, measEnd, labelDataType);
        return localVarResp.getData();
    }

    /**
     * Create Project Measurement from CSV File
     * CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
     * @param projectUuid プロジェクトのUUID (required)
     * @param edgeUuid エッジのUUID (required)
     * @param dataFile アップロードするファイル (required)
     * @param baseTime 計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)
     * @param baseTimeType 基準時刻のタイプ (optional, default to edge_rtc)
     * @param channel 計測のチャンネル（十進表記の文字列） (optional)
     * @param measEnd &#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)
     * @param labelDataType 列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)
     * @return ApiResponse&lt;MeasurementUploadPostResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeasurementUploadPostResponse> uploadProjectMeasurementWithHttpInfo(String projectUuid, UUID edgeUuid, File dataFile, Date baseTime, String baseTimeType, Integer channel, Boolean measEnd, String labelDataType) throws ApiException {
        okhttp3.Call localVarCall = uploadProjectMeasurementValidateBeforeCall(projectUuid, edgeUuid, dataFile, baseTime, baseTimeType, channel, measEnd, labelDataType, null);
        Type localVarReturnType = new TypeToken<MeasurementUploadPostResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Project Measurement from CSV File (asynchronously)
     * CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
     * @param projectUuid プロジェクトのUUID (required)
     * @param edgeUuid エッジのUUID (required)
     * @param dataFile アップロードするファイル (required)
     * @param baseTime 計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)
     * @param baseTimeType 基準時刻のタイプ (optional, default to edge_rtc)
     * @param channel 計測のチャンネル（十進表記の文字列） (optional)
     * @param measEnd &#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)
     * @param labelDataType 列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadProjectMeasurementAsync(String projectUuid, UUID edgeUuid, File dataFile, Date baseTime, String baseTimeType, Integer channel, Boolean measEnd, String labelDataType, final ApiCallback<MeasurementUploadPostResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadProjectMeasurementValidateBeforeCall(projectUuid, edgeUuid, dataFile, baseTime, baseTimeType, channel, measEnd, labelDataType, _callback);
        Type localVarReturnType = new TypeToken<MeasurementUploadPostResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadProjectMeasurementIntoMeasurement
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param dataFile アップロードするファイル (required)
     * @param channel 作成された計測のチャンネル (optional)
     * @param measEnd * &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)
     * @param labelDataType 列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadProjectMeasurementIntoMeasurementCall(String projectUuid, String measurementUuid, File dataFile, Integer channel, Boolean measEnd, String labelDataType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/upload"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channel != null) {
            localVarFormParams.put("channel", channel);
        }

        if (measEnd != null) {
            localVarFormParams.put("meas_end", measEnd);
        }

        if (labelDataType != null) {
            localVarFormParams.put("label_data_type", labelDataType);
        }

        if (dataFile != null) {
            localVarFormParams.put("data_file", dataFile);
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadProjectMeasurementIntoMeasurementValidateBeforeCall(String projectUuid, String measurementUuid, File dataFile, Integer channel, Boolean measEnd, String labelDataType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling uploadProjectMeasurementIntoMeasurement(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling uploadProjectMeasurementIntoMeasurement(Async)");
        }

        // verify the required parameter 'dataFile' is set
        if (dataFile == null) {
            throw new ApiException("Missing the required parameter 'dataFile' when calling uploadProjectMeasurementIntoMeasurement(Async)");
        }

        return uploadProjectMeasurementIntoMeasurementCall(projectUuid, measurementUuid, dataFile, channel, measEnd, labelDataType, _callback);

    }

    /**
     * Store Project Data Points by CSV File
     * CSVファイルをアップロードし、計測にデータを追加します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param dataFile アップロードするファイル (required)
     * @param channel 作成された計測のチャンネル (optional)
     * @param measEnd * &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)
     * @param labelDataType 列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)
     * @return MeasurementUploadPostResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MeasurementUploadPostResponse uploadProjectMeasurementIntoMeasurement(String projectUuid, String measurementUuid, File dataFile, Integer channel, Boolean measEnd, String labelDataType) throws ApiException {
        ApiResponse<MeasurementUploadPostResponse> localVarResp = uploadProjectMeasurementIntoMeasurementWithHttpInfo(projectUuid, measurementUuid, dataFile, channel, measEnd, labelDataType);
        return localVarResp.getData();
    }

    /**
     * Store Project Data Points by CSV File
     * CSVファイルをアップロードし、計測にデータを追加します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param dataFile アップロードするファイル (required)
     * @param channel 作成された計測のチャンネル (optional)
     * @param measEnd * &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)
     * @param labelDataType 列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)
     * @return ApiResponse&lt;MeasurementUploadPostResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeasurementUploadPostResponse> uploadProjectMeasurementIntoMeasurementWithHttpInfo(String projectUuid, String measurementUuid, File dataFile, Integer channel, Boolean measEnd, String labelDataType) throws ApiException {
        okhttp3.Call localVarCall = uploadProjectMeasurementIntoMeasurementValidateBeforeCall(projectUuid, measurementUuid, dataFile, channel, measEnd, labelDataType, null);
        Type localVarReturnType = new TypeToken<MeasurementUploadPostResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Store Project Data Points by CSV File (asynchronously)
     * CSVファイルをアップロードし、計測にデータを追加します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param dataFile アップロードするファイル (required)
     * @param channel 作成された計測のチャンネル (optional)
     * @param measEnd * &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)
     * @param labelDataType 列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadProjectMeasurementIntoMeasurementAsync(String projectUuid, String measurementUuid, File dataFile, Integer channel, Boolean measEnd, String labelDataType, final ApiCallback<MeasurementUploadPostResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadProjectMeasurementIntoMeasurementValidateBeforeCall(projectUuid, measurementUuid, dataFile, channel, measEnd, labelDataType, _callback);
        Type localVarReturnType = new TypeToken<MeasurementUploadPostResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
