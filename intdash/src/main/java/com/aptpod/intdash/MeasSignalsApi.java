/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aptpod.intdash;

import com.aptpod.ApiCallback;
import com.aptpod.ApiClient;
import com.aptpod.ApiException;
import com.aptpod.ApiResponse;
import com.aptpod.Configuration;
import com.aptpod.Pair;
import com.aptpod.ProgressRequestBody;
import com.aptpod.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateSignalRequest;
import org.openapitools.client.model.Signal;
import org.openapitools.client.model.Signals;
import org.openapitools.client.model.UpdateSignalRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MeasSignalsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MeasSignalsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MeasSignalsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createProjectSignal
     * @param projectUuid プロジェクトのUUID (required)
     * @param createSignalRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectSignalCall(String projectUuid, CreateSignalRequest createSignalRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSignalRequest;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/signals"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectSignalValidateBeforeCall(String projectUuid, CreateSignalRequest createSignalRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling createProjectSignal(Async)");
        }

        return createProjectSignalCall(projectUuid, createSignalRequest, _callback);

    }

    /**
     * Create Project Signal
     * 信号定義を作成します。  * **Note**     - 既存の信号定義と &#x60;label&#x60; が重複する場合、または &#x60;uuid&#x60; が重複する場合は、       ステータスコード &#x60;409 Conflict&#x60; が返却されます。
     * @param projectUuid プロジェクトのUUID (required)
     * @param createSignalRequest  (optional)
     * @return Signal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public Signal createProjectSignal(String projectUuid, CreateSignalRequest createSignalRequest) throws ApiException {
        ApiResponse<Signal> localVarResp = createProjectSignalWithHttpInfo(projectUuid, createSignalRequest);
        return localVarResp.getData();
    }

    /**
     * Create Project Signal
     * 信号定義を作成します。  * **Note**     - 既存の信号定義と &#x60;label&#x60; が重複する場合、または &#x60;uuid&#x60; が重複する場合は、       ステータスコード &#x60;409 Conflict&#x60; が返却されます。
     * @param projectUuid プロジェクトのUUID (required)
     * @param createSignalRequest  (optional)
     * @return ApiResponse&lt;Signal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Signal> createProjectSignalWithHttpInfo(String projectUuid, CreateSignalRequest createSignalRequest) throws ApiException {
        okhttp3.Call localVarCall = createProjectSignalValidateBeforeCall(projectUuid, createSignalRequest, null);
        Type localVarReturnType = new TypeToken<Signal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Project Signal (asynchronously)
     * 信号定義を作成します。  * **Note**     - 既存の信号定義と &#x60;label&#x60; が重複する場合、または &#x60;uuid&#x60; が重複する場合は、       ステータスコード &#x60;409 Conflict&#x60; が返却されます。
     * @param projectUuid プロジェクトのUUID (required)
     * @param createSignalRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectSignalAsync(String projectUuid, CreateSignalRequest createSignalRequest, final ApiCallback<Signal> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectSignalValidateBeforeCall(projectUuid, createSignalRequest, _callback);
        Type localVarReturnType = new TypeToken<Signal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSignal
     * @param createSignalRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createSignalCall(CreateSignalRequest createSignalRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSignalRequest;

        // create path and map variables
        String localVarPath = "/v1/signals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSignalValidateBeforeCall(CreateSignalRequest createSignalRequest, final ApiCallback _callback) throws ApiException {
        return createSignalCall(createSignalRequest, _callback);

    }

    /**
     * Create Signal
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/signals&#x60; を使用してください）  信号定義を作成します。   * **Note**      - 既存の信号定義と &#x60;label&#x60; が重複する場合、または &#x60;uuid&#x60; が重複する場合は、        ステータスコード &#x60;409 Conflict&#x60; が返却されます。
     * @param createSignalRequest  (optional)
     * @return Signal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Signal createSignal(CreateSignalRequest createSignalRequest) throws ApiException {
        ApiResponse<Signal> localVarResp = createSignalWithHttpInfo(createSignalRequest);
        return localVarResp.getData();
    }

    /**
     * Create Signal
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/signals&#x60; を使用してください）  信号定義を作成します。   * **Note**      - 既存の信号定義と &#x60;label&#x60; が重複する場合、または &#x60;uuid&#x60; が重複する場合は、        ステータスコード &#x60;409 Conflict&#x60; が返却されます。
     * @param createSignalRequest  (optional)
     * @return ApiResponse&lt;Signal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Signal> createSignalWithHttpInfo(CreateSignalRequest createSignalRequest) throws ApiException {
        okhttp3.Call localVarCall = createSignalValidateBeforeCall(createSignalRequest, null);
        Type localVarReturnType = new TypeToken<Signal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Signal (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/signals&#x60; を使用してください）  信号定義を作成します。   * **Note**      - 既存の信号定義と &#x60;label&#x60; が重複する場合、または &#x60;uuid&#x60; が重複する場合は、        ステータスコード &#x60;409 Conflict&#x60; が返却されます。
     * @param createSignalRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createSignalAsync(CreateSignalRequest createSignalRequest, final ApiCallback<Signal> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSignalValidateBeforeCall(createSignalRequest, _callback);
        Type localVarReturnType = new TypeToken<Signal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProjectSignal
     * @param projectUuid プロジェクトのUUID (required)
     * @param signalUuid 信号定義のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectSignalCall(String projectUuid, String signalUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/signals/{signal_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "signal_uuid" + "}", localVarApiClient.escapeString(signalUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectSignalValidateBeforeCall(String projectUuid, String signalUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling deleteProjectSignal(Async)");
        }

        // verify the required parameter 'signalUuid' is set
        if (signalUuid == null) {
            throw new ApiException("Missing the required parameter 'signalUuid' when calling deleteProjectSignal(Async)");
        }

        return deleteProjectSignalCall(projectUuid, signalUuid, _callback);

    }

    /**
     * Delete Project Signal
     * 信号定義を削除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param signalUuid 信号定義のUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProjectSignal(String projectUuid, String signalUuid) throws ApiException {
        deleteProjectSignalWithHttpInfo(projectUuid, signalUuid);
    }

    /**
     * Delete Project Signal
     * 信号定義を削除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param signalUuid 信号定義のUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProjectSignalWithHttpInfo(String projectUuid, String signalUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectSignalValidateBeforeCall(projectUuid, signalUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Project Signal (asynchronously)
     * 信号定義を削除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param signalUuid 信号定義のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectSignalAsync(String projectUuid, String signalUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectSignalValidateBeforeCall(projectUuid, signalUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSignal
     * @param signalUuid 信号定義のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteSignalCall(String signalUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/signals/{signal_uuid}"
            .replace("{" + "signal_uuid" + "}", localVarApiClient.escapeString(signalUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSignalValidateBeforeCall(String signalUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signalUuid' is set
        if (signalUuid == null) {
            throw new ApiException("Missing the required parameter 'signalUuid' when calling deleteSignal(Async)");
        }

        return deleteSignalCall(signalUuid, _callback);

    }

    /**
     * Delete Signal
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/signals/{signal_uuid}&#x60; を使用してください） 信号定義を削除します。
     * @param signalUuid 信号定義のUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteSignal(String signalUuid) throws ApiException {
        deleteSignalWithHttpInfo(signalUuid);
    }

    /**
     * Delete Signal
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/signals/{signal_uuid}&#x60; を使用してください） 信号定義を削除します。
     * @param signalUuid 信号定義のUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteSignalWithHttpInfo(String signalUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteSignalValidateBeforeCall(signalUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Signal (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/signals/{signal_uuid}&#x60; を使用してください） 信号定義を削除します。
     * @param signalUuid 信号定義のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteSignalAsync(String signalUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSignalValidateBeforeCall(signalUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectSignal
     * @param projectUuid プロジェクトのUUID (required)
     * @param signalUuid 信号定義のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectSignalCall(String projectUuid, String signalUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/signals/{signal_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "signal_uuid" + "}", localVarApiClient.escapeString(signalUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectSignalValidateBeforeCall(String projectUuid, String signalUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling getProjectSignal(Async)");
        }

        // verify the required parameter 'signalUuid' is set
        if (signalUuid == null) {
            throw new ApiException("Missing the required parameter 'signalUuid' when calling getProjectSignal(Async)");
        }

        return getProjectSignalCall(projectUuid, signalUuid, _callback);

    }

    /**
     * Get Project Signal
     * 信号定義を取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param signalUuid 信号定義のUUID (required)
     * @return Signal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Signal getProjectSignal(String projectUuid, String signalUuid) throws ApiException {
        ApiResponse<Signal> localVarResp = getProjectSignalWithHttpInfo(projectUuid, signalUuid);
        return localVarResp.getData();
    }

    /**
     * Get Project Signal
     * 信号定義を取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param signalUuid 信号定義のUUID (required)
     * @return ApiResponse&lt;Signal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Signal> getProjectSignalWithHttpInfo(String projectUuid, String signalUuid) throws ApiException {
        okhttp3.Call localVarCall = getProjectSignalValidateBeforeCall(projectUuid, signalUuid, null);
        Type localVarReturnType = new TypeToken<Signal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Project Signal (asynchronously)
     * 信号定義を取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param signalUuid 信号定義のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectSignalAsync(String projectUuid, String signalUuid, final ApiCallback<Signal> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectSignalValidateBeforeCall(projectUuid, signalUuid, _callback);
        Type localVarReturnType = new TypeToken<Signal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSignal
     * @param signalUuid 信号定義のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getSignalCall(String signalUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/signals/{signal_uuid}"
            .replace("{" + "signal_uuid" + "}", localVarApiClient.escapeString(signalUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSignalValidateBeforeCall(String signalUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signalUuid' is set
        if (signalUuid == null) {
            throw new ApiException("Missing the required parameter 'signalUuid' when calling getSignal(Async)");
        }

        return getSignalCall(signalUuid, _callback);

    }

    /**
     * Get Signal
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/signals/{signal_uuid}&#x60; を使用してください） 信号定義を取得します。
     * @param signalUuid 信号定義のUUID (required)
     * @return Signal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Signal getSignal(String signalUuid) throws ApiException {
        ApiResponse<Signal> localVarResp = getSignalWithHttpInfo(signalUuid);
        return localVarResp.getData();
    }

    /**
     * Get Signal
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/signals/{signal_uuid}&#x60; を使用してください） 信号定義を取得します。
     * @param signalUuid 信号定義のUUID (required)
     * @return ApiResponse&lt;Signal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Signal> getSignalWithHttpInfo(String signalUuid) throws ApiException {
        okhttp3.Call localVarCall = getSignalValidateBeforeCall(signalUuid, null);
        Type localVarReturnType = new TypeToken<Signal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Signal (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/signals/{signal_uuid}&#x60; を使用してください） 信号定義を取得します。
     * @param signalUuid 信号定義のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getSignalAsync(String signalUuid, final ApiCallback<Signal> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSignalValidateBeforeCall(signalUuid, _callback);
        Type localVarReturnType = new TypeToken<Signal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProjectSignals
     * @param projectUuid プロジェクトのUUID (required)
     * @param label ラベルが指定した文字列から始まる信号定義を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     * @param sort 並べ替えに使用するキー (optional)
     * @param order 並べ替えの順序 (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param page 取得するページの番号 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectSignalsCall(String projectUuid, List<String> label, String sort, String order, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/signals"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (label != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "label", label));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectSignalsValidateBeforeCall(String projectUuid, List<String> label, String sort, String order, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling listProjectSignals(Async)");
        }

        return listProjectSignalsCall(projectUuid, label, sort, order, limit, page, _callback);

    }

    /**
     * List Project Signals
     * 信号定義のリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param label ラベルが指定した文字列から始まる信号定義を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     * @param sort 並べ替えに使用するキー (optional)
     * @param order 並べ替えの順序 (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param page 取得するページの番号 (optional)
     * @return Signals
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Signals listProjectSignals(String projectUuid, List<String> label, String sort, String order, Integer limit, Integer page) throws ApiException {
        ApiResponse<Signals> localVarResp = listProjectSignalsWithHttpInfo(projectUuid, label, sort, order, limit, page);
        return localVarResp.getData();
    }

    /**
     * List Project Signals
     * 信号定義のリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param label ラベルが指定した文字列から始まる信号定義を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     * @param sort 並べ替えに使用するキー (optional)
     * @param order 並べ替えの順序 (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param page 取得するページの番号 (optional)
     * @return ApiResponse&lt;Signals&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Signals> listProjectSignalsWithHttpInfo(String projectUuid, List<String> label, String sort, String order, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listProjectSignalsValidateBeforeCall(projectUuid, label, sort, order, limit, page, null);
        Type localVarReturnType = new TypeToken<Signals>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Project Signals (asynchronously)
     * 信号定義のリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param label ラベルが指定した文字列から始まる信号定義を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     * @param sort 並べ替えに使用するキー (optional)
     * @param order 並べ替えの順序 (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param page 取得するページの番号 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectSignalsAsync(String projectUuid, List<String> label, String sort, String order, Integer limit, Integer page, final ApiCallback<Signals> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectSignalsValidateBeforeCall(projectUuid, label, sort, order, limit, page, _callback);
        Type localVarReturnType = new TypeToken<Signals>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSignals
     * @param label ラベルが指定した文字列から始まる信号定義を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     * @param sort 並べ替えに使用するキー (optional)
     * @param order 並べ替えの順序 (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param page 取得するページの番号 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listSignalsCall(List<String> label, String sort, String order, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/signals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (label != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "label", label));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSignalsValidateBeforeCall(List<String> label, String sort, String order, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        return listSignalsCall(label, sort, order, limit, page, _callback);

    }

    /**
     * List Signals
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/signals&#x60; を使用してください） 信号定義のリストを取得します。
     * @param label ラベルが指定した文字列から始まる信号定義を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     * @param sort 並べ替えに使用するキー (optional)
     * @param order 並べ替えの順序 (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param page 取得するページの番号 (optional)
     * @return Signals
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Signals listSignals(List<String> label, String sort, String order, Integer limit, Integer page) throws ApiException {
        ApiResponse<Signals> localVarResp = listSignalsWithHttpInfo(label, sort, order, limit, page);
        return localVarResp.getData();
    }

    /**
     * List Signals
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/signals&#x60; を使用してください） 信号定義のリストを取得します。
     * @param label ラベルが指定した文字列から始まる信号定義を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     * @param sort 並べ替えに使用するキー (optional)
     * @param order 並べ替えの順序 (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param page 取得するページの番号 (optional)
     * @return ApiResponse&lt;Signals&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Signals> listSignalsWithHttpInfo(List<String> label, String sort, String order, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listSignalsValidateBeforeCall(label, sort, order, limit, page, null);
        Type localVarReturnType = new TypeToken<Signals>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Signals (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/signals&#x60; を使用してください） 信号定義のリストを取得します。
     * @param label ラベルが指定した文字列から始まる信号定義を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     * @param sort 並べ替えに使用するキー (optional)
     * @param order 並べ替えの順序 (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param page 取得するページの番号 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listSignalsAsync(List<String> label, String sort, String order, Integer limit, Integer page, final ApiCallback<Signals> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSignalsValidateBeforeCall(label, sort, order, limit, page, _callback);
        Type localVarReturnType = new TypeToken<Signals>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProjectSignal
     * @param projectUuid プロジェクトのUUID (required)
     * @param signalUuid 信号定義のUUID (required)
     * @param updateSignalRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectSignalCall(String projectUuid, String signalUuid, UpdateSignalRequest updateSignalRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSignalRequest;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/signals/{signal_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "signal_uuid" + "}", localVarApiClient.escapeString(signalUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectSignalValidateBeforeCall(String projectUuid, String signalUuid, UpdateSignalRequest updateSignalRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling updateProjectSignal(Async)");
        }

        // verify the required parameter 'signalUuid' is set
        if (signalUuid == null) {
            throw new ApiException("Missing the required parameter 'signalUuid' when calling updateProjectSignal(Async)");
        }

        return updateProjectSignalCall(projectUuid, signalUuid, updateSignalRequest, _callback);

    }

    /**
     * Update Project Signal
     * 信号定義を更新します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param signalUuid 信号定義のUUID (required)
     * @param updateSignalRequest  (optional)
     * @return Signal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Signal updateProjectSignal(String projectUuid, String signalUuid, UpdateSignalRequest updateSignalRequest) throws ApiException {
        ApiResponse<Signal> localVarResp = updateProjectSignalWithHttpInfo(projectUuid, signalUuid, updateSignalRequest);
        return localVarResp.getData();
    }

    /**
     * Update Project Signal
     * 信号定義を更新します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param signalUuid 信号定義のUUID (required)
     * @param updateSignalRequest  (optional)
     * @return ApiResponse&lt;Signal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Signal> updateProjectSignalWithHttpInfo(String projectUuid, String signalUuid, UpdateSignalRequest updateSignalRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProjectSignalValidateBeforeCall(projectUuid, signalUuid, updateSignalRequest, null);
        Type localVarReturnType = new TypeToken<Signal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Project Signal (asynchronously)
     * 信号定義を更新します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param signalUuid 信号定義のUUID (required)
     * @param updateSignalRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectSignalAsync(String projectUuid, String signalUuid, UpdateSignalRequest updateSignalRequest, final ApiCallback<Signal> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectSignalValidateBeforeCall(projectUuid, signalUuid, updateSignalRequest, _callback);
        Type localVarReturnType = new TypeToken<Signal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSignal
     * @param signalUuid 信号定義のUUID (required)
     * @param updateSignalRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateSignalCall(String signalUuid, UpdateSignalRequest updateSignalRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSignalRequest;

        // create path and map variables
        String localVarPath = "/v1/signals/{signal_uuid}"
            .replace("{" + "signal_uuid" + "}", localVarApiClient.escapeString(signalUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSignalValidateBeforeCall(String signalUuid, UpdateSignalRequest updateSignalRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signalUuid' is set
        if (signalUuid == null) {
            throw new ApiException("Missing the required parameter 'signalUuid' when calling updateSignal(Async)");
        }

        return updateSignalCall(signalUuid, updateSignalRequest, _callback);

    }

    /**
     * Update Signal
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/signals/{signal_uuid}&#x60; を使用してください） 信号定義を更新します。
     * @param signalUuid 信号定義のUUID (required)
     * @param updateSignalRequest  (optional)
     * @return Signal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Signal updateSignal(String signalUuid, UpdateSignalRequest updateSignalRequest) throws ApiException {
        ApiResponse<Signal> localVarResp = updateSignalWithHttpInfo(signalUuid, updateSignalRequest);
        return localVarResp.getData();
    }

    /**
     * Update Signal
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/signals/{signal_uuid}&#x60; を使用してください） 信号定義を更新します。
     * @param signalUuid 信号定義のUUID (required)
     * @param updateSignalRequest  (optional)
     * @return ApiResponse&lt;Signal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Signal> updateSignalWithHttpInfo(String signalUuid, UpdateSignalRequest updateSignalRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSignalValidateBeforeCall(signalUuid, updateSignalRequest, null);
        Type localVarReturnType = new TypeToken<Signal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Signal (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/signals/{signal_uuid}&#x60; を使用してください） 信号定義を更新します。
     * @param signalUuid 信号定義のUUID (required)
     * @param updateSignalRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateSignalAsync(String signalUuid, UpdateSignalRequest updateSignalRequest, final ApiCallback<Signal> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSignalValidateBeforeCall(signalUuid, updateSignalRequest, _callback);
        Type localVarReturnType = new TypeToken<Signal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
