/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aptpod.intdash;

import com.aptpod.ApiCallback;
import com.aptpod.ApiClient;
import com.aptpod.ApiException;
import com.aptpod.ApiResponse;
import com.aptpod.Configuration;
import com.aptpod.Pair;
import com.aptpod.ProgressRequestBody;
import com.aptpod.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MeasurementJob;
import org.openapitools.client.model.MeasurementJobs;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MeasMeasurementJobsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MeasMeasurementJobsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MeasMeasurementJobsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelMeasurementJob
     * @param jobUuid ジョブのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call cancelMeasurementJobCall(String jobUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/jobs/{job_uuid}/cancel"
            .replace("{" + "job_uuid" + "}", localVarApiClient.escapeString(jobUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelMeasurementJobValidateBeforeCall(String jobUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobUuid' is set
        if (jobUuid == null) {
            throw new ApiException("Missing the required parameter 'jobUuid' when calling cancelMeasurementJob(Async)");
        }

        return cancelMeasurementJobCall(jobUuid, _callback);

    }

    /**
     * Cancel Measurement Job
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/jobs/{job_uuid}/cancel&#x60; を使用してください） ジョブをキャンセルします。
     * @param jobUuid ジョブのUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void cancelMeasurementJob(String jobUuid) throws ApiException {
        cancelMeasurementJobWithHttpInfo(jobUuid);
    }

    /**
     * Cancel Measurement Job
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/jobs/{job_uuid}/cancel&#x60; を使用してください） ジョブをキャンセルします。
     * @param jobUuid ジョブのUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> cancelMeasurementJobWithHttpInfo(String jobUuid) throws ApiException {
        okhttp3.Call localVarCall = cancelMeasurementJobValidateBeforeCall(jobUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel Measurement Job (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/jobs/{job_uuid}/cancel&#x60; を使用してください） ジョブをキャンセルします。
     * @param jobUuid ジョブのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call cancelMeasurementJobAsync(String jobUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelMeasurementJobValidateBeforeCall(jobUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelProjectMeasurementJob
     * @param projectUuid プロジェクトのUUID (required)
     * @param jobUuid ジョブのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelProjectMeasurementJobCall(String projectUuid, String jobUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/jobs/{job_uuid}/cancel"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "job_uuid" + "}", localVarApiClient.escapeString(jobUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelProjectMeasurementJobValidateBeforeCall(String projectUuid, String jobUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling cancelProjectMeasurementJob(Async)");
        }

        // verify the required parameter 'jobUuid' is set
        if (jobUuid == null) {
            throw new ApiException("Missing the required parameter 'jobUuid' when calling cancelProjectMeasurementJob(Async)");
        }

        return cancelProjectMeasurementJobCall(projectUuid, jobUuid, _callback);

    }

    /**
     * Cancel Project Measurement Job
     * ジョブをキャンセルします。
     * @param projectUuid プロジェクトのUUID (required)
     * @param jobUuid ジョブのUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void cancelProjectMeasurementJob(String projectUuid, String jobUuid) throws ApiException {
        cancelProjectMeasurementJobWithHttpInfo(projectUuid, jobUuid);
    }

    /**
     * Cancel Project Measurement Job
     * ジョブをキャンセルします。
     * @param projectUuid プロジェクトのUUID (required)
     * @param jobUuid ジョブのUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelProjectMeasurementJobWithHttpInfo(String projectUuid, String jobUuid) throws ApiException {
        okhttp3.Call localVarCall = cancelProjectMeasurementJobValidateBeforeCall(projectUuid, jobUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel Project Measurement Job (asynchronously)
     * ジョブをキャンセルします。
     * @param projectUuid プロジェクトのUUID (required)
     * @param jobUuid ジョブのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelProjectMeasurementJobAsync(String projectUuid, String jobUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelProjectMeasurementJobValidateBeforeCall(projectUuid, jobUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMeasurementJob
     * @param jobUuid ジョブのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteMeasurementJobCall(String jobUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/jobs/{job_uuid}"
            .replace("{" + "job_uuid" + "}", localVarApiClient.escapeString(jobUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMeasurementJobValidateBeforeCall(String jobUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobUuid' is set
        if (jobUuid == null) {
            throw new ApiException("Missing the required parameter 'jobUuid' when calling deleteMeasurementJob(Async)");
        }

        return deleteMeasurementJobCall(jobUuid, _callback);

    }

    /**
     * Delete Measurement Job
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/jobs/{job_uuid}&#x60; を使用してください） ジョブを削除します。
     * @param jobUuid ジョブのUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteMeasurementJob(String jobUuid) throws ApiException {
        deleteMeasurementJobWithHttpInfo(jobUuid);
    }

    /**
     * Delete Measurement Job
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/jobs/{job_uuid}&#x60; を使用してください） ジョブを削除します。
     * @param jobUuid ジョブのUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteMeasurementJobWithHttpInfo(String jobUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteMeasurementJobValidateBeforeCall(jobUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Measurement Job (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/jobs/{job_uuid}&#x60; を使用してください） ジョブを削除します。
     * @param jobUuid ジョブのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteMeasurementJobAsync(String jobUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMeasurementJobValidateBeforeCall(jobUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProjectMeasurementJob
     * @param projectUuid プロジェクトのUUID (required)
     * @param jobUuid ジョブのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectMeasurementJobCall(String projectUuid, String jobUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/jobs/{job_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "job_uuid" + "}", localVarApiClient.escapeString(jobUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectMeasurementJobValidateBeforeCall(String projectUuid, String jobUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling deleteProjectMeasurementJob(Async)");
        }

        // verify the required parameter 'jobUuid' is set
        if (jobUuid == null) {
            throw new ApiException("Missing the required parameter 'jobUuid' when calling deleteProjectMeasurementJob(Async)");
        }

        return deleteProjectMeasurementJobCall(projectUuid, jobUuid, _callback);

    }

    /**
     * Delete Project Measurement Job
     * ジョブを削除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param jobUuid ジョブのUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProjectMeasurementJob(String projectUuid, String jobUuid) throws ApiException {
        deleteProjectMeasurementJobWithHttpInfo(projectUuid, jobUuid);
    }

    /**
     * Delete Project Measurement Job
     * ジョブを削除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param jobUuid ジョブのUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProjectMeasurementJobWithHttpInfo(String projectUuid, String jobUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectMeasurementJobValidateBeforeCall(projectUuid, jobUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Project Measurement Job (asynchronously)
     * ジョブを削除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param jobUuid ジョブのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectMeasurementJobAsync(String projectUuid, String jobUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectMeasurementJobValidateBeforeCall(projectUuid, jobUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMeasurementJob
     * @param jobUuid ジョブのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMeasurementJobCall(String jobUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/jobs/{job_uuid}"
            .replace("{" + "job_uuid" + "}", localVarApiClient.escapeString(jobUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeasurementJobValidateBeforeCall(String jobUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobUuid' is set
        if (jobUuid == null) {
            throw new ApiException("Missing the required parameter 'jobUuid' when calling getMeasurementJob(Async)");
        }

        return getMeasurementJobCall(jobUuid, _callback);

    }

    /**
     * Get Measurement Job
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/jobs/{job_uuid}&#x60; を使用してください） ジョブを取得します。
     * @param jobUuid ジョブのUUID (required)
     * @return MeasurementJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasurementJob getMeasurementJob(String jobUuid) throws ApiException {
        ApiResponse<MeasurementJob> localVarResp = getMeasurementJobWithHttpInfo(jobUuid);
        return localVarResp.getData();
    }

    /**
     * Get Measurement Job
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/jobs/{job_uuid}&#x60; を使用してください） ジョブを取得します。
     * @param jobUuid ジョブのUUID (required)
     * @return ApiResponse&lt;MeasurementJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasurementJob> getMeasurementJobWithHttpInfo(String jobUuid) throws ApiException {
        okhttp3.Call localVarCall = getMeasurementJobValidateBeforeCall(jobUuid, null);
        Type localVarReturnType = new TypeToken<MeasurementJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Measurement Job (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/jobs/{job_uuid}&#x60; を使用してください） ジョブを取得します。
     * @param jobUuid ジョブのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMeasurementJobAsync(String jobUuid, final ApiCallback<MeasurementJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeasurementJobValidateBeforeCall(jobUuid, _callback);
        Type localVarReturnType = new TypeToken<MeasurementJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectMeasurementJob
     * @param projectUuid プロジェクトのUUID (required)
     * @param jobUuid ジョブのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMeasurementJobCall(String projectUuid, String jobUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/jobs/{job_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "job_uuid" + "}", localVarApiClient.escapeString(jobUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectMeasurementJobValidateBeforeCall(String projectUuid, String jobUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling getProjectMeasurementJob(Async)");
        }

        // verify the required parameter 'jobUuid' is set
        if (jobUuid == null) {
            throw new ApiException("Missing the required parameter 'jobUuid' when calling getProjectMeasurementJob(Async)");
        }

        return getProjectMeasurementJobCall(projectUuid, jobUuid, _callback);

    }

    /**
     * Get Project Measurement Job
     * ジョブを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param jobUuid ジョブのUUID (required)
     * @return MeasurementJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MeasurementJob getProjectMeasurementJob(String projectUuid, String jobUuid) throws ApiException {
        ApiResponse<MeasurementJob> localVarResp = getProjectMeasurementJobWithHttpInfo(projectUuid, jobUuid);
        return localVarResp.getData();
    }

    /**
     * Get Project Measurement Job
     * ジョブを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param jobUuid ジョブのUUID (required)
     * @return ApiResponse&lt;MeasurementJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeasurementJob> getProjectMeasurementJobWithHttpInfo(String projectUuid, String jobUuid) throws ApiException {
        okhttp3.Call localVarCall = getProjectMeasurementJobValidateBeforeCall(projectUuid, jobUuid, null);
        Type localVarReturnType = new TypeToken<MeasurementJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Project Measurement Job (asynchronously)
     * ジョブを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param jobUuid ジョブのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMeasurementJobAsync(String projectUuid, String jobUuid, final ApiCallback<MeasurementJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectMeasurementJobValidateBeforeCall(projectUuid, jobUuid, _callback);
        Type localVarReturnType = new TypeToken<MeasurementJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMeasurementJobs
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param status ジョブのステータス (optional)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listMeasurementJobsCall(Integer limit, String sort, String status, Integer page, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMeasurementJobsValidateBeforeCall(Integer limit, String sort, String status, Integer page, String order, final ApiCallback _callback) throws ApiException {
        return listMeasurementJobsCall(limit, sort, status, page, order, _callback);

    }

    /**
     * List Measurement Jobs
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/jobs&#x60; を使用してください）  ジョブ（CSVファイルを計測に変換するジョブなど）のリストを取得します。
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param status ジョブのステータス (optional)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @return MeasurementJobs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasurementJobs listMeasurementJobs(Integer limit, String sort, String status, Integer page, String order) throws ApiException {
        ApiResponse<MeasurementJobs> localVarResp = listMeasurementJobsWithHttpInfo(limit, sort, status, page, order);
        return localVarResp.getData();
    }

    /**
     * List Measurement Jobs
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/jobs&#x60; を使用してください）  ジョブ（CSVファイルを計測に変換するジョブなど）のリストを取得します。
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param status ジョブのステータス (optional)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @return ApiResponse&lt;MeasurementJobs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasurementJobs> listMeasurementJobsWithHttpInfo(Integer limit, String sort, String status, Integer page, String order) throws ApiException {
        okhttp3.Call localVarCall = listMeasurementJobsValidateBeforeCall(limit, sort, status, page, order, null);
        Type localVarReturnType = new TypeToken<MeasurementJobs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Measurement Jobs (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/jobs&#x60; を使用してください）  ジョブ（CSVファイルを計測に変換するジョブなど）のリストを取得します。
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param status ジョブのステータス (optional)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listMeasurementJobsAsync(Integer limit, String sort, String status, Integer page, String order, final ApiCallback<MeasurementJobs> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMeasurementJobsValidateBeforeCall(limit, sort, status, page, order, _callback);
        Type localVarReturnType = new TypeToken<MeasurementJobs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProjectMeasurementJobs
     * @param projectUuid プロジェクトのUUID (required)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param status ジョブのステータス (optional)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectMeasurementJobsCall(String projectUuid, Integer limit, String sort, String status, Integer page, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/jobs"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectMeasurementJobsValidateBeforeCall(String projectUuid, Integer limit, String sort, String status, Integer page, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling listProjectMeasurementJobs(Async)");
        }

        return listProjectMeasurementJobsCall(projectUuid, limit, sort, status, page, order, _callback);

    }

    /**
     * List Project Measurement Jobs
     * ジョブ（CSVファイルを計測に変換するジョブなど）のリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param status ジョブのステータス (optional)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @return MeasurementJobs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MeasurementJobs listProjectMeasurementJobs(String projectUuid, Integer limit, String sort, String status, Integer page, String order) throws ApiException {
        ApiResponse<MeasurementJobs> localVarResp = listProjectMeasurementJobsWithHttpInfo(projectUuid, limit, sort, status, page, order);
        return localVarResp.getData();
    }

    /**
     * List Project Measurement Jobs
     * ジョブ（CSVファイルを計測に変換するジョブなど）のリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param status ジョブのステータス (optional)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @return ApiResponse&lt;MeasurementJobs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeasurementJobs> listProjectMeasurementJobsWithHttpInfo(String projectUuid, Integer limit, String sort, String status, Integer page, String order) throws ApiException {
        okhttp3.Call localVarCall = listProjectMeasurementJobsValidateBeforeCall(projectUuid, limit, sort, status, page, order, null);
        Type localVarReturnType = new TypeToken<MeasurementJobs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Project Measurement Jobs (asynchronously)
     * ジョブ（CSVファイルを計測に変換するジョブなど）のリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param status ジョブのステータス (optional)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectMeasurementJobsAsync(String projectUuid, Integer limit, String sort, String status, Integer page, String order, final ApiCallback<MeasurementJobs> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectMeasurementJobsValidateBeforeCall(projectUuid, limit, sort, status, page, order, _callback);
        Type localVarReturnType = new TypeToken<MeasurementJobs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
