/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aptpod.intdash;

import com.aptpod.ApiCallback;
import com.aptpod.ApiClient;
import com.aptpod.ApiException;
import com.aptpod.ApiResponse;
import com.aptpod.Configuration;
import com.aptpod.Pair;
import com.aptpod.ProgressRequestBody;
import com.aptpod.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APITokenIntrospectionRequest;
import org.openapitools.client.model.APITokenIntrospectionResponse;
import org.openapitools.client.model.CreateEmailRequest;
import org.openapitools.client.model.CreateUserAPITokenRequest;
import org.openapitools.client.model.CreateUserRequest;
import org.openapitools.client.model.ErrorProblem;
import org.openapitools.client.model.PatchEmailRequest;
import org.openapitools.client.model.PatchUserRequest;
import org.openapitools.client.model.Role;
import org.openapitools.client.model.Roles;
import org.openapitools.client.model.UpdateEmailVerifiedRequest;
import org.openapitools.client.model.UpdateUserAPITokenRequest;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserAPIToken;
import org.openapitools.client.model.UserAPITokens;
import org.openapitools.client.model.UserEmail;
import org.openapitools.client.model.UserEmailVerification;
import org.openapitools.client.model.UserPassword;
import org.openapitools.client.model.Users;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuthUsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthUsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthUsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for assignRole
     * @param userUuid  (required)
     * @param roleUuid ロールのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not Modified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignRoleCall(String userUuid, String roleUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}/roles/{role_uuid}"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "role_uuid" + "}", localVarApiClient.escapeString(roleUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignRoleValidateBeforeCall(String userUuid, String roleUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling assignRole(Async)");
        }

        // verify the required parameter 'roleUuid' is set
        if (roleUuid == null) {
            throw new ApiException("Missing the required parameter 'roleUuid' when calling assignRole(Async)");
        }

        return assignRoleCall(userUuid, roleUuid, _callback);

    }

    /**
     * Assign Role
     * ユーザーにロールを割り当てます。
     * @param userUuid  (required)
     * @param roleUuid ロールのUUID (required)
     * @return Role
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not Modified </td><td>  -  </td></tr>
     </table>
     */
    public Role assignRole(String userUuid, String roleUuid) throws ApiException {
        ApiResponse<Role> localVarResp = assignRoleWithHttpInfo(userUuid, roleUuid);
        return localVarResp.getData();
    }

    /**
     * Assign Role
     * ユーザーにロールを割り当てます。
     * @param userUuid  (required)
     * @param roleUuid ロールのUUID (required)
     * @return ApiResponse&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not Modified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Role> assignRoleWithHttpInfo(String userUuid, String roleUuid) throws ApiException {
        okhttp3.Call localVarCall = assignRoleValidateBeforeCall(userUuid, roleUuid, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign Role (asynchronously)
     * ユーザーにロールを割り当てます。
     * @param userUuid  (required)
     * @param roleUuid ロールのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not Modified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignRoleAsync(String userUuid, String roleUuid, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignRoleValidateBeforeCall(userUuid, roleUuid, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAPIToken
     * @param userUuid  (required)
     * @param createUserAPITokenRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAPITokenCall(String userUuid, CreateUserAPITokenRequest createUserAPITokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserAPITokenRequest;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}/tokens"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAPITokenValidateBeforeCall(String userUuid, CreateUserAPITokenRequest createUserAPITokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling createAPIToken(Async)");
        }

        return createAPITokenCall(userUuid, createUserAPITokenRequest, _callback);

    }

    /**
     * Create API Token
     * ユーザーのAPIトークンを作成します。
     * @param userUuid  (required)
     * @param createUserAPITokenRequest  (optional)
     * @return UserAPIToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public UserAPIToken createAPIToken(String userUuid, CreateUserAPITokenRequest createUserAPITokenRequest) throws ApiException {
        ApiResponse<UserAPIToken> localVarResp = createAPITokenWithHttpInfo(userUuid, createUserAPITokenRequest);
        return localVarResp.getData();
    }

    /**
     * Create API Token
     * ユーザーのAPIトークンを作成します。
     * @param userUuid  (required)
     * @param createUserAPITokenRequest  (optional)
     * @return ApiResponse&lt;UserAPIToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserAPIToken> createAPITokenWithHttpInfo(String userUuid, CreateUserAPITokenRequest createUserAPITokenRequest) throws ApiException {
        okhttp3.Call localVarCall = createAPITokenValidateBeforeCall(userUuid, createUserAPITokenRequest, null);
        Type localVarReturnType = new TypeToken<UserAPIToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create API Token (asynchronously)
     * ユーザーのAPIトークンを作成します。
     * @param userUuid  (required)
     * @param createUserAPITokenRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAPITokenAsync(String userUuid, CreateUserAPITokenRequest createUserAPITokenRequest, final ApiCallback<UserAPIToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAPITokenValidateBeforeCall(userUuid, createUserAPITokenRequest, _callback);
        Type localVarReturnType = new TypeToken<UserAPIToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEmail
     * @param userUuid  (required)
     * @param createEmailRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmailCall(String userUuid, CreateEmailRequest createEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEmailRequest;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}/emails"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmailValidateBeforeCall(String userUuid, CreateEmailRequest createEmailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling createEmail(Async)");
        }

        return createEmailCall(userUuid, createEmailRequest, _callback);

    }

    /**
     * Create Email
     * ユーザーのメールアドレスを設定します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
     * @param userUuid  (required)
     * @param createEmailRequest  (optional)
     * @return UserEmail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public UserEmail createEmail(String userUuid, CreateEmailRequest createEmailRequest) throws ApiException {
        ApiResponse<UserEmail> localVarResp = createEmailWithHttpInfo(userUuid, createEmailRequest);
        return localVarResp.getData();
    }

    /**
     * Create Email
     * ユーザーのメールアドレスを設定します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
     * @param userUuid  (required)
     * @param createEmailRequest  (optional)
     * @return ApiResponse&lt;UserEmail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserEmail> createEmailWithHttpInfo(String userUuid, CreateEmailRequest createEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = createEmailValidateBeforeCall(userUuid, createEmailRequest, null);
        Type localVarReturnType = new TypeToken<UserEmail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Email (asynchronously)
     * ユーザーのメールアドレスを設定します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
     * @param userUuid  (required)
     * @param createEmailRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmailAsync(String userUuid, CreateEmailRequest createEmailRequest, final ApiCallback<UserEmail> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmailValidateBeforeCall(userUuid, createEmailRequest, _callback);
        Type localVarReturnType = new TypeToken<UserEmail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTemporaryPassword
     * @param userUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTemporaryPasswordCall(String userUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}/password"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTemporaryPasswordValidateBeforeCall(String userUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling createTemporaryPassword(Async)");
        }

        return createTemporaryPasswordCall(userUuid, _callback);

    }

    /**
     * Create Temporary Password
     * ユーザーのパスワードを、ランダムな一時パスワードに変更します。
     * @param userUuid  (required)
     * @return UserPassword
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UserPassword createTemporaryPassword(String userUuid) throws ApiException {
        ApiResponse<UserPassword> localVarResp = createTemporaryPasswordWithHttpInfo(userUuid);
        return localVarResp.getData();
    }

    /**
     * Create Temporary Password
     * ユーザーのパスワードを、ランダムな一時パスワードに変更します。
     * @param userUuid  (required)
     * @return ApiResponse&lt;UserPassword&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserPassword> createTemporaryPasswordWithHttpInfo(String userUuid) throws ApiException {
        okhttp3.Call localVarCall = createTemporaryPasswordValidateBeforeCall(userUuid, null);
        Type localVarReturnType = new TypeToken<UserPassword>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Temporary Password (asynchronously)
     * ユーザーのパスワードを、ランダムな一時パスワードに変更します。
     * @param userUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTemporaryPasswordAsync(String userUuid, final ApiCallback<UserPassword> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTemporaryPasswordValidateBeforeCall(userUuid, _callback);
        Type localVarReturnType = new TypeToken<UserPassword>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUser
     * @param createUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserCall(CreateUserRequest createUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserRequest;

        // create path and map variables
        String localVarPath = "/auth/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserValidateBeforeCall(CreateUserRequest createUserRequest, final ApiCallback _callback) throws ApiException {
        return createUserCall(createUserRequest, _callback);

    }

    /**
     * Create User
     * ユーザーを作成します。新しいユーザーには自動生成された一時パスワードが設定されます。 ユーザー作成のリクエストにメールアドレス（ &#x60;email&#x60; ）が含まれていた場合は、 そのメールアドレスに確認メールが送信されます。
     * @param createUserRequest  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public User createUser(CreateUserRequest createUserRequest) throws ApiException {
        ApiResponse<User> localVarResp = createUserWithHttpInfo(createUserRequest);
        return localVarResp.getData();
    }

    /**
     * Create User
     * ユーザーを作成します。新しいユーザーには自動生成された一時パスワードが設定されます。 ユーザー作成のリクエストにメールアドレス（ &#x60;email&#x60; ）が含まれていた場合は、 そのメールアドレスに確認メールが送信されます。
     * @param createUserRequest  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> createUserWithHttpInfo(CreateUserRequest createUserRequest) throws ApiException {
        okhttp3.Call localVarCall = createUserValidateBeforeCall(createUserRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create User (asynchronously)
     * ユーザーを作成します。新しいユーザーには自動生成された一時パスワードが設定されます。 ユーザー作成のリクエストにメールアドレス（ &#x60;email&#x60; ）が含まれていた場合は、 そのメールアドレスに確認メールが送信されます。
     * @param createUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserAsync(CreateUserRequest createUserRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserValidateBeforeCall(createUserRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAPIToken
     * @param userUuid  (required)
     * @param userApiTokenId APIトークンのID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAPITokenCall(String userUuid, Long userApiTokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}/tokens/{user_api_token_id}"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "user_api_token_id" + "}", localVarApiClient.escapeString(userApiTokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAPITokenValidateBeforeCall(String userUuid, Long userApiTokenId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling deleteAPIToken(Async)");
        }

        // verify the required parameter 'userApiTokenId' is set
        if (userApiTokenId == null) {
            throw new ApiException("Missing the required parameter 'userApiTokenId' when calling deleteAPIToken(Async)");
        }

        return deleteAPITokenCall(userUuid, userApiTokenId, _callback);

    }

    /**
     * Delete API Token
     * ユーザーのAPIトークンを削除します。
     * @param userUuid  (required)
     * @param userApiTokenId APIトークンのID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAPIToken(String userUuid, Long userApiTokenId) throws ApiException {
        deleteAPITokenWithHttpInfo(userUuid, userApiTokenId);
    }

    /**
     * Delete API Token
     * ユーザーのAPIトークンを削除します。
     * @param userUuid  (required)
     * @param userApiTokenId APIトークンのID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAPITokenWithHttpInfo(String userUuid, Long userApiTokenId) throws ApiException {
        okhttp3.Call localVarCall = deleteAPITokenValidateBeforeCall(userUuid, userApiTokenId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete API Token (asynchronously)
     * ユーザーのAPIトークンを削除します。
     * @param userUuid  (required)
     * @param userApiTokenId APIトークンのID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAPITokenAsync(String userUuid, Long userApiTokenId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAPITokenValidateBeforeCall(userUuid, userApiTokenId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEmail
     * @param userUuid  (required)
     * @param userEmailId ユーザーのメールアドレスのID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEmailCall(String userUuid, Long userEmailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}/emails/{user_email_id}"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "user_email_id" + "}", localVarApiClient.escapeString(userEmailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEmailValidateBeforeCall(String userUuid, Long userEmailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling deleteEmail(Async)");
        }

        // verify the required parameter 'userEmailId' is set
        if (userEmailId == null) {
            throw new ApiException("Missing the required parameter 'userEmailId' when calling deleteEmail(Async)");
        }

        return deleteEmailCall(userUuid, userEmailId, _callback);

    }

    /**
     * Delete Email
     * ユーザーのメールアドレスを削除します。
     * @param userUuid  (required)
     * @param userEmailId ユーザーのメールアドレスのID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteEmail(String userUuid, Long userEmailId) throws ApiException {
        deleteEmailWithHttpInfo(userUuid, userEmailId);
    }

    /**
     * Delete Email
     * ユーザーのメールアドレスを削除します。
     * @param userUuid  (required)
     * @param userEmailId ユーザーのメールアドレスのID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteEmailWithHttpInfo(String userUuid, Long userEmailId) throws ApiException {
        okhttp3.Call localVarCall = deleteEmailValidateBeforeCall(userUuid, userEmailId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Email (asynchronously)
     * ユーザーのメールアドレスを削除します。
     * @param userUuid  (required)
     * @param userEmailId ユーザーのメールアドレスのID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEmailAsync(String userUuid, Long userEmailId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEmailValidateBeforeCall(userUuid, userEmailId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUser
     * @param userUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserCall(String userUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(String userUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling deleteUser(Async)");
        }

        return deleteUserCall(userUuid, _callback);

    }

    /**
     * Delete User
     * ユーザーを削除します。
     * @param userUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUser(String userUuid) throws ApiException {
        deleteUserWithHttpInfo(userUuid);
    }

    /**
     * Delete User
     * ユーザーを削除します。
     * @param userUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserWithHttpInfo(String userUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(userUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete User (asynchronously)
     * ユーザーを削除します。
     * @param userUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAsync(String userUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(userUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableUser
     * @param userUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableUserCall(String userUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}/disable"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableUserValidateBeforeCall(String userUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling disableUser(Async)");
        }

        return disableUserCall(userUuid, _callback);

    }

    /**
     * Disable User
     * ユーザーを無効化します。
     * @param userUuid  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public User disableUser(String userUuid) throws ApiException {
        ApiResponse<User> localVarResp = disableUserWithHttpInfo(userUuid);
        return localVarResp.getData();
    }

    /**
     * Disable User
     * ユーザーを無効化します。
     * @param userUuid  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> disableUserWithHttpInfo(String userUuid) throws ApiException {
        okhttp3.Call localVarCall = disableUserValidateBeforeCall(userUuid, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable User (asynchronously)
     * ユーザーを無効化します。
     * @param userUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableUserAsync(String userUuid, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableUserValidateBeforeCall(userUuid, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableUser
     * @param userUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableUserCall(String userUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}/enable"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableUserValidateBeforeCall(String userUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling enableUser(Async)");
        }

        return enableUserCall(userUuid, _callback);

    }

    /**
     * Enable User
     * ユーザーを有効化します。
     * @param userUuid  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public User enableUser(String userUuid) throws ApiException {
        ApiResponse<User> localVarResp = enableUserWithHttpInfo(userUuid);
        return localVarResp.getData();
    }

    /**
     * Enable User
     * ユーザーを有効化します。
     * @param userUuid  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> enableUserWithHttpInfo(String userUuid) throws ApiException {
        okhttp3.Call localVarCall = enableUserValidateBeforeCall(userUuid, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable User (asynchronously)
     * ユーザーを有効化します。
     * @param userUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableUserAsync(String userUuid, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableUserValidateBeforeCall(userUuid, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param userUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(String userUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(String userUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling getUser(Async)");
        }

        return getUserCall(userUuid, _callback);

    }

    /**
     * Get User
     * ユーザーを取得します。
     * @param userUuid  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public User getUser(String userUuid) throws ApiException {
        ApiResponse<User> localVarResp = getUserWithHttpInfo(userUuid);
        return localVarResp.getData();
    }

    /**
     * Get User
     * ユーザーを取得します。
     * @param userUuid  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getUserWithHttpInfo(String userUuid) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(userUuid, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User (asynchronously)
     * ユーザーを取得します。
     * @param userUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(String userUuid, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(userUuid, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for introspectAPIToken
     * @param apITokenIntrospectionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call introspectAPITokenCall(APITokenIntrospectionRequest apITokenIntrospectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apITokenIntrospectionRequest;

        // create path and map variables
        String localVarPath = "/auth/users/tokens/introspection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json; charset=utf-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call introspectAPITokenValidateBeforeCall(APITokenIntrospectionRequest apITokenIntrospectionRequest, final ApiCallback _callback) throws ApiException {
        return introspectAPITokenCall(apITokenIntrospectionRequest, _callback);

    }

    /**
     * Introspect API Token
     * APIトークンの検証を行います。
     * @param apITokenIntrospectionRequest  (optional)
     * @return APITokenIntrospectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APITokenIntrospectionResponse introspectAPIToken(APITokenIntrospectionRequest apITokenIntrospectionRequest) throws ApiException {
        ApiResponse<APITokenIntrospectionResponse> localVarResp = introspectAPITokenWithHttpInfo(apITokenIntrospectionRequest);
        return localVarResp.getData();
    }

    /**
     * Introspect API Token
     * APIトークンの検証を行います。
     * @param apITokenIntrospectionRequest  (optional)
     * @return ApiResponse&lt;APITokenIntrospectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APITokenIntrospectionResponse> introspectAPITokenWithHttpInfo(APITokenIntrospectionRequest apITokenIntrospectionRequest) throws ApiException {
        okhttp3.Call localVarCall = introspectAPITokenValidateBeforeCall(apITokenIntrospectionRequest, null);
        Type localVarReturnType = new TypeToken<APITokenIntrospectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Introspect API Token (asynchronously)
     * APIトークンの検証を行います。
     * @param apITokenIntrospectionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call introspectAPITokenAsync(APITokenIntrospectionRequest apITokenIntrospectionRequest, final ApiCallback<APITokenIntrospectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = introspectAPITokenValidateBeforeCall(apITokenIntrospectionRequest, _callback);
        Type localVarReturnType = new TypeToken<APITokenIntrospectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAPITokens
     * @param userUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAPITokensCall(String userUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}/tokens"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAPITokensValidateBeforeCall(String userUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling listAPITokens(Async)");
        }

        return listAPITokensCall(userUuid, _callback);

    }

    /**
     * List API Tokens
     * ユーザーのAPIトークンのリストを取得します。
     * @param userUuid  (required)
     * @return UserAPITokens
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UserAPITokens listAPITokens(String userUuid) throws ApiException {
        ApiResponse<UserAPITokens> localVarResp = listAPITokensWithHttpInfo(userUuid);
        return localVarResp.getData();
    }

    /**
     * List API Tokens
     * ユーザーのAPIトークンのリストを取得します。
     * @param userUuid  (required)
     * @return ApiResponse&lt;UserAPITokens&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserAPITokens> listAPITokensWithHttpInfo(String userUuid) throws ApiException {
        okhttp3.Call localVarCall = listAPITokensValidateBeforeCall(userUuid, null);
        Type localVarReturnType = new TypeToken<UserAPITokens>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List API Tokens (asynchronously)
     * ユーザーのAPIトークンのリストを取得します。
     * @param userUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAPITokensAsync(String userUuid, final ApiCallback<UserAPITokens> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAPITokensValidateBeforeCall(userUuid, _callback);
        Type localVarReturnType = new TypeToken<UserAPITokens>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUsers
     * @param uuid ユーザーのUUID (optional)
     * @param roleUuid ロールのUUID (optional)
     * @param name ユーザーの名前による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     * @param nickname ユーザーの表示名による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     * @param email メールアドレスによる部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     * @param disabled * &#x60;true&#x60; を指定した場合、無効化されているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、有効なユーザーのみを取得します。 * 指定を省略した場合、有効／無効にかかわらずユーザーを取得します。 (optional)
     * @param isSuper * &#x60;true&#x60; を指定した場合、スーパーユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、スーパーユーザー以外を取得します。 * 指定を省略した場合、スーパーユーザーであるかにかかわらずユーザーを取得します。 (optional)
     * @param isTemporary * &#x60;true&#x60; を指定した場合、一時パスワードを使用しているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、パスワードを設定済みのユーザーのみを取得します。 * 指定を省略した場合、一時パスワードを使用しているかにかかわらずユーザーを取得します。 (optional)
     * @param minSignInAttemptCount ログイン失敗回数の最小値。ログイン失敗回数がこの数値以上のユーザーを取得します。 (optional)
     * @param maxSignInAttemptCount ログイン失敗回数の最大値。ログイン失敗回数がこの数値以下のユーザーを取得します。 (optional)
     * @param sort 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at   - last_sign_in_at (optional, default to name+)
     * @param page 取得するページの番号 (optional, default to 1)
     * @param perPage 1回のリクエストで取得する件数 (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsersCall(List<String> uuid, List<String> roleUuid, List<String> name, List<String> nickname, List<String> email, Boolean disabled, Boolean isSuper, Boolean isTemporary, Integer minSignInAttemptCount, Integer maxSignInAttemptCount, String sort, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "uuid", uuid));
        }

        if (roleUuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "role_uuid", roleUuid));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (nickname != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "nickname", nickname));
        }

        if (email != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "email", email));
        }

        if (disabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disabled", disabled));
        }

        if (isSuper != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_super", isSuper));
        }

        if (isTemporary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_temporary", isTemporary));
        }

        if (minSignInAttemptCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_sign_in_attempt_count", minSignInAttemptCount));
        }

        if (maxSignInAttemptCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_sign_in_attempt_count", maxSignInAttemptCount));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUsersValidateBeforeCall(List<String> uuid, List<String> roleUuid, List<String> name, List<String> nickname, List<String> email, Boolean disabled, Boolean isSuper, Boolean isTemporary, Integer minSignInAttemptCount, Integer maxSignInAttemptCount, String sort, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return listUsersCall(uuid, roleUuid, name, nickname, email, disabled, isSuper, isTemporary, minSignInAttemptCount, maxSignInAttemptCount, sort, page, perPage, _callback);

    }

    /**
     * List Users
     * ユーザーのリストを取得します。
     * @param uuid ユーザーのUUID (optional)
     * @param roleUuid ロールのUUID (optional)
     * @param name ユーザーの名前による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     * @param nickname ユーザーの表示名による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     * @param email メールアドレスによる部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     * @param disabled * &#x60;true&#x60; を指定した場合、無効化されているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、有効なユーザーのみを取得します。 * 指定を省略した場合、有効／無効にかかわらずユーザーを取得します。 (optional)
     * @param isSuper * &#x60;true&#x60; を指定した場合、スーパーユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、スーパーユーザー以外を取得します。 * 指定を省略した場合、スーパーユーザーであるかにかかわらずユーザーを取得します。 (optional)
     * @param isTemporary * &#x60;true&#x60; を指定した場合、一時パスワードを使用しているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、パスワードを設定済みのユーザーのみを取得します。 * 指定を省略した場合、一時パスワードを使用しているかにかかわらずユーザーを取得します。 (optional)
     * @param minSignInAttemptCount ログイン失敗回数の最小値。ログイン失敗回数がこの数値以上のユーザーを取得します。 (optional)
     * @param maxSignInAttemptCount ログイン失敗回数の最大値。ログイン失敗回数がこの数値以下のユーザーを取得します。 (optional)
     * @param sort 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at   - last_sign_in_at (optional, default to name+)
     * @param page 取得するページの番号 (optional, default to 1)
     * @param perPage 1回のリクエストで取得する件数 (optional, default to 30)
     * @return Users
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Users listUsers(List<String> uuid, List<String> roleUuid, List<String> name, List<String> nickname, List<String> email, Boolean disabled, Boolean isSuper, Boolean isTemporary, Integer minSignInAttemptCount, Integer maxSignInAttemptCount, String sort, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Users> localVarResp = listUsersWithHttpInfo(uuid, roleUuid, name, nickname, email, disabled, isSuper, isTemporary, minSignInAttemptCount, maxSignInAttemptCount, sort, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List Users
     * ユーザーのリストを取得します。
     * @param uuid ユーザーのUUID (optional)
     * @param roleUuid ロールのUUID (optional)
     * @param name ユーザーの名前による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     * @param nickname ユーザーの表示名による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     * @param email メールアドレスによる部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     * @param disabled * &#x60;true&#x60; を指定した場合、無効化されているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、有効なユーザーのみを取得します。 * 指定を省略した場合、有効／無効にかかわらずユーザーを取得します。 (optional)
     * @param isSuper * &#x60;true&#x60; を指定した場合、スーパーユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、スーパーユーザー以外を取得します。 * 指定を省略した場合、スーパーユーザーであるかにかかわらずユーザーを取得します。 (optional)
     * @param isTemporary * &#x60;true&#x60; を指定した場合、一時パスワードを使用しているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、パスワードを設定済みのユーザーのみを取得します。 * 指定を省略した場合、一時パスワードを使用しているかにかかわらずユーザーを取得します。 (optional)
     * @param minSignInAttemptCount ログイン失敗回数の最小値。ログイン失敗回数がこの数値以上のユーザーを取得します。 (optional)
     * @param maxSignInAttemptCount ログイン失敗回数の最大値。ログイン失敗回数がこの数値以下のユーザーを取得します。 (optional)
     * @param sort 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at   - last_sign_in_at (optional, default to name+)
     * @param page 取得するページの番号 (optional, default to 1)
     * @param perPage 1回のリクエストで取得する件数 (optional, default to 30)
     * @return ApiResponse&lt;Users&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Users> listUsersWithHttpInfo(List<String> uuid, List<String> roleUuid, List<String> name, List<String> nickname, List<String> email, Boolean disabled, Boolean isSuper, Boolean isTemporary, Integer minSignInAttemptCount, Integer maxSignInAttemptCount, String sort, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listUsersValidateBeforeCall(uuid, roleUuid, name, nickname, email, disabled, isSuper, isTemporary, minSignInAttemptCount, maxSignInAttemptCount, sort, page, perPage, null);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Users (asynchronously)
     * ユーザーのリストを取得します。
     * @param uuid ユーザーのUUID (optional)
     * @param roleUuid ロールのUUID (optional)
     * @param name ユーザーの名前による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     * @param nickname ユーザーの表示名による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     * @param email メールアドレスによる部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     * @param disabled * &#x60;true&#x60; を指定した場合、無効化されているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、有効なユーザーのみを取得します。 * 指定を省略した場合、有効／無効にかかわらずユーザーを取得します。 (optional)
     * @param isSuper * &#x60;true&#x60; を指定した場合、スーパーユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、スーパーユーザー以外を取得します。 * 指定を省略した場合、スーパーユーザーであるかにかかわらずユーザーを取得します。 (optional)
     * @param isTemporary * &#x60;true&#x60; を指定した場合、一時パスワードを使用しているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、パスワードを設定済みのユーザーのみを取得します。 * 指定を省略した場合、一時パスワードを使用しているかにかかわらずユーザーを取得します。 (optional)
     * @param minSignInAttemptCount ログイン失敗回数の最小値。ログイン失敗回数がこの数値以上のユーザーを取得します。 (optional)
     * @param maxSignInAttemptCount ログイン失敗回数の最大値。ログイン失敗回数がこの数値以下のユーザーを取得します。 (optional)
     * @param sort 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at   - last_sign_in_at (optional, default to name+)
     * @param page 取得するページの番号 (optional, default to 1)
     * @param perPage 1回のリクエストで取得する件数 (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsersAsync(List<String> uuid, List<String> roleUuid, List<String> name, List<String> nickname, List<String> email, Boolean disabled, Boolean isSuper, Boolean isTemporary, Integer minSignInAttemptCount, Integer maxSignInAttemptCount, String sort, Integer page, Integer perPage, final ApiCallback<Users> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUsersValidateBeforeCall(uuid, roleUuid, name, nickname, email, disabled, isSuper, isTemporary, minSignInAttemptCount, maxSignInAttemptCount, sort, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUsersRoles
     * @param userUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsersRolesCall(String userUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}/roles"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUsersRolesValidateBeforeCall(String userUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling listUsersRoles(Async)");
        }

        return listUsersRolesCall(userUuid, _callback);

    }

    /**
     * List User&#39;s Roles
     * ユーザーのロールのリストを取得します。
     * @param userUuid  (required)
     * @return Roles
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Roles listUsersRoles(String userUuid) throws ApiException {
        ApiResponse<Roles> localVarResp = listUsersRolesWithHttpInfo(userUuid);
        return localVarResp.getData();
    }

    /**
     * List User&#39;s Roles
     * ユーザーのロールのリストを取得します。
     * @param userUuid  (required)
     * @return ApiResponse&lt;Roles&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Roles> listUsersRolesWithHttpInfo(String userUuid) throws ApiException {
        okhttp3.Call localVarCall = listUsersRolesValidateBeforeCall(userUuid, null);
        Type localVarReturnType = new TypeToken<Roles>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List User&#39;s Roles (asynchronously)
     * ユーザーのロールのリストを取得します。
     * @param userUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsersRolesAsync(String userUuid, final ApiCallback<Roles> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUsersRolesValidateBeforeCall(userUuid, _callback);
        Type localVarReturnType = new TypeToken<Roles>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendVerificationEmail
     * @param userUuid  (required)
     * @param userEmailId ユーザーのメールアドレスのID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendVerificationEmailCall(String userUuid, Long userEmailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}/emails/{user_email_id}/verification"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "user_email_id" + "}", localVarApiClient.escapeString(userEmailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendVerificationEmailValidateBeforeCall(String userUuid, Long userEmailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling sendVerificationEmail(Async)");
        }

        // verify the required parameter 'userEmailId' is set
        if (userEmailId == null) {
            throw new ApiException("Missing the required parameter 'userEmailId' when calling sendVerificationEmail(Async)");
        }

        return sendVerificationEmailCall(userUuid, userEmailId, _callback);

    }

    /**
     * Send Verification Email
     * メールアドレスを確認するため確認メールを送信します。メールアドレス確認用トークンを使用します。
     * @param userUuid  (required)
     * @param userEmailId ユーザーのメールアドレスのID (required)
     * @return UserEmailVerification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UserEmailVerification sendVerificationEmail(String userUuid, Long userEmailId) throws ApiException {
        ApiResponse<UserEmailVerification> localVarResp = sendVerificationEmailWithHttpInfo(userUuid, userEmailId);
        return localVarResp.getData();
    }

    /**
     * Send Verification Email
     * メールアドレスを確認するため確認メールを送信します。メールアドレス確認用トークンを使用します。
     * @param userUuid  (required)
     * @param userEmailId ユーザーのメールアドレスのID (required)
     * @return ApiResponse&lt;UserEmailVerification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserEmailVerification> sendVerificationEmailWithHttpInfo(String userUuid, Long userEmailId) throws ApiException {
        okhttp3.Call localVarCall = sendVerificationEmailValidateBeforeCall(userUuid, userEmailId, null);
        Type localVarReturnType = new TypeToken<UserEmailVerification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send Verification Email (asynchronously)
     * メールアドレスを確認するため確認メールを送信します。メールアドレス確認用トークンを使用します。
     * @param userUuid  (required)
     * @param userEmailId ユーザーのメールアドレスのID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendVerificationEmailAsync(String userUuid, Long userEmailId, final ApiCallback<UserEmailVerification> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendVerificationEmailValidateBeforeCall(userUuid, userEmailId, _callback);
        Type localVarReturnType = new TypeToken<UserEmailVerification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unassignRole
     * @param userUuid  (required)
     * @param roleUuid ロールのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unassignRoleCall(String userUuid, String roleUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}/roles/{role_uuid}"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "role_uuid" + "}", localVarApiClient.escapeString(roleUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unassignRoleValidateBeforeCall(String userUuid, String roleUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling unassignRole(Async)");
        }

        // verify the required parameter 'roleUuid' is set
        if (roleUuid == null) {
            throw new ApiException("Missing the required parameter 'roleUuid' when calling unassignRole(Async)");
        }

        return unassignRoleCall(userUuid, roleUuid, _callback);

    }

    /**
     * Unassign Role
     * ユーザーへのロールの割り当てを解除します。
     * @param userUuid  (required)
     * @param roleUuid ロールのUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void unassignRole(String userUuid, String roleUuid) throws ApiException {
        unassignRoleWithHttpInfo(userUuid, roleUuid);
    }

    /**
     * Unassign Role
     * ユーザーへのロールの割り当てを解除します。
     * @param userUuid  (required)
     * @param roleUuid ロールのUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unassignRoleWithHttpInfo(String userUuid, String roleUuid) throws ApiException {
        okhttp3.Call localVarCall = unassignRoleValidateBeforeCall(userUuid, roleUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unassign Role (asynchronously)
     * ユーザーへのロールの割り当てを解除します。
     * @param userUuid  (required)
     * @param roleUuid ロールのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unassignRoleAsync(String userUuid, String roleUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unassignRoleValidateBeforeCall(userUuid, roleUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for unlockPassword
     * @param userUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlockPasswordCall(String userUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}/password/unlock"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlockPasswordValidateBeforeCall(String userUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling unlockPassword(Async)");
        }

        return unlockPasswordCall(userUuid, _callback);

    }

    /**
     * Unlock Password
     * ユーザーのパスワードのロックを解除します。このユーザーのログイン失敗回数は0にリセットされます。
     * @param userUuid  (required)
     * @return UserPassword
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UserPassword unlockPassword(String userUuid) throws ApiException {
        ApiResponse<UserPassword> localVarResp = unlockPasswordWithHttpInfo(userUuid);
        return localVarResp.getData();
    }

    /**
     * Unlock Password
     * ユーザーのパスワードのロックを解除します。このユーザーのログイン失敗回数は0にリセットされます。
     * @param userUuid  (required)
     * @return ApiResponse&lt;UserPassword&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserPassword> unlockPasswordWithHttpInfo(String userUuid) throws ApiException {
        okhttp3.Call localVarCall = unlockPasswordValidateBeforeCall(userUuid, null);
        Type localVarReturnType = new TypeToken<UserPassword>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unlock Password (asynchronously)
     * ユーザーのパスワードのロックを解除します。このユーザーのログイン失敗回数は0にリセットされます。
     * @param userUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlockPasswordAsync(String userUuid, final ApiCallback<UserPassword> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlockPasswordValidateBeforeCall(userUuid, _callback);
        Type localVarReturnType = new TypeToken<UserPassword>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAPIToken
     * @param userUuid  (required)
     * @param userApiTokenId APIトークンのID (required)
     * @param updateUserAPITokenRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAPITokenCall(String userUuid, Long userApiTokenId, UpdateUserAPITokenRequest updateUserAPITokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUserAPITokenRequest;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}/tokens/{user_api_token_id}"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "user_api_token_id" + "}", localVarApiClient.escapeString(userApiTokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json; charset=utf-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAPITokenValidateBeforeCall(String userUuid, Long userApiTokenId, UpdateUserAPITokenRequest updateUserAPITokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling updateAPIToken(Async)");
        }

        // verify the required parameter 'userApiTokenId' is set
        if (userApiTokenId == null) {
            throw new ApiException("Missing the required parameter 'userApiTokenId' when calling updateAPIToken(Async)");
        }

        return updateAPITokenCall(userUuid, userApiTokenId, updateUserAPITokenRequest, _callback);

    }

    /**
     * Update API Token
     * ユーザーのAPIトークンを更新します。
     * @param userUuid  (required)
     * @param userApiTokenId APIトークンのID (required)
     * @param updateUserAPITokenRequest  (optional)
     * @return UserAPIToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UserAPIToken updateAPIToken(String userUuid, Long userApiTokenId, UpdateUserAPITokenRequest updateUserAPITokenRequest) throws ApiException {
        ApiResponse<UserAPIToken> localVarResp = updateAPITokenWithHttpInfo(userUuid, userApiTokenId, updateUserAPITokenRequest);
        return localVarResp.getData();
    }

    /**
     * Update API Token
     * ユーザーのAPIトークンを更新します。
     * @param userUuid  (required)
     * @param userApiTokenId APIトークンのID (required)
     * @param updateUserAPITokenRequest  (optional)
     * @return ApiResponse&lt;UserAPIToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserAPIToken> updateAPITokenWithHttpInfo(String userUuid, Long userApiTokenId, UpdateUserAPITokenRequest updateUserAPITokenRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAPITokenValidateBeforeCall(userUuid, userApiTokenId, updateUserAPITokenRequest, null);
        Type localVarReturnType = new TypeToken<UserAPIToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update API Token (asynchronously)
     * ユーザーのAPIトークンを更新します。
     * @param userUuid  (required)
     * @param userApiTokenId APIトークンのID (required)
     * @param updateUserAPITokenRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAPITokenAsync(String userUuid, Long userApiTokenId, UpdateUserAPITokenRequest updateUserAPITokenRequest, final ApiCallback<UserAPIToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAPITokenValidateBeforeCall(userUuid, userApiTokenId, updateUserAPITokenRequest, _callback);
        Type localVarReturnType = new TypeToken<UserAPIToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEmail
     * @param userUuid  (required)
     * @param userEmailId ユーザーのメールアドレスのID (required)
     * @param patchEmailRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEmailCall(String userUuid, Long userEmailId, PatchEmailRequest patchEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchEmailRequest;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}/emails/{user_email_id}"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "user_email_id" + "}", localVarApiClient.escapeString(userEmailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmailValidateBeforeCall(String userUuid, Long userEmailId, PatchEmailRequest patchEmailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling updateEmail(Async)");
        }

        // verify the required parameter 'userEmailId' is set
        if (userEmailId == null) {
            throw new ApiException("Missing the required parameter 'userEmailId' when calling updateEmail(Async)");
        }

        return updateEmailCall(userUuid, userEmailId, patchEmailRequest, _callback);

    }

    /**
     * Update Email
     * ユーザーのメールアドレスを更新します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
     * @param userUuid  (required)
     * @param userEmailId ユーザーのメールアドレスのID (required)
     * @param patchEmailRequest  (optional)
     * @return UserEmail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public UserEmail updateEmail(String userUuid, Long userEmailId, PatchEmailRequest patchEmailRequest) throws ApiException {
        ApiResponse<UserEmail> localVarResp = updateEmailWithHttpInfo(userUuid, userEmailId, patchEmailRequest);
        return localVarResp.getData();
    }

    /**
     * Update Email
     * ユーザーのメールアドレスを更新します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
     * @param userUuid  (required)
     * @param userEmailId ユーザーのメールアドレスのID (required)
     * @param patchEmailRequest  (optional)
     * @return ApiResponse&lt;UserEmail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserEmail> updateEmailWithHttpInfo(String userUuid, Long userEmailId, PatchEmailRequest patchEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEmailValidateBeforeCall(userUuid, userEmailId, patchEmailRequest, null);
        Type localVarReturnType = new TypeToken<UserEmail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Email (asynchronously)
     * ユーザーのメールアドレスを更新します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
     * @param userUuid  (required)
     * @param userEmailId ユーザーのメールアドレスのID (required)
     * @param patchEmailRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEmailAsync(String userUuid, Long userEmailId, PatchEmailRequest patchEmailRequest, final ApiCallback<UserEmail> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmailValidateBeforeCall(userUuid, userEmailId, patchEmailRequest, _callback);
        Type localVarReturnType = new TypeToken<UserEmail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateToVerified
     * @param userUuid  (required)
     * @param userEmailId ユーザーのメールアドレスのID (required)
     * @param updateEmailVerifiedRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateToVerifiedCall(String userUuid, Long userEmailId, UpdateEmailVerifiedRequest updateEmailVerifiedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateEmailVerifiedRequest;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}/emails/{user_email_id}/verified"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "user_email_id" + "}", localVarApiClient.escapeString(userEmailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateToVerifiedValidateBeforeCall(String userUuid, Long userEmailId, UpdateEmailVerifiedRequest updateEmailVerifiedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling updateToVerified(Async)");
        }

        // verify the required parameter 'userEmailId' is set
        if (userEmailId == null) {
            throw new ApiException("Missing the required parameter 'userEmailId' when calling updateToVerified(Async)");
        }

        return updateToVerifiedCall(userUuid, userEmailId, updateEmailVerifiedRequest, _callback);

    }

    /**
     * Set Email as Verified
     * ユーザーのメールアドレスを確認済みにします。
     * @param userUuid  (required)
     * @param userEmailId ユーザーのメールアドレスのID (required)
     * @param updateEmailVerifiedRequest  (optional)
     * @return UserEmail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UserEmail updateToVerified(String userUuid, Long userEmailId, UpdateEmailVerifiedRequest updateEmailVerifiedRequest) throws ApiException {
        ApiResponse<UserEmail> localVarResp = updateToVerifiedWithHttpInfo(userUuid, userEmailId, updateEmailVerifiedRequest);
        return localVarResp.getData();
    }

    /**
     * Set Email as Verified
     * ユーザーのメールアドレスを確認済みにします。
     * @param userUuid  (required)
     * @param userEmailId ユーザーのメールアドレスのID (required)
     * @param updateEmailVerifiedRequest  (optional)
     * @return ApiResponse&lt;UserEmail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserEmail> updateToVerifiedWithHttpInfo(String userUuid, Long userEmailId, UpdateEmailVerifiedRequest updateEmailVerifiedRequest) throws ApiException {
        okhttp3.Call localVarCall = updateToVerifiedValidateBeforeCall(userUuid, userEmailId, updateEmailVerifiedRequest, null);
        Type localVarReturnType = new TypeToken<UserEmail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set Email as Verified (asynchronously)
     * ユーザーのメールアドレスを確認済みにします。
     * @param userUuid  (required)
     * @param userEmailId ユーザーのメールアドレスのID (required)
     * @param updateEmailVerifiedRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateToVerifiedAsync(String userUuid, Long userEmailId, UpdateEmailVerifiedRequest updateEmailVerifiedRequest, final ApiCallback<UserEmail> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateToVerifiedValidateBeforeCall(userUuid, userEmailId, updateEmailVerifiedRequest, _callback);
        Type localVarReturnType = new TypeToken<UserEmail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser
     * @param userUuid  (required)
     * @param patchUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(String userUuid, PatchUserRequest patchUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchUserRequest;

        // create path and map variables
        String localVarPath = "/auth/users/{user_uuid}"
            .replace("{" + "user_uuid" + "}", localVarApiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(String userUuid, PatchUserRequest patchUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling updateUser(Async)");
        }

        return updateUserCall(userUuid, patchUserRequest, _callback);

    }

    /**
     * Update User
     * ユーザーを更新します。
     * @param userUuid  (required)
     * @param patchUserRequest  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public User updateUser(String userUuid, PatchUserRequest patchUserRequest) throws ApiException {
        ApiResponse<User> localVarResp = updateUserWithHttpInfo(userUuid, patchUserRequest);
        return localVarResp.getData();
    }

    /**
     * Update User
     * ユーザーを更新します。
     * @param userUuid  (required)
     * @param patchUserRequest  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> updateUserWithHttpInfo(String userUuid, PatchUserRequest patchUserRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(userUuid, patchUserRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update User (asynchronously)
     * ユーザーを更新します。
     * @param userUuid  (required)
     * @param patchUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(String userUuid, PatchUserRequest patchUserRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(userUuid, patchUserRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
