/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aptpod.intdash;

import com.aptpod.ApiCallback;
import com.aptpod.ApiClient;
import com.aptpod.ApiException;
import com.aptpod.ApiResponse;
import com.aptpod.Configuration;
import com.aptpod.Pair;
import com.aptpod.ProgressRequestBody;
import com.aptpod.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataIDs;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MeasDataPointsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MeasDataPointsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MeasDataPointsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDataPoints
     * @param body このエンドポイント使用時は、 &#x60;Content-Type&#x60; を以下にしてください。   * &#x60;application/protobuf&#x60;       * [protocol.proto](https://docs.intdash.jp/api/measurement/proto/index.html) の &#x60;StoreProto&#x60; を参照してください。         * &#x60;DataPointProto&#x60; の &#x60;data_payload&#x60;は iSCP v1のデータフォーマットに従います。         * iSCPのデータフォーマットは [詳説 iSCP 1.0](https://docs.intdash.jp/manual/iscp1-essentials/latest/ja/iscp1-essentials-ja.pdf#page&#x3D;23)を参照してください。 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createDataPointsCall(File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/measurements/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/protobuf"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDataPointsValidateBeforeCall(File body, final ApiCallback _callback) throws ApiException {
        return createDataPointsCall(body, _callback);

    }

    /**
     * Store Data Points
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/data&#x60; を使用してください）  データポイントを登録します。
     * @param body このエンドポイント使用時は、 &#x60;Content-Type&#x60; を以下にしてください。   * &#x60;application/protobuf&#x60;       * [protocol.proto](https://docs.intdash.jp/api/measurement/proto/index.html) の &#x60;StoreProto&#x60; を参照してください。         * &#x60;DataPointProto&#x60; の &#x60;data_payload&#x60;は iSCP v1のデータフォーマットに従います。         * iSCPのデータフォーマットは [詳説 iSCP 1.0](https://docs.intdash.jp/manual/iscp1-essentials/latest/ja/iscp1-essentials-ja.pdf#page&#x3D;23)を参照してください。 (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public File createDataPoints(File body) throws ApiException {
        ApiResponse<File> localVarResp = createDataPointsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Store Data Points
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/data&#x60; を使用してください）  データポイントを登録します。
     * @param body このエンドポイント使用時は、 &#x60;Content-Type&#x60; を以下にしてください。   * &#x60;application/protobuf&#x60;       * [protocol.proto](https://docs.intdash.jp/api/measurement/proto/index.html) の &#x60;StoreProto&#x60; を参照してください。         * &#x60;DataPointProto&#x60; の &#x60;data_payload&#x60;は iSCP v1のデータフォーマットに従います。         * iSCPのデータフォーマットは [詳説 iSCP 1.0](https://docs.intdash.jp/manual/iscp1-essentials/latest/ja/iscp1-essentials-ja.pdf#page&#x3D;23)を参照してください。 (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> createDataPointsWithHttpInfo(File body) throws ApiException {
        okhttp3.Call localVarCall = createDataPointsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Store Data Points (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/data&#x60; を使用してください）  データポイントを登録します。
     * @param body このエンドポイント使用時は、 &#x60;Content-Type&#x60; を以下にしてください。   * &#x60;application/protobuf&#x60;       * [protocol.proto](https://docs.intdash.jp/api/measurement/proto/index.html) の &#x60;StoreProto&#x60; を参照してください。         * &#x60;DataPointProto&#x60; の &#x60;data_payload&#x60;は iSCP v1のデータフォーマットに従います。         * iSCPのデータフォーマットは [詳説 iSCP 1.0](https://docs.intdash.jp/manual/iscp1-essentials/latest/ja/iscp1-essentials-ja.pdf#page&#x3D;23)を参照してください。 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createDataPointsAsync(File body, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDataPointsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProjectDataPoints
     * @param projectUuid プロジェクトのUUID (required)
     * @param body このエンドポイント使用時は、 &#x60;Content-Type&#x60; を以下にしてください。   * &#x60;application/protobuf&#x60;       * [protocol.proto](https://docs.intdash.jp/api/measurement/proto/index.html) の &#x60;StoreProto&#x60; を参照してください。         * &#x60;DataPointProto&#x60; の &#x60;data_payload&#x60;は iSCP v1のデータフォーマットに従います。         * iSCPのデータフォーマットは [詳説 iSCP 1.0](https://docs.intdash.jp/manual/iscp1-essentials/latest/ja/iscp1-essentials-ja.pdf#page&#x3D;23)を参照してください。 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectDataPointsCall(String projectUuid, File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/data"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/protobuf"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectDataPointsValidateBeforeCall(String projectUuid, File body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling createProjectDataPoints(Async)");
        }

        return createProjectDataPointsCall(projectUuid, body, _callback);

    }

    /**
     * Store Project Data Points
     * データポイントを登録します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param body このエンドポイント使用時は、 &#x60;Content-Type&#x60; を以下にしてください。   * &#x60;application/protobuf&#x60;       * [protocol.proto](https://docs.intdash.jp/api/measurement/proto/index.html) の &#x60;StoreProto&#x60; を参照してください。         * &#x60;DataPointProto&#x60; の &#x60;data_payload&#x60;は iSCP v1のデータフォーマットに従います。         * iSCPのデータフォーマットは [詳説 iSCP 1.0](https://docs.intdash.jp/manual/iscp1-essentials/latest/ja/iscp1-essentials-ja.pdf#page&#x3D;23)を参照してください。 (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public File createProjectDataPoints(String projectUuid, File body) throws ApiException {
        ApiResponse<File> localVarResp = createProjectDataPointsWithHttpInfo(projectUuid, body);
        return localVarResp.getData();
    }

    /**
     * Store Project Data Points
     * データポイントを登録します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param body このエンドポイント使用時は、 &#x60;Content-Type&#x60; を以下にしてください。   * &#x60;application/protobuf&#x60;       * [protocol.proto](https://docs.intdash.jp/api/measurement/proto/index.html) の &#x60;StoreProto&#x60; を参照してください。         * &#x60;DataPointProto&#x60; の &#x60;data_payload&#x60;は iSCP v1のデータフォーマットに従います。         * iSCPのデータフォーマットは [詳説 iSCP 1.0](https://docs.intdash.jp/manual/iscp1-essentials/latest/ja/iscp1-essentials-ja.pdf#page&#x3D;23)を参照してください。 (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> createProjectDataPointsWithHttpInfo(String projectUuid, File body) throws ApiException {
        okhttp3.Call localVarCall = createProjectDataPointsValidateBeforeCall(projectUuid, body, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Store Project Data Points (asynchronously)
     * データポイントを登録します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param body このエンドポイント使用時は、 &#x60;Content-Type&#x60; を以下にしてください。   * &#x60;application/protobuf&#x60;       * [protocol.proto](https://docs.intdash.jp/api/measurement/proto/index.html) の &#x60;StoreProto&#x60; を参照してください。         * &#x60;DataPointProto&#x60; の &#x60;data_payload&#x60;は iSCP v1のデータフォーマットに従います。         * iSCPのデータフォーマットは [詳説 iSCP 1.0](https://docs.intdash.jp/manual/iscp1-essentials/latest/ja/iscp1-essentials-ja.pdf#page&#x3D;23)を参照してください。 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectDataPointsAsync(String projectUuid, File body, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectDataPointsValidateBeforeCall(projectUuid, body, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDataIDs
     * @param start 取得対象範囲の始点（マイクロ秒単位のUNIX時刻） (optional)
     * @param end 取得対象範囲の終点（マイクロ秒単位のUNIX時刻） (optional)
     * @param edgeUuid エッジのUUID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listDataIDsCall(Long start, Long end, String edgeUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/getids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (edgeUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("edge_uuid", edgeUuid));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDataIDsValidateBeforeCall(Long start, Long end, String edgeUuid, final ApiCallback _callback) throws ApiException {
        return listDataIDsCall(start, end, edgeUuid, _callback);

    }

    /**
     * List Edge&#39;s Data IDs
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/getids&#x60; を使用してください）  エッジを指定し、そのエッジから送信されているデータに含まれるデータ識別子（ &#x60;data_type&#x60; 、 &#x60;channel&#x60; 、 &#x60;data_id&#x60; の組み合わせ）のリストを取得します。
     * @param start 取得対象範囲の始点（マイクロ秒単位のUNIX時刻） (optional)
     * @param end 取得対象範囲の終点（マイクロ秒単位のUNIX時刻） (optional)
     * @param edgeUuid エッジのUUID (optional)
     * @return DataIDs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DataIDs listDataIDs(Long start, Long end, String edgeUuid) throws ApiException {
        ApiResponse<DataIDs> localVarResp = listDataIDsWithHttpInfo(start, end, edgeUuid);
        return localVarResp.getData();
    }

    /**
     * List Edge&#39;s Data IDs
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/getids&#x60; を使用してください）  エッジを指定し、そのエッジから送信されているデータに含まれるデータ識別子（ &#x60;data_type&#x60; 、 &#x60;channel&#x60; 、 &#x60;data_id&#x60; の組み合わせ）のリストを取得します。
     * @param start 取得対象範囲の始点（マイクロ秒単位のUNIX時刻） (optional)
     * @param end 取得対象範囲の終点（マイクロ秒単位のUNIX時刻） (optional)
     * @param edgeUuid エッジのUUID (optional)
     * @return ApiResponse&lt;DataIDs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DataIDs> listDataIDsWithHttpInfo(Long start, Long end, String edgeUuid) throws ApiException {
        okhttp3.Call localVarCall = listDataIDsValidateBeforeCall(start, end, edgeUuid, null);
        Type localVarReturnType = new TypeToken<DataIDs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Edge&#39;s Data IDs (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/getids&#x60; を使用してください）  エッジを指定し、そのエッジから送信されているデータに含まれるデータ識別子（ &#x60;data_type&#x60; 、 &#x60;channel&#x60; 、 &#x60;data_id&#x60; の組み合わせ）のリストを取得します。
     * @param start 取得対象範囲の始点（マイクロ秒単位のUNIX時刻） (optional)
     * @param end 取得対象範囲の終点（マイクロ秒単位のUNIX時刻） (optional)
     * @param edgeUuid エッジのUUID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listDataIDsAsync(Long start, Long end, String edgeUuid, final ApiCallback<DataIDs> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDataIDsValidateBeforeCall(start, end, edgeUuid, _callback);
        Type localVarReturnType = new TypeToken<DataIDs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDataIDsWithMeasurementUUID
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listDataIDsWithMeasurementUUIDCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}/getids"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDataIDsWithMeasurementUUIDValidateBeforeCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling listDataIDsWithMeasurementUUID(Async)");
        }

        return listDataIDsWithMeasurementUUIDCall(measurementUuid, _callback);

    }

    /**
     * List Data IDs
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/getids&#x60; を使用してください） 計測を指定し、その計測に含まれるデータ識別子（ &#x60;data_type&#x60; 、 &#x60;channel&#x60; 、 &#x60;data_id&#x60; の組み合わせ）のリストを取得します。
     * @param measurementUuid 計測のUUID (required)
     * @return DataIDs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DataIDs listDataIDsWithMeasurementUUID(String measurementUuid) throws ApiException {
        ApiResponse<DataIDs> localVarResp = listDataIDsWithMeasurementUUIDWithHttpInfo(measurementUuid);
        return localVarResp.getData();
    }

    /**
     * List Data IDs
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/getids&#x60; を使用してください） 計測を指定し、その計測に含まれるデータ識別子（ &#x60;data_type&#x60; 、 &#x60;channel&#x60; 、 &#x60;data_id&#x60; の組み合わせ）のリストを取得します。
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;DataIDs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DataIDs> listDataIDsWithMeasurementUUIDWithHttpInfo(String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = listDataIDsWithMeasurementUUIDValidateBeforeCall(measurementUuid, null);
        Type localVarReturnType = new TypeToken<DataIDs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Data IDs (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/getids&#x60; を使用してください） 計測を指定し、その計測に含まれるデータ識別子（ &#x60;data_type&#x60; 、 &#x60;channel&#x60; 、 &#x60;data_id&#x60; の組み合わせ）のリストを取得します。
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listDataIDsWithMeasurementUUIDAsync(String measurementUuid, final ApiCallback<DataIDs> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDataIDsWithMeasurementUUIDValidateBeforeCall(measurementUuid, _callback);
        Type localVarReturnType = new TypeToken<DataIDs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDataPoints
     * @param name どの計測またはどのエッジのデータポイントを取得するかを、以下のいずれかを使って指定します： - 計測UUID - エッジUUID - エッジの名前  最初に、指定されたnameに一致する計測UUIDがあるかが検索されます。なければ一致するエッジUUIDがあるかが検索され、それもなければ一致するエッジの名前があるかが検索されます。 (required)
     * @param start 取得対象範囲の始点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param end 取得対象範囲の終点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param idq 取得したいデータポイントの条件を以下のフォーマットで指定します。 &#x60;data_id&#x60; には、 &#x60;GET /data_ids&#x60; エンドポイントで取得できる &#x60;data_id&#x60; の値を使用します。  - &#x60;&lt;data_type&gt;:&lt;channel&gt;/&lt;data_id&gt;&#x60;  各セグメントにはワイルドカード(*)を使用することができます。 例:   - CAN(data_type &#x3D; &#x60;1&#x60;)のデータポイントを取得する -&gt; &#x60;1:*_/_*&#x60; または &#x60;1&#x60;   - チャンネル2のCANデータポイントを取得する -&gt; &#x60;1:2/_*&#x60; または &#x60;1:2&#x60;   - チャンネル2のCANデータポイントのうち、データIDが &#x60;00000001&#x60; のものを取得する -&gt; &#x60;1:2/00000001&#x60; (optional)
     * @param since 指定した時刻以降に更新された計測のみを取得します。 以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z).   - UNIX時刻（マイクロ秒）(**Deprecated**). (optional)
     * @param exitOnError &#x60;true&#x60; を指定した場合、取得中にエラーが発生すると処理を中断し、中断前までのデータポイントのリストを返します。 (optional, default to false)
     * @param label 信号定義のラベル (optional)
     * @param period データポイントを指定した間隔（マイクロ秒）に間引きます。（ **Experimental** ）  指定された間隔ごとに最新のデータポイントを残し、それ以外を除去します。 また、指定された間隔になるようにデータポイントの時刻を揃えます。 &#x60;&#x60;&#x60;  --1--2----3---4--5---6-7--89-a---b-c---d--e--&gt; period指定なし  |     |     |     |     |     |     |     |  |     |     |     |     |     |     |     |  2-----3-----5-----7-----a-----c-----d-----e--&gt; period指定あり   |&lt;---&gt;| period &#x60;&#x60;&#x60; (optional)
     * @param limit 1回のリクエストで取得する件数。デフォルトは無制限。 (optional)
     * @param order 並べ替えの順序。デフォルトは &#x60;asc&#x60; （昇順） (optional)
     * @param timeFormat レスポンスの時刻表示形式。デフォルトは &#x60;us&#x60; （マイクロ秒） (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Transfer-Encoding -  <br>  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listDataPointsCall(String name, String start, String end, List<String> idq, String since, String exitOnError, List<String> label, Long period, Long limit, String order, String timeFormat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (idq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "idq", idq));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (exitOnError != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exit_on_error", exitOnError));
        }

        if (label != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "label", label));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (timeFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_format", timeFormat));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8",
            "application/protobuf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDataPointsValidateBeforeCall(String name, String start, String end, List<String> idq, String since, String exitOnError, List<String> label, Long period, Long limit, String order, String timeFormat, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling listDataPoints(Async)");
        }

        return listDataPointsCall(name, start, end, idq, since, exitOnError, label, period, limit, order, timeFormat, _callback);

    }

    /**
     * List Data Points
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/data&#x60; を使用してください）  データポイントのリストを取得します。  返却されるデータポイントはJSON形式です。データポイントごとに改行で区切られます。
     * @param name どの計測またはどのエッジのデータポイントを取得するかを、以下のいずれかを使って指定します： - 計測UUID - エッジUUID - エッジの名前  最初に、指定されたnameに一致する計測UUIDがあるかが検索されます。なければ一致するエッジUUIDがあるかが検索され、それもなければ一致するエッジの名前があるかが検索されます。 (required)
     * @param start 取得対象範囲の始点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param end 取得対象範囲の終点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param idq 取得したいデータポイントの条件を以下のフォーマットで指定します。 &#x60;data_id&#x60; には、 &#x60;GET /data_ids&#x60; エンドポイントで取得できる &#x60;data_id&#x60; の値を使用します。  - &#x60;&lt;data_type&gt;:&lt;channel&gt;/&lt;data_id&gt;&#x60;  各セグメントにはワイルドカード(*)を使用することができます。 例:   - CAN(data_type &#x3D; &#x60;1&#x60;)のデータポイントを取得する -&gt; &#x60;1:*_/_*&#x60; または &#x60;1&#x60;   - チャンネル2のCANデータポイントを取得する -&gt; &#x60;1:2/_*&#x60; または &#x60;1:2&#x60;   - チャンネル2のCANデータポイントのうち、データIDが &#x60;00000001&#x60; のものを取得する -&gt; &#x60;1:2/00000001&#x60; (optional)
     * @param since 指定した時刻以降に更新された計測のみを取得します。 以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z).   - UNIX時刻（マイクロ秒）(**Deprecated**). (optional)
     * @param exitOnError &#x60;true&#x60; を指定した場合、取得中にエラーが発生すると処理を中断し、中断前までのデータポイントのリストを返します。 (optional, default to false)
     * @param label 信号定義のラベル (optional)
     * @param period データポイントを指定した間隔（マイクロ秒）に間引きます。（ **Experimental** ）  指定された間隔ごとに最新のデータポイントを残し、それ以外を除去します。 また、指定された間隔になるようにデータポイントの時刻を揃えます。 &#x60;&#x60;&#x60;  --1--2----3---4--5---6-7--89-a---b-c---d--e--&gt; period指定なし  |     |     |     |     |     |     |     |  |     |     |     |     |     |     |     |  2-----3-----5-----7-----a-----c-----d-----e--&gt; period指定あり   |&lt;---&gt;| period &#x60;&#x60;&#x60; (optional)
     * @param limit 1回のリクエストで取得する件数。デフォルトは無制限。 (optional)
     * @param order 並べ替えの順序。デフォルトは &#x60;asc&#x60; （昇順） (optional)
     * @param timeFormat レスポンスの時刻表示形式。デフォルトは &#x60;us&#x60; （マイクロ秒） (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Transfer-Encoding -  <br>  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public File listDataPoints(String name, String start, String end, List<String> idq, String since, String exitOnError, List<String> label, Long period, Long limit, String order, String timeFormat) throws ApiException {
        ApiResponse<File> localVarResp = listDataPointsWithHttpInfo(name, start, end, idq, since, exitOnError, label, period, limit, order, timeFormat);
        return localVarResp.getData();
    }

    /**
     * List Data Points
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/data&#x60; を使用してください）  データポイントのリストを取得します。  返却されるデータポイントはJSON形式です。データポイントごとに改行で区切られます。
     * @param name どの計測またはどのエッジのデータポイントを取得するかを、以下のいずれかを使って指定します： - 計測UUID - エッジUUID - エッジの名前  最初に、指定されたnameに一致する計測UUIDがあるかが検索されます。なければ一致するエッジUUIDがあるかが検索され、それもなければ一致するエッジの名前があるかが検索されます。 (required)
     * @param start 取得対象範囲の始点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param end 取得対象範囲の終点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param idq 取得したいデータポイントの条件を以下のフォーマットで指定します。 &#x60;data_id&#x60; には、 &#x60;GET /data_ids&#x60; エンドポイントで取得できる &#x60;data_id&#x60; の値を使用します。  - &#x60;&lt;data_type&gt;:&lt;channel&gt;/&lt;data_id&gt;&#x60;  各セグメントにはワイルドカード(*)を使用することができます。 例:   - CAN(data_type &#x3D; &#x60;1&#x60;)のデータポイントを取得する -&gt; &#x60;1:*_/_*&#x60; または &#x60;1&#x60;   - チャンネル2のCANデータポイントを取得する -&gt; &#x60;1:2/_*&#x60; または &#x60;1:2&#x60;   - チャンネル2のCANデータポイントのうち、データIDが &#x60;00000001&#x60; のものを取得する -&gt; &#x60;1:2/00000001&#x60; (optional)
     * @param since 指定した時刻以降に更新された計測のみを取得します。 以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z).   - UNIX時刻（マイクロ秒）(**Deprecated**). (optional)
     * @param exitOnError &#x60;true&#x60; を指定した場合、取得中にエラーが発生すると処理を中断し、中断前までのデータポイントのリストを返します。 (optional, default to false)
     * @param label 信号定義のラベル (optional)
     * @param period データポイントを指定した間隔（マイクロ秒）に間引きます。（ **Experimental** ）  指定された間隔ごとに最新のデータポイントを残し、それ以外を除去します。 また、指定された間隔になるようにデータポイントの時刻を揃えます。 &#x60;&#x60;&#x60;  --1--2----3---4--5---6-7--89-a---b-c---d--e--&gt; period指定なし  |     |     |     |     |     |     |     |  |     |     |     |     |     |     |     |  2-----3-----5-----7-----a-----c-----d-----e--&gt; period指定あり   |&lt;---&gt;| period &#x60;&#x60;&#x60; (optional)
     * @param limit 1回のリクエストで取得する件数。デフォルトは無制限。 (optional)
     * @param order 並べ替えの順序。デフォルトは &#x60;asc&#x60; （昇順） (optional)
     * @param timeFormat レスポンスの時刻表示形式。デフォルトは &#x60;us&#x60; （マイクロ秒） (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Transfer-Encoding -  <br>  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> listDataPointsWithHttpInfo(String name, String start, String end, List<String> idq, String since, String exitOnError, List<String> label, Long period, Long limit, String order, String timeFormat) throws ApiException {
        okhttp3.Call localVarCall = listDataPointsValidateBeforeCall(name, start, end, idq, since, exitOnError, label, period, limit, order, timeFormat, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Data Points (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/data&#x60; を使用してください）  データポイントのリストを取得します。  返却されるデータポイントはJSON形式です。データポイントごとに改行で区切られます。
     * @param name どの計測またはどのエッジのデータポイントを取得するかを、以下のいずれかを使って指定します： - 計測UUID - エッジUUID - エッジの名前  最初に、指定されたnameに一致する計測UUIDがあるかが検索されます。なければ一致するエッジUUIDがあるかが検索され、それもなければ一致するエッジの名前があるかが検索されます。 (required)
     * @param start 取得対象範囲の始点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param end 取得対象範囲の終点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param idq 取得したいデータポイントの条件を以下のフォーマットで指定します。 &#x60;data_id&#x60; には、 &#x60;GET /data_ids&#x60; エンドポイントで取得できる &#x60;data_id&#x60; の値を使用します。  - &#x60;&lt;data_type&gt;:&lt;channel&gt;/&lt;data_id&gt;&#x60;  各セグメントにはワイルドカード(*)を使用することができます。 例:   - CAN(data_type &#x3D; &#x60;1&#x60;)のデータポイントを取得する -&gt; &#x60;1:*_/_*&#x60; または &#x60;1&#x60;   - チャンネル2のCANデータポイントを取得する -&gt; &#x60;1:2/_*&#x60; または &#x60;1:2&#x60;   - チャンネル2のCANデータポイントのうち、データIDが &#x60;00000001&#x60; のものを取得する -&gt; &#x60;1:2/00000001&#x60; (optional)
     * @param since 指定した時刻以降に更新された計測のみを取得します。 以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z).   - UNIX時刻（マイクロ秒）(**Deprecated**). (optional)
     * @param exitOnError &#x60;true&#x60; を指定した場合、取得中にエラーが発生すると処理を中断し、中断前までのデータポイントのリストを返します。 (optional, default to false)
     * @param label 信号定義のラベル (optional)
     * @param period データポイントを指定した間隔（マイクロ秒）に間引きます。（ **Experimental** ）  指定された間隔ごとに最新のデータポイントを残し、それ以外を除去します。 また、指定された間隔になるようにデータポイントの時刻を揃えます。 &#x60;&#x60;&#x60;  --1--2----3---4--5---6-7--89-a---b-c---d--e--&gt; period指定なし  |     |     |     |     |     |     |     |  |     |     |     |     |     |     |     |  2-----3-----5-----7-----a-----c-----d-----e--&gt; period指定あり   |&lt;---&gt;| period &#x60;&#x60;&#x60; (optional)
     * @param limit 1回のリクエストで取得する件数。デフォルトは無制限。 (optional)
     * @param order 並べ替えの順序。デフォルトは &#x60;asc&#x60; （昇順） (optional)
     * @param timeFormat レスポンスの時刻表示形式。デフォルトは &#x60;us&#x60; （マイクロ秒） (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Transfer-Encoding -  <br>  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listDataPointsAsync(String name, String start, String end, List<String> idq, String since, String exitOnError, List<String> label, Long period, Long limit, String order, String timeFormat, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDataPointsValidateBeforeCall(name, start, end, idq, since, exitOnError, label, period, limit, order, timeFormat, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProjectDataIDs
     * @param projectUuid プロジェクトのUUID (required)
     * @param start 取得対象範囲の始点（マイクロ秒単位のUNIX時刻） (optional)
     * @param end 取得対象範囲の終点（マイクロ秒単位のUNIX時刻） (optional)
     * @param edgeUuid エッジのUUID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectDataIDsCall(String projectUuid, Long start, Long end, String edgeUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/getids"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (edgeUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("edge_uuid", edgeUuid));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectDataIDsValidateBeforeCall(String projectUuid, Long start, Long end, String edgeUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling listProjectDataIDs(Async)");
        }

        return listProjectDataIDsCall(projectUuid, start, end, edgeUuid, _callback);

    }

    /**
     * List Project Edge&#39;s Data IDs
     * エッジを指定し、そのエッジから送信されているデータに含まれるデータ識別子（ &#x60;data_type&#x60; 、 &#x60;channel&#x60; 、 &#x60;data_id&#x60; の組み合わせ）のリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param start 取得対象範囲の始点（マイクロ秒単位のUNIX時刻） (optional)
     * @param end 取得対象範囲の終点（マイクロ秒単位のUNIX時刻） (optional)
     * @param edgeUuid エッジのUUID (optional)
     * @return DataIDs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataIDs listProjectDataIDs(String projectUuid, Long start, Long end, String edgeUuid) throws ApiException {
        ApiResponse<DataIDs> localVarResp = listProjectDataIDsWithHttpInfo(projectUuid, start, end, edgeUuid);
        return localVarResp.getData();
    }

    /**
     * List Project Edge&#39;s Data IDs
     * エッジを指定し、そのエッジから送信されているデータに含まれるデータ識別子（ &#x60;data_type&#x60; 、 &#x60;channel&#x60; 、 &#x60;data_id&#x60; の組み合わせ）のリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param start 取得対象範囲の始点（マイクロ秒単位のUNIX時刻） (optional)
     * @param end 取得対象範囲の終点（マイクロ秒単位のUNIX時刻） (optional)
     * @param edgeUuid エッジのUUID (optional)
     * @return ApiResponse&lt;DataIDs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataIDs> listProjectDataIDsWithHttpInfo(String projectUuid, Long start, Long end, String edgeUuid) throws ApiException {
        okhttp3.Call localVarCall = listProjectDataIDsValidateBeforeCall(projectUuid, start, end, edgeUuid, null);
        Type localVarReturnType = new TypeToken<DataIDs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Project Edge&#39;s Data IDs (asynchronously)
     * エッジを指定し、そのエッジから送信されているデータに含まれるデータ識別子（ &#x60;data_type&#x60; 、 &#x60;channel&#x60; 、 &#x60;data_id&#x60; の組み合わせ）のリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param start 取得対象範囲の始点（マイクロ秒単位のUNIX時刻） (optional)
     * @param end 取得対象範囲の終点（マイクロ秒単位のUNIX時刻） (optional)
     * @param edgeUuid エッジのUUID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectDataIDsAsync(String projectUuid, Long start, Long end, String edgeUuid, final ApiCallback<DataIDs> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectDataIDsValidateBeforeCall(projectUuid, start, end, edgeUuid, _callback);
        Type localVarReturnType = new TypeToken<DataIDs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProjectDataIDsWithMeasurementUUID
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectDataIDsWithMeasurementUUIDCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/getids"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectDataIDsWithMeasurementUUIDValidateBeforeCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling listProjectDataIDsWithMeasurementUUID(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling listProjectDataIDsWithMeasurementUUID(Async)");
        }

        return listProjectDataIDsWithMeasurementUUIDCall(projectUuid, measurementUuid, _callback);

    }

    /**
     * List Project Data IDs
     * 計測を指定し、その計測に含まれるデータ識別子（ &#x60;data_type&#x60; 、 &#x60;channel&#x60; 、 &#x60;data_id&#x60; の組み合わせ）のリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @return DataIDs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataIDs listProjectDataIDsWithMeasurementUUID(String projectUuid, String measurementUuid) throws ApiException {
        ApiResponse<DataIDs> localVarResp = listProjectDataIDsWithMeasurementUUIDWithHttpInfo(projectUuid, measurementUuid);
        return localVarResp.getData();
    }

    /**
     * List Project Data IDs
     * 計測を指定し、その計測に含まれるデータ識別子（ &#x60;data_type&#x60; 、 &#x60;channel&#x60; 、 &#x60;data_id&#x60; の組み合わせ）のリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;DataIDs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataIDs> listProjectDataIDsWithMeasurementUUIDWithHttpInfo(String projectUuid, String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = listProjectDataIDsWithMeasurementUUIDValidateBeforeCall(projectUuid, measurementUuid, null);
        Type localVarReturnType = new TypeToken<DataIDs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Project Data IDs (asynchronously)
     * 計測を指定し、その計測に含まれるデータ識別子（ &#x60;data_type&#x60; 、 &#x60;channel&#x60; 、 &#x60;data_id&#x60; の組み合わせ）のリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectDataIDsWithMeasurementUUIDAsync(String projectUuid, String measurementUuid, final ApiCallback<DataIDs> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectDataIDsWithMeasurementUUIDValidateBeforeCall(projectUuid, measurementUuid, _callback);
        Type localVarReturnType = new TypeToken<DataIDs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProjectDataPoints
     * @param projectUuid プロジェクトのUUID (required)
     * @param name どの計測またはどのエッジのデータポイントを取得するかを、以下のいずれかを使って指定します： - 計測UUID - エッジUUID - エッジの名前  最初に、指定されたnameに一致する計測UUIDがあるかが検索されます。なければ一致するエッジUUIDがあるかが検索され、それもなければ一致するエッジの名前があるかが検索されます。 (required)
     * @param idq 取得したいデータポイントの条件を以下のフォーマットで指定します。 &#x60;data_id&#x60; には、 &#x60;GET /data_ids&#x60; エンドポイントで取得できる &#x60;data_id&#x60; の値を使用します。  - &#x60;&lt;data_type&gt;:&lt;channel&gt;/&lt;data_id&gt;&#x60;  各セグメントにはワイルドカード(*)を使用することができます。 例:   - CAN(data_type &#x3D; &#x60;1&#x60;)のデータポイントを取得する -&gt; &#x60;1:*_/_*&#x60; または &#x60;1&#x60;   - チャンネル2のCANデータポイントを取得する -&gt; &#x60;1:2/_*&#x60; または &#x60;1:2&#x60;   - チャンネル2のCANデータポイントのうち、データIDが &#x60;00000001&#x60; のものを取得する -&gt; &#x60;1:2/00000001&#x60; (optional)
     * @param start 取得対象範囲の始点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param end 取得対象範囲の終点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param since 指定した時刻以降に更新された計測のみを取得します。 以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z).   - UNIX時刻（マイクロ秒）(**Deprecated**). (optional)
     * @param exitOnError &#x60;true&#x60; を指定した場合、取得中にエラーが発生すると処理を中断し、中断前までのデータポイントのリストを返します。 (optional, default to false)
     * @param label 信号定義のラベル (optional)
     * @param period データポイントを指定した間隔（マイクロ秒）に間引きます。（ **Experimental** ）  指定された間隔ごとに最新のデータポイントを残し、それ以外を除去します。 また、指定された間隔になるようにデータポイントの時刻を揃えます。 &#x60;&#x60;&#x60;  --1--2----3---4--5---6-7--89-a---b-c---d--e--&gt; period指定なし  |     |     |     |     |     |     |     |  |     |     |     |     |     |     |     |  2-----3-----5-----7-----a-----c-----d-----e--&gt; period指定あり   |&lt;---&gt;| period &#x60;&#x60;&#x60; (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param order 並べ替えの順序。デフォルトは &#x60;asc&#x60; （昇順） (optional)
     * @param timeFormat レスポンスの時刻表示形式。デフォルトは &#x60;us&#x60; （マイクロ秒） (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Transfer-Encoding -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectDataPointsCall(String projectUuid, String name, List<String> idq, String start, String end, String since, String exitOnError, List<String> label, Long period, Integer limit, String order, String timeFormat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/data"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (idq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "idq", idq));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (exitOnError != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exit_on_error", exitOnError));
        }

        if (label != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "label", label));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (timeFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_format", timeFormat));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8",
            "application/protobuf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectDataPointsValidateBeforeCall(String projectUuid, String name, List<String> idq, String start, String end, String since, String exitOnError, List<String> label, Long period, Integer limit, String order, String timeFormat, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling listProjectDataPoints(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling listProjectDataPoints(Async)");
        }

        return listProjectDataPointsCall(projectUuid, name, idq, start, end, since, exitOnError, label, period, limit, order, timeFormat, _callback);

    }

    /**
     * List Project Data Points
     * データポイントのリストを取得します。 返却されるデータポイントはJSON形式です。データポイントごとに改行で区切られます。
     * @param projectUuid プロジェクトのUUID (required)
     * @param name どの計測またはどのエッジのデータポイントを取得するかを、以下のいずれかを使って指定します： - 計測UUID - エッジUUID - エッジの名前  最初に、指定されたnameに一致する計測UUIDがあるかが検索されます。なければ一致するエッジUUIDがあるかが検索され、それもなければ一致するエッジの名前があるかが検索されます。 (required)
     * @param idq 取得したいデータポイントの条件を以下のフォーマットで指定します。 &#x60;data_id&#x60; には、 &#x60;GET /data_ids&#x60; エンドポイントで取得できる &#x60;data_id&#x60; の値を使用します。  - &#x60;&lt;data_type&gt;:&lt;channel&gt;/&lt;data_id&gt;&#x60;  各セグメントにはワイルドカード(*)を使用することができます。 例:   - CAN(data_type &#x3D; &#x60;1&#x60;)のデータポイントを取得する -&gt; &#x60;1:*_/_*&#x60; または &#x60;1&#x60;   - チャンネル2のCANデータポイントを取得する -&gt; &#x60;1:2/_*&#x60; または &#x60;1:2&#x60;   - チャンネル2のCANデータポイントのうち、データIDが &#x60;00000001&#x60; のものを取得する -&gt; &#x60;1:2/00000001&#x60; (optional)
     * @param start 取得対象範囲の始点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param end 取得対象範囲の終点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param since 指定した時刻以降に更新された計測のみを取得します。 以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z).   - UNIX時刻（マイクロ秒）(**Deprecated**). (optional)
     * @param exitOnError &#x60;true&#x60; を指定した場合、取得中にエラーが発生すると処理を中断し、中断前までのデータポイントのリストを返します。 (optional, default to false)
     * @param label 信号定義のラベル (optional)
     * @param period データポイントを指定した間隔（マイクロ秒）に間引きます。（ **Experimental** ）  指定された間隔ごとに最新のデータポイントを残し、それ以外を除去します。 また、指定された間隔になるようにデータポイントの時刻を揃えます。 &#x60;&#x60;&#x60;  --1--2----3---4--5---6-7--89-a---b-c---d--e--&gt; period指定なし  |     |     |     |     |     |     |     |  |     |     |     |     |     |     |     |  2-----3-----5-----7-----a-----c-----d-----e--&gt; period指定あり   |&lt;---&gt;| period &#x60;&#x60;&#x60; (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param order 並べ替えの順序。デフォルトは &#x60;asc&#x60; （昇順） (optional)
     * @param timeFormat レスポンスの時刻表示形式。デフォルトは &#x60;us&#x60; （マイクロ秒） (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Transfer-Encoding -  <br>  </td></tr>
     </table>
     */
    public File listProjectDataPoints(String projectUuid, String name, List<String> idq, String start, String end, String since, String exitOnError, List<String> label, Long period, Integer limit, String order, String timeFormat) throws ApiException {
        ApiResponse<File> localVarResp = listProjectDataPointsWithHttpInfo(projectUuid, name, idq, start, end, since, exitOnError, label, period, limit, order, timeFormat);
        return localVarResp.getData();
    }

    /**
     * List Project Data Points
     * データポイントのリストを取得します。 返却されるデータポイントはJSON形式です。データポイントごとに改行で区切られます。
     * @param projectUuid プロジェクトのUUID (required)
     * @param name どの計測またはどのエッジのデータポイントを取得するかを、以下のいずれかを使って指定します： - 計測UUID - エッジUUID - エッジの名前  最初に、指定されたnameに一致する計測UUIDがあるかが検索されます。なければ一致するエッジUUIDがあるかが検索され、それもなければ一致するエッジの名前があるかが検索されます。 (required)
     * @param idq 取得したいデータポイントの条件を以下のフォーマットで指定します。 &#x60;data_id&#x60; には、 &#x60;GET /data_ids&#x60; エンドポイントで取得できる &#x60;data_id&#x60; の値を使用します。  - &#x60;&lt;data_type&gt;:&lt;channel&gt;/&lt;data_id&gt;&#x60;  各セグメントにはワイルドカード(*)を使用することができます。 例:   - CAN(data_type &#x3D; &#x60;1&#x60;)のデータポイントを取得する -&gt; &#x60;1:*_/_*&#x60; または &#x60;1&#x60;   - チャンネル2のCANデータポイントを取得する -&gt; &#x60;1:2/_*&#x60; または &#x60;1:2&#x60;   - チャンネル2のCANデータポイントのうち、データIDが &#x60;00000001&#x60; のものを取得する -&gt; &#x60;1:2/00000001&#x60; (optional)
     * @param start 取得対象範囲の始点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param end 取得対象範囲の終点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param since 指定した時刻以降に更新された計測のみを取得します。 以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z).   - UNIX時刻（マイクロ秒）(**Deprecated**). (optional)
     * @param exitOnError &#x60;true&#x60; を指定した場合、取得中にエラーが発生すると処理を中断し、中断前までのデータポイントのリストを返します。 (optional, default to false)
     * @param label 信号定義のラベル (optional)
     * @param period データポイントを指定した間隔（マイクロ秒）に間引きます。（ **Experimental** ）  指定された間隔ごとに最新のデータポイントを残し、それ以外を除去します。 また、指定された間隔になるようにデータポイントの時刻を揃えます。 &#x60;&#x60;&#x60;  --1--2----3---4--5---6-7--89-a---b-c---d--e--&gt; period指定なし  |     |     |     |     |     |     |     |  |     |     |     |     |     |     |     |  2-----3-----5-----7-----a-----c-----d-----e--&gt; period指定あり   |&lt;---&gt;| period &#x60;&#x60;&#x60; (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param order 並べ替えの順序。デフォルトは &#x60;asc&#x60; （昇順） (optional)
     * @param timeFormat レスポンスの時刻表示形式。デフォルトは &#x60;us&#x60; （マイクロ秒） (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Transfer-Encoding -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<File> listProjectDataPointsWithHttpInfo(String projectUuid, String name, List<String> idq, String start, String end, String since, String exitOnError, List<String> label, Long period, Integer limit, String order, String timeFormat) throws ApiException {
        okhttp3.Call localVarCall = listProjectDataPointsValidateBeforeCall(projectUuid, name, idq, start, end, since, exitOnError, label, period, limit, order, timeFormat, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Project Data Points (asynchronously)
     * データポイントのリストを取得します。 返却されるデータポイントはJSON形式です。データポイントごとに改行で区切られます。
     * @param projectUuid プロジェクトのUUID (required)
     * @param name どの計測またはどのエッジのデータポイントを取得するかを、以下のいずれかを使って指定します： - 計測UUID - エッジUUID - エッジの名前  最初に、指定されたnameに一致する計測UUIDがあるかが検索されます。なければ一致するエッジUUIDがあるかが検索され、それもなければ一致するエッジの名前があるかが検索されます。 (required)
     * @param idq 取得したいデータポイントの条件を以下のフォーマットで指定します。 &#x60;data_id&#x60; には、 &#x60;GET /data_ids&#x60; エンドポイントで取得できる &#x60;data_id&#x60; の値を使用します。  - &#x60;&lt;data_type&gt;:&lt;channel&gt;/&lt;data_id&gt;&#x60;  各セグメントにはワイルドカード(*)を使用することができます。 例:   - CAN(data_type &#x3D; &#x60;1&#x60;)のデータポイントを取得する -&gt; &#x60;1:*_/_*&#x60; または &#x60;1&#x60;   - チャンネル2のCANデータポイントを取得する -&gt; &#x60;1:2/_*&#x60; または &#x60;1:2&#x60;   - チャンネル2のCANデータポイントのうち、データIDが &#x60;00000001&#x60; のものを取得する -&gt; &#x60;1:2/00000001&#x60; (optional)
     * @param start 取得対象範囲の始点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param end 取得対象範囲の終点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     * @param since 指定した時刻以降に更新された計測のみを取得します。 以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z).   - UNIX時刻（マイクロ秒）(**Deprecated**). (optional)
     * @param exitOnError &#x60;true&#x60; を指定した場合、取得中にエラーが発生すると処理を中断し、中断前までのデータポイントのリストを返します。 (optional, default to false)
     * @param label 信号定義のラベル (optional)
     * @param period データポイントを指定した間隔（マイクロ秒）に間引きます。（ **Experimental** ）  指定された間隔ごとに最新のデータポイントを残し、それ以外を除去します。 また、指定された間隔になるようにデータポイントの時刻を揃えます。 &#x60;&#x60;&#x60;  --1--2----3---4--5---6-7--89-a---b-c---d--e--&gt; period指定なし  |     |     |     |     |     |     |     |  |     |     |     |     |     |     |     |  2-----3-----5-----7-----a-----c-----d-----e--&gt; period指定あり   |&lt;---&gt;| period &#x60;&#x60;&#x60; (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param order 並べ替えの順序。デフォルトは &#x60;asc&#x60; （昇順） (optional)
     * @param timeFormat レスポンスの時刻表示形式。デフォルトは &#x60;us&#x60; （マイクロ秒） (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Transfer-Encoding -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectDataPointsAsync(String projectUuid, String name, List<String> idq, String start, String end, String since, String exitOnError, List<String> label, Long period, Integer limit, String order, String timeFormat, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectDataPointsValidateBeforeCall(projectUuid, name, idq, start, end, since, exitOnError, label, period, limit, order, timeFormat, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
