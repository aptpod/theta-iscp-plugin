/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aptpod.intdash;

import com.aptpod.ApiCallback;
import com.aptpod.ApiClient;
import com.aptpod.ApiException;
import com.aptpod.ApiResponse;
import com.aptpod.Configuration;
import com.aptpod.Pair;
import com.aptpod.ProgressRequestBody;
import com.aptpod.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MeasurementMarker;
import org.openapitools.client.model.MeasurementMarkerPostRequest;
import org.openapitools.client.model.MeasurementMarkerPutRequest;
import org.openapitools.client.model.MeasurementMarkers;
import org.openapitools.client.model.MeasurementMarkersWithoutPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MeasMeasurementMarkersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MeasMeasurementMarkersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MeasMeasurementMarkersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createMeasurementMarker
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createMeasurementMarkerCall(String measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = measurementMarkerPostRequest;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}/markers"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMeasurementMarkerValidateBeforeCall(String measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling createMeasurementMarker(Async)");
        }

        return createMeasurementMarkerCall(measurementUuid, measurementMarkerPostRequest, _callback);

    }

    /**
     * Create Measurement Marker by Measurement UUID
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを作成します。
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerPostRequest  (optional)
     * @return MeasurementMarker
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasurementMarker createMeasurementMarker(String measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest) throws ApiException {
        ApiResponse<MeasurementMarker> localVarResp = createMeasurementMarkerWithHttpInfo(measurementUuid, measurementMarkerPostRequest);
        return localVarResp.getData();
    }

    /**
     * Create Measurement Marker by Measurement UUID
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを作成します。
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerPostRequest  (optional)
     * @return ApiResponse&lt;MeasurementMarker&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasurementMarker> createMeasurementMarkerWithHttpInfo(String measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest) throws ApiException {
        okhttp3.Call localVarCall = createMeasurementMarkerValidateBeforeCall(measurementUuid, measurementMarkerPostRequest, null);
        Type localVarReturnType = new TypeToken<MeasurementMarker>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Measurement Marker by Measurement UUID (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを作成します。
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createMeasurementMarkerAsync(String measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest, final ApiCallback<MeasurementMarker> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMeasurementMarkerValidateBeforeCall(measurementUuid, measurementMarkerPostRequest, _callback);
        Type localVarReturnType = new TypeToken<MeasurementMarker>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProjectMeasurementMarker
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectMeasurementMarkerCall(String projectUuid, String measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = measurementMarkerPostRequest;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectMeasurementMarkerValidateBeforeCall(String projectUuid, String measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling createProjectMeasurementMarker(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling createProjectMeasurementMarker(Async)");
        }

        return createProjectMeasurementMarkerCall(projectUuid, measurementUuid, measurementMarkerPostRequest, _callback);

    }

    /**
     * Create Project Measurement Marker by Measurement UUID
     * 計測マーカーを作成します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerPostRequest  (optional)
     * @return MeasurementMarker
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public MeasurementMarker createProjectMeasurementMarker(String projectUuid, String measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest) throws ApiException {
        ApiResponse<MeasurementMarker> localVarResp = createProjectMeasurementMarkerWithHttpInfo(projectUuid, measurementUuid, measurementMarkerPostRequest);
        return localVarResp.getData();
    }

    /**
     * Create Project Measurement Marker by Measurement UUID
     * 計測マーカーを作成します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerPostRequest  (optional)
     * @return ApiResponse&lt;MeasurementMarker&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeasurementMarker> createProjectMeasurementMarkerWithHttpInfo(String projectUuid, String measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest) throws ApiException {
        okhttp3.Call localVarCall = createProjectMeasurementMarkerValidateBeforeCall(projectUuid, measurementUuid, measurementMarkerPostRequest, null);
        Type localVarReturnType = new TypeToken<MeasurementMarker>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Project Measurement Marker by Measurement UUID (asynchronously)
     * 計測マーカーを作成します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectMeasurementMarkerAsync(String projectUuid, String measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest, final ApiCallback<MeasurementMarker> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectMeasurementMarkerValidateBeforeCall(projectUuid, measurementUuid, measurementMarkerPostRequest, _callback);
        Type localVarReturnType = new TypeToken<MeasurementMarker>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMeasurementMarker
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteMeasurementMarkerCall(String measurementMarkerUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/markers/{measurement_marker_uuid}"
            .replace("{" + "measurement_marker_uuid" + "}", localVarApiClient.escapeString(measurementMarkerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMeasurementMarkerValidateBeforeCall(String measurementMarkerUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementMarkerUuid' is set
        if (measurementMarkerUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementMarkerUuid' when calling deleteMeasurementMarker(Async)");
        }

        return deleteMeasurementMarkerCall(measurementMarkerUuid, _callback);

    }

    /**
     * Delete Measurement Marker
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteMeasurementMarker(String measurementMarkerUuid) throws ApiException {
        deleteMeasurementMarkerWithHttpInfo(measurementMarkerUuid);
    }

    /**
     * Delete Measurement Marker
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteMeasurementMarkerWithHttpInfo(String measurementMarkerUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteMeasurementMarkerValidateBeforeCall(measurementMarkerUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Measurement Marker (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteMeasurementMarkerAsync(String measurementMarkerUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMeasurementMarkerValidateBeforeCall(measurementMarkerUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUID
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDCall(String measurementUuid, String measurementMarkerUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()))
            .replace("{" + "measurement_marker_uuid" + "}", localVarApiClient.escapeString(measurementMarkerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDValidateBeforeCall(String measurementUuid, String measurementMarkerUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling deleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(Async)");
        }

        // verify the required parameter 'measurementMarkerUuid' is set
        if (measurementMarkerUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementMarkerUuid' when calling deleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(Async)");
        }

        return deleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDCall(measurementUuid, measurementMarkerUuid, _callback);

    }

    /**
     * Delete Measurement Marker using Measurement UUID
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(String measurementUuid, String measurementMarkerUuid) throws ApiException {
        deleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(measurementUuid, measurementMarkerUuid);
    }

    /**
     * Delete Measurement Marker using Measurement UUID
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(String measurementUuid, String measurementMarkerUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDValidateBeforeCall(measurementUuid, measurementMarkerUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Measurement Marker using Measurement UUID (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDAsync(String measurementUuid, String measurementMarkerUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDValidateBeforeCall(measurementUuid, measurementMarkerUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMeasurementMarkers
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteMeasurementMarkersCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}/markers"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMeasurementMarkersValidateBeforeCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling deleteMeasurementMarkers(Async)");
        }

        return deleteMeasurementMarkersCall(measurementUuid, _callback);

    }

    /**
     * Delete Measurement Markers by Measurement UUID
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを削除します。
     * @param measurementUuid 計測のUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteMeasurementMarkers(String measurementUuid) throws ApiException {
        deleteMeasurementMarkersWithHttpInfo(measurementUuid);
    }

    /**
     * Delete Measurement Markers by Measurement UUID
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを削除します。
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteMeasurementMarkersWithHttpInfo(String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteMeasurementMarkersValidateBeforeCall(measurementUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Measurement Markers by Measurement UUID (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを削除します。
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteMeasurementMarkersAsync(String measurementUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMeasurementMarkersValidateBeforeCall(measurementUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProjectMeasurementMarker
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectMeasurementMarkerCall(String projectUuid, String measurementMarkerUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/markers/{measurement_marker_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_marker_uuid" + "}", localVarApiClient.escapeString(measurementMarkerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectMeasurementMarkerValidateBeforeCall(String projectUuid, String measurementMarkerUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling deleteProjectMeasurementMarker(Async)");
        }

        // verify the required parameter 'measurementMarkerUuid' is set
        if (measurementMarkerUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementMarkerUuid' when calling deleteProjectMeasurementMarker(Async)");
        }

        return deleteProjectMeasurementMarkerCall(projectUuid, measurementMarkerUuid, _callback);

    }

    /**
     * Delete Project Measurement Marker
     * 計測マーカーを削除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProjectMeasurementMarker(String projectUuid, String measurementMarkerUuid) throws ApiException {
        deleteProjectMeasurementMarkerWithHttpInfo(projectUuid, measurementMarkerUuid);
    }

    /**
     * Delete Project Measurement Marker
     * 計測マーカーを削除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProjectMeasurementMarkerWithHttpInfo(String projectUuid, String measurementMarkerUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectMeasurementMarkerValidateBeforeCall(projectUuid, measurementMarkerUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Project Measurement Marker (asynchronously)
     * 計測マーカーを削除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectMeasurementMarkerAsync(String projectUuid, String measurementMarkerUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectMeasurementMarkerValidateBeforeCall(projectUuid, measurementMarkerUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDCall(String projectUuid, String measurementUuid, String measurementMarkerUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()))
            .replace("{" + "measurement_marker_uuid" + "}", localVarApiClient.escapeString(measurementMarkerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDValidateBeforeCall(String projectUuid, String measurementUuid, String measurementMarkerUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling deleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling deleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(Async)");
        }

        // verify the required parameter 'measurementMarkerUuid' is set
        if (measurementMarkerUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementMarkerUuid' when calling deleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(Async)");
        }

        return deleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDCall(projectUuid, measurementUuid, measurementMarkerUuid, _callback);

    }

    /**
     * Delete Project Measurement Marker using Measurement UUID
     * 計測マーカーを削除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(String projectUuid, String measurementUuid, String measurementMarkerUuid) throws ApiException {
        deleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(projectUuid, measurementUuid, measurementMarkerUuid);
    }

    /**
     * Delete Project Measurement Marker using Measurement UUID
     * 計測マーカーを削除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(String projectUuid, String measurementUuid, String measurementMarkerUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDValidateBeforeCall(projectUuid, measurementUuid, measurementMarkerUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Project Measurement Marker using Measurement UUID (asynchronously)
     * 計測マーカーを削除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDAsync(String projectUuid, String measurementUuid, String measurementMarkerUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDValidateBeforeCall(projectUuid, measurementUuid, measurementMarkerUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProjectMeasurementMarkers
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectMeasurementMarkersCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectMeasurementMarkersValidateBeforeCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling deleteProjectMeasurementMarkers(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling deleteProjectMeasurementMarkers(Async)");
        }

        return deleteProjectMeasurementMarkersCall(projectUuid, measurementUuid, _callback);

    }

    /**
     * Delete Project Measurement Markers by Measurement UUID
     * 計測マーカーを削除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProjectMeasurementMarkers(String projectUuid, String measurementUuid) throws ApiException {
        deleteProjectMeasurementMarkersWithHttpInfo(projectUuid, measurementUuid);
    }

    /**
     * Delete Project Measurement Markers by Measurement UUID
     * 計測マーカーを削除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProjectMeasurementMarkersWithHttpInfo(String projectUuid, String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectMeasurementMarkersValidateBeforeCall(projectUuid, measurementUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Project Measurement Markers by Measurement UUID (asynchronously)
     * 計測マーカーを削除します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectMeasurementMarkersAsync(String projectUuid, String measurementUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectMeasurementMarkersValidateBeforeCall(projectUuid, measurementUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMeasurementMarker
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMeasurementMarkerCall(String measurementMarkerUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/markers/{measurement_marker_uuid}"
            .replace("{" + "measurement_marker_uuid" + "}", localVarApiClient.escapeString(measurementMarkerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeasurementMarkerValidateBeforeCall(String measurementMarkerUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementMarkerUuid' is set
        if (measurementMarkerUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementMarkerUuid' when calling getMeasurementMarker(Async)");
        }

        return getMeasurementMarkerCall(measurementMarkerUuid, _callback);

    }

    /**
     * Get Measurement Marker
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを取得します。
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @return MeasurementMarker
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasurementMarker getMeasurementMarker(String measurementMarkerUuid) throws ApiException {
        ApiResponse<MeasurementMarker> localVarResp = getMeasurementMarkerWithHttpInfo(measurementMarkerUuid);
        return localVarResp.getData();
    }

    /**
     * Get Measurement Marker
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを取得します。
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @return ApiResponse&lt;MeasurementMarker&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasurementMarker> getMeasurementMarkerWithHttpInfo(String measurementMarkerUuid) throws ApiException {
        okhttp3.Call localVarCall = getMeasurementMarkerValidateBeforeCall(measurementMarkerUuid, null);
        Type localVarReturnType = new TypeToken<MeasurementMarker>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Measurement Marker (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを取得します。
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMeasurementMarkerAsync(String measurementMarkerUuid, final ApiCallback<MeasurementMarker> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeasurementMarkerValidateBeforeCall(measurementMarkerUuid, _callback);
        Type localVarReturnType = new TypeToken<MeasurementMarker>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMeasurementMarkerWithMeasurementUUIDAndMarkerUUID
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDCall(String measurementUuid, String measurementMarkerUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()))
            .replace("{" + "measurement_marker_uuid" + "}", localVarApiClient.escapeString(measurementMarkerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDValidateBeforeCall(String measurementUuid, String measurementMarkerUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling getMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(Async)");
        }

        // verify the required parameter 'measurementMarkerUuid' is set
        if (measurementMarkerUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementMarkerUuid' when calling getMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(Async)");
        }

        return getMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDCall(measurementUuid, measurementMarkerUuid, _callback);

    }

    /**
     * Get Measurement Marker using Measurement UUID
     * **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @return MeasurementMarker
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasurementMarker getMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(String measurementUuid, String measurementMarkerUuid) throws ApiException {
        ApiResponse<MeasurementMarker> localVarResp = getMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(measurementUuid, measurementMarkerUuid);
        return localVarResp.getData();
    }

    /**
     * Get Measurement Marker using Measurement UUID
     * **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @return ApiResponse&lt;MeasurementMarker&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasurementMarker> getMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(String measurementUuid, String measurementMarkerUuid) throws ApiException {
        okhttp3.Call localVarCall = getMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDValidateBeforeCall(measurementUuid, measurementMarkerUuid, null);
        Type localVarReturnType = new TypeToken<MeasurementMarker>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Measurement Marker using Measurement UUID (asynchronously)
     * **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDAsync(String measurementUuid, String measurementMarkerUuid, final ApiCallback<MeasurementMarker> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDValidateBeforeCall(measurementUuid, measurementMarkerUuid, _callback);
        Type localVarReturnType = new TypeToken<MeasurementMarker>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMeasurementMarkersWithMeasurementUUID
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMeasurementMarkersWithMeasurementUUIDCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}/markers"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeasurementMarkersWithMeasurementUUIDValidateBeforeCall(String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling getMeasurementMarkersWithMeasurementUUID(Async)");
        }

        return getMeasurementMarkersWithMeasurementUUIDCall(measurementUuid, _callback);

    }

    /**
     * List Measurement Markers by Measurement UUID
     * (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
     * @param measurementUuid 計測のUUID (required)
     * @return MeasurementMarkersWithoutPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasurementMarkersWithoutPage getMeasurementMarkersWithMeasurementUUID(String measurementUuid) throws ApiException {
        ApiResponse<MeasurementMarkersWithoutPage> localVarResp = getMeasurementMarkersWithMeasurementUUIDWithHttpInfo(measurementUuid);
        return localVarResp.getData();
    }

    /**
     * List Measurement Markers by Measurement UUID
     * (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;MeasurementMarkersWithoutPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasurementMarkersWithoutPage> getMeasurementMarkersWithMeasurementUUIDWithHttpInfo(String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = getMeasurementMarkersWithMeasurementUUIDValidateBeforeCall(measurementUuid, null);
        Type localVarReturnType = new TypeToken<MeasurementMarkersWithoutPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Measurement Markers by Measurement UUID (asynchronously)
     * (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMeasurementMarkersWithMeasurementUUIDAsync(String measurementUuid, final ApiCallback<MeasurementMarkersWithoutPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeasurementMarkersWithMeasurementUUIDValidateBeforeCall(measurementUuid, _callback);
        Type localVarReturnType = new TypeToken<MeasurementMarkersWithoutPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectMeasurementMarker
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMeasurementMarkerCall(String projectUuid, String measurementMarkerUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/markers/{measurement_marker_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_marker_uuid" + "}", localVarApiClient.escapeString(measurementMarkerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectMeasurementMarkerValidateBeforeCall(String projectUuid, String measurementMarkerUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling getProjectMeasurementMarker(Async)");
        }

        // verify the required parameter 'measurementMarkerUuid' is set
        if (measurementMarkerUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementMarkerUuid' when calling getProjectMeasurementMarker(Async)");
        }

        return getProjectMeasurementMarkerCall(projectUuid, measurementMarkerUuid, _callback);

    }

    /**
     * Get Project Measurement Marker
     * 計測マーカーを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @return MeasurementMarker
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MeasurementMarker getProjectMeasurementMarker(String projectUuid, String measurementMarkerUuid) throws ApiException {
        ApiResponse<MeasurementMarker> localVarResp = getProjectMeasurementMarkerWithHttpInfo(projectUuid, measurementMarkerUuid);
        return localVarResp.getData();
    }

    /**
     * Get Project Measurement Marker
     * 計測マーカーを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @return ApiResponse&lt;MeasurementMarker&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeasurementMarker> getProjectMeasurementMarkerWithHttpInfo(String projectUuid, String measurementMarkerUuid) throws ApiException {
        okhttp3.Call localVarCall = getProjectMeasurementMarkerValidateBeforeCall(projectUuid, measurementMarkerUuid, null);
        Type localVarReturnType = new TypeToken<MeasurementMarker>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Project Measurement Marker (asynchronously)
     * 計測マーカーを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMeasurementMarkerAsync(String projectUuid, String measurementMarkerUuid, final ApiCallback<MeasurementMarker> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectMeasurementMarkerValidateBeforeCall(projectUuid, measurementMarkerUuid, _callback);
        Type localVarReturnType = new TypeToken<MeasurementMarker>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDCall(String projectUuid, String measurementUuid, String measurementMarkerUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()))
            .replace("{" + "measurement_marker_uuid" + "}", localVarApiClient.escapeString(measurementMarkerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDValidateBeforeCall(String projectUuid, String measurementUuid, String measurementMarkerUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling getProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling getProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(Async)");
        }

        // verify the required parameter 'measurementMarkerUuid' is set
        if (measurementMarkerUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementMarkerUuid' when calling getProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(Async)");
        }

        return getProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDCall(projectUuid, measurementUuid, measurementMarkerUuid, _callback);

    }

    /**
     * Get Project Measurement Marker using Measurement UUID
     * **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @return MeasurementMarker
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasurementMarker getProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(String projectUuid, String measurementUuid, String measurementMarkerUuid) throws ApiException {
        ApiResponse<MeasurementMarker> localVarResp = getProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(projectUuid, measurementUuid, measurementMarkerUuid);
        return localVarResp.getData();
    }

    /**
     * Get Project Measurement Marker using Measurement UUID
     * **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @return ApiResponse&lt;MeasurementMarker&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasurementMarker> getProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(String projectUuid, String measurementUuid, String measurementMarkerUuid) throws ApiException {
        okhttp3.Call localVarCall = getProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDValidateBeforeCall(projectUuid, measurementUuid, measurementMarkerUuid, null);
        Type localVarReturnType = new TypeToken<MeasurementMarker>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Project Measurement Marker using Measurement UUID (asynchronously)
     * **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDAsync(String projectUuid, String measurementUuid, String measurementMarkerUuid, final ApiCallback<MeasurementMarker> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDValidateBeforeCall(projectUuid, measurementUuid, measurementMarkerUuid, _callback);
        Type localVarReturnType = new TypeToken<MeasurementMarker>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectMeasurementMarkersWithMeasurementUUID
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getProjectMeasurementMarkersWithMeasurementUUIDCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectMeasurementMarkersWithMeasurementUUIDValidateBeforeCall(String projectUuid, String measurementUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling getProjectMeasurementMarkersWithMeasurementUUID(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling getProjectMeasurementMarkersWithMeasurementUUID(Async)");
        }

        return getProjectMeasurementMarkersWithMeasurementUUIDCall(projectUuid, measurementUuid, _callback);

    }

    /**
     * List Project Measurement Markers by Measurement UUID
     * (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @return MeasurementMarkersWithoutPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasurementMarkersWithoutPage getProjectMeasurementMarkersWithMeasurementUUID(String projectUuid, String measurementUuid) throws ApiException {
        ApiResponse<MeasurementMarkersWithoutPage> localVarResp = getProjectMeasurementMarkersWithMeasurementUUIDWithHttpInfo(projectUuid, measurementUuid);
        return localVarResp.getData();
    }

    /**
     * List Project Measurement Markers by Measurement UUID
     * (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @return ApiResponse&lt;MeasurementMarkersWithoutPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasurementMarkersWithoutPage> getProjectMeasurementMarkersWithMeasurementUUIDWithHttpInfo(String projectUuid, String measurementUuid) throws ApiException {
        okhttp3.Call localVarCall = getProjectMeasurementMarkersWithMeasurementUUIDValidateBeforeCall(projectUuid, measurementUuid, null);
        Type localVarReturnType = new TypeToken<MeasurementMarkersWithoutPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Project Measurement Markers by Measurement UUID (asynchronously)
     * (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getProjectMeasurementMarkersWithMeasurementUUIDAsync(String projectUuid, String measurementUuid, final ApiCallback<MeasurementMarkersWithoutPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectMeasurementMarkersWithMeasurementUUIDValidateBeforeCall(projectUuid, measurementUuid, _callback);
        Type localVarReturnType = new TypeToken<MeasurementMarkersWithoutPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMeasurementMarkers
     * @param uuid 計測マーカーのUUID (optional)
     * @param name 計測マーカーの名前 (optional)
     * @param startUnixMicro Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)
     * @param endUnixMicro Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)
     * @param tagLessThanKeyGreaterThan タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | ------------------ | ---------------- |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)
     * @param exclamationTagLessThanKeyGreaterThan タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to base_time)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listMeasurementMarkersCall(List<String> uuid, List<String> name, Long startUnixMicro, Long endUnixMicro, List<String> tagLessThanKeyGreaterThan, List<String> exclamationTagLessThanKeyGreaterThan, Integer limit, String sort, Integer page, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements/markers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "uuid", uuid));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (startUnixMicro != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_unix_micro", startUnixMicro));
        }

        if (endUnixMicro != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_unix_micro", endUnixMicro));
        }

        if (tagLessThanKeyGreaterThan != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tag.&lt;key&gt;", tagLessThanKeyGreaterThan));
        }

        if (exclamationTagLessThanKeyGreaterThan != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!tag.&lt;key&gt;", exclamationTagLessThanKeyGreaterThan));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMeasurementMarkersValidateBeforeCall(List<String> uuid, List<String> name, Long startUnixMicro, Long endUnixMicro, List<String> tagLessThanKeyGreaterThan, List<String> exclamationTagLessThanKeyGreaterThan, Integer limit, String sort, Integer page, String order, final ApiCallback _callback) throws ApiException {
        return listMeasurementMarkersCall(uuid, name, startUnixMicro, endUnixMicro, tagLessThanKeyGreaterThan, exclamationTagLessThanKeyGreaterThan, limit, sort, page, order, _callback);

    }

    /**
     * List Measurement Markers
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers&#x60; を使用してください） 計測マーカーのリストを取得します。
     * @param uuid 計測マーカーのUUID (optional)
     * @param name 計測マーカーの名前 (optional)
     * @param startUnixMicro Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)
     * @param endUnixMicro Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)
     * @param tagLessThanKeyGreaterThan タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | ------------------ | ---------------- |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)
     * @param exclamationTagLessThanKeyGreaterThan タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to base_time)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @return MeasurementMarkers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasurementMarkers listMeasurementMarkers(List<String> uuid, List<String> name, Long startUnixMicro, Long endUnixMicro, List<String> tagLessThanKeyGreaterThan, List<String> exclamationTagLessThanKeyGreaterThan, Integer limit, String sort, Integer page, String order) throws ApiException {
        ApiResponse<MeasurementMarkers> localVarResp = listMeasurementMarkersWithHttpInfo(uuid, name, startUnixMicro, endUnixMicro, tagLessThanKeyGreaterThan, exclamationTagLessThanKeyGreaterThan, limit, sort, page, order);
        return localVarResp.getData();
    }

    /**
     * List Measurement Markers
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers&#x60; を使用してください） 計測マーカーのリストを取得します。
     * @param uuid 計測マーカーのUUID (optional)
     * @param name 計測マーカーの名前 (optional)
     * @param startUnixMicro Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)
     * @param endUnixMicro Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)
     * @param tagLessThanKeyGreaterThan タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | ------------------ | ---------------- |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)
     * @param exclamationTagLessThanKeyGreaterThan タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to base_time)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @return ApiResponse&lt;MeasurementMarkers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasurementMarkers> listMeasurementMarkersWithHttpInfo(List<String> uuid, List<String> name, Long startUnixMicro, Long endUnixMicro, List<String> tagLessThanKeyGreaterThan, List<String> exclamationTagLessThanKeyGreaterThan, Integer limit, String sort, Integer page, String order) throws ApiException {
        okhttp3.Call localVarCall = listMeasurementMarkersValidateBeforeCall(uuid, name, startUnixMicro, endUnixMicro, tagLessThanKeyGreaterThan, exclamationTagLessThanKeyGreaterThan, limit, sort, page, order, null);
        Type localVarReturnType = new TypeToken<MeasurementMarkers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Measurement Markers (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers&#x60; を使用してください） 計測マーカーのリストを取得します。
     * @param uuid 計測マーカーのUUID (optional)
     * @param name 計測マーカーの名前 (optional)
     * @param startUnixMicro Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)
     * @param endUnixMicro Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)
     * @param tagLessThanKeyGreaterThan タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | ------------------ | ---------------- |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)
     * @param exclamationTagLessThanKeyGreaterThan タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to base_time)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listMeasurementMarkersAsync(List<String> uuid, List<String> name, Long startUnixMicro, Long endUnixMicro, List<String> tagLessThanKeyGreaterThan, List<String> exclamationTagLessThanKeyGreaterThan, Integer limit, String sort, Integer page, String order, final ApiCallback<MeasurementMarkers> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMeasurementMarkersValidateBeforeCall(uuid, name, startUnixMicro, endUnixMicro, tagLessThanKeyGreaterThan, exclamationTagLessThanKeyGreaterThan, limit, sort, page, order, _callback);
        Type localVarReturnType = new TypeToken<MeasurementMarkers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProjectMeasurementMarkers
     * @param projectUuid プロジェクトのUUID (required)
     * @param uuid 計測マーカーのUUID (optional)
     * @param name 計測マーカーの名前 (optional)
     * @param startUnixMicro Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)
     * @param endUnixMicro Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)
     * @param tagLessThanKeyGreaterThan タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | ------------------ | ---------------- |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)
     * @param exclamationTagLessThanKeyGreaterThan タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to base_time)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectMeasurementMarkersCall(String projectUuid, List<String> uuid, List<String> name, Long startUnixMicro, Long endUnixMicro, List<String> tagLessThanKeyGreaterThan, List<String> exclamationTagLessThanKeyGreaterThan, Integer limit, String sort, Integer page, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/markers"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "uuid", uuid));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (startUnixMicro != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_unix_micro", startUnixMicro));
        }

        if (endUnixMicro != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_unix_micro", endUnixMicro));
        }

        if (tagLessThanKeyGreaterThan != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tag.&lt;key&gt;", tagLessThanKeyGreaterThan));
        }

        if (exclamationTagLessThanKeyGreaterThan != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!tag.&lt;key&gt;", exclamationTagLessThanKeyGreaterThan));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectMeasurementMarkersValidateBeforeCall(String projectUuid, List<String> uuid, List<String> name, Long startUnixMicro, Long endUnixMicro, List<String> tagLessThanKeyGreaterThan, List<String> exclamationTagLessThanKeyGreaterThan, Integer limit, String sort, Integer page, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling listProjectMeasurementMarkers(Async)");
        }

        return listProjectMeasurementMarkersCall(projectUuid, uuid, name, startUnixMicro, endUnixMicro, tagLessThanKeyGreaterThan, exclamationTagLessThanKeyGreaterThan, limit, sort, page, order, _callback);

    }

    /**
     * List Project Measurement Markers
     * 計測マーカーのリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param uuid 計測マーカーのUUID (optional)
     * @param name 計測マーカーの名前 (optional)
     * @param startUnixMicro Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)
     * @param endUnixMicro Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)
     * @param tagLessThanKeyGreaterThan タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | ------------------ | ---------------- |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)
     * @param exclamationTagLessThanKeyGreaterThan タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to base_time)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @return MeasurementMarkers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MeasurementMarkers listProjectMeasurementMarkers(String projectUuid, List<String> uuid, List<String> name, Long startUnixMicro, Long endUnixMicro, List<String> tagLessThanKeyGreaterThan, List<String> exclamationTagLessThanKeyGreaterThan, Integer limit, String sort, Integer page, String order) throws ApiException {
        ApiResponse<MeasurementMarkers> localVarResp = listProjectMeasurementMarkersWithHttpInfo(projectUuid, uuid, name, startUnixMicro, endUnixMicro, tagLessThanKeyGreaterThan, exclamationTagLessThanKeyGreaterThan, limit, sort, page, order);
        return localVarResp.getData();
    }

    /**
     * List Project Measurement Markers
     * 計測マーカーのリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param uuid 計測マーカーのUUID (optional)
     * @param name 計測マーカーの名前 (optional)
     * @param startUnixMicro Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)
     * @param endUnixMicro Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)
     * @param tagLessThanKeyGreaterThan タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | ------------------ | ---------------- |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)
     * @param exclamationTagLessThanKeyGreaterThan タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to base_time)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @return ApiResponse&lt;MeasurementMarkers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeasurementMarkers> listProjectMeasurementMarkersWithHttpInfo(String projectUuid, List<String> uuid, List<String> name, Long startUnixMicro, Long endUnixMicro, List<String> tagLessThanKeyGreaterThan, List<String> exclamationTagLessThanKeyGreaterThan, Integer limit, String sort, Integer page, String order) throws ApiException {
        okhttp3.Call localVarCall = listProjectMeasurementMarkersValidateBeforeCall(projectUuid, uuid, name, startUnixMicro, endUnixMicro, tagLessThanKeyGreaterThan, exclamationTagLessThanKeyGreaterThan, limit, sort, page, order, null);
        Type localVarReturnType = new TypeToken<MeasurementMarkers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Project Measurement Markers (asynchronously)
     * 計測マーカーのリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param uuid 計測マーカーのUUID (optional)
     * @param name 計測マーカーの名前 (optional)
     * @param startUnixMicro Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)
     * @param endUnixMicro Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)
     * @param tagLessThanKeyGreaterThan タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | ------------------ | ---------------- |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)
     * @param exclamationTagLessThanKeyGreaterThan タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param sort 並べ替えに使用するキー (optional, default to base_time)
     * @param page 取得するページの番号 (optional)
     * @param order 並べ替えの順序 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectMeasurementMarkersAsync(String projectUuid, List<String> uuid, List<String> name, Long startUnixMicro, Long endUnixMicro, List<String> tagLessThanKeyGreaterThan, List<String> exclamationTagLessThanKeyGreaterThan, Integer limit, String sort, Integer page, String order, final ApiCallback<MeasurementMarkers> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectMeasurementMarkersValidateBeforeCall(projectUuid, uuid, name, startUnixMicro, endUnixMicro, tagLessThanKeyGreaterThan, exclamationTagLessThanKeyGreaterThan, limit, sort, page, order, _callback);
        Type localVarReturnType = new TypeToken<MeasurementMarkers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMeasurementMarker
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param measurementMarkerPutRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateMeasurementMarkerCall(String measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = measurementMarkerPutRequest;

        // create path and map variables
        String localVarPath = "/v1/measurements/markers/{measurement_marker_uuid}"
            .replace("{" + "measurement_marker_uuid" + "}", localVarApiClient.escapeString(measurementMarkerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMeasurementMarkerValidateBeforeCall(String measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementMarkerUuid' is set
        if (measurementMarkerUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementMarkerUuid' when calling updateMeasurementMarker(Async)");
        }

        return updateMeasurementMarkerCall(measurementMarkerUuid, measurementMarkerPutRequest, _callback);

    }

    /**
     * Update Measurement Marker
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを更新します。
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param measurementMarkerPutRequest  (optional)
     * @return MeasurementMarker
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasurementMarker updateMeasurementMarker(String measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest) throws ApiException {
        ApiResponse<MeasurementMarker> localVarResp = updateMeasurementMarkerWithHttpInfo(measurementMarkerUuid, measurementMarkerPutRequest);
        return localVarResp.getData();
    }

    /**
     * Update Measurement Marker
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを更新します。
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param measurementMarkerPutRequest  (optional)
     * @return ApiResponse&lt;MeasurementMarker&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasurementMarker> updateMeasurementMarkerWithHttpInfo(String measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMeasurementMarkerValidateBeforeCall(measurementMarkerUuid, measurementMarkerPutRequest, null);
        Type localVarReturnType = new TypeToken<MeasurementMarker>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Measurement Marker (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを更新します。
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param measurementMarkerPutRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateMeasurementMarkerAsync(String measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest, final ApiCallback<MeasurementMarker> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMeasurementMarkerValidateBeforeCall(measurementMarkerUuid, measurementMarkerPutRequest, _callback);
        Type localVarReturnType = new TypeToken<MeasurementMarker>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMeasurementMarkerWithMeasurementUUIDAndMarkerUUID
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param measurementMarkerPutRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDCall(String measurementUuid, String measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = measurementMarkerPutRequest;

        // create path and map variables
        String localVarPath = "/v1/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}"
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()))
            .replace("{" + "measurement_marker_uuid" + "}", localVarApiClient.escapeString(measurementMarkerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDValidateBeforeCall(String measurementUuid, String measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling updateMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(Async)");
        }

        // verify the required parameter 'measurementMarkerUuid' is set
        if (measurementMarkerUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementMarkerUuid' when calling updateMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(Async)");
        }

        return updateMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDCall(measurementUuid, measurementMarkerUuid, measurementMarkerPutRequest, _callback);

    }

    /**
     * Replace Measurement Marker using Measurement UUID
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーの情報を更新します。
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param measurementMarkerPutRequest  (optional)
     * @return MeasurementMarker
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MeasurementMarker updateMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(String measurementUuid, String measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest) throws ApiException {
        ApiResponse<MeasurementMarker> localVarResp = updateMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(measurementUuid, measurementMarkerUuid, measurementMarkerPutRequest);
        return localVarResp.getData();
    }

    /**
     * Replace Measurement Marker using Measurement UUID
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーの情報を更新します。
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param measurementMarkerPutRequest  (optional)
     * @return ApiResponse&lt;MeasurementMarker&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MeasurementMarker> updateMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(String measurementUuid, String measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDValidateBeforeCall(measurementUuid, measurementMarkerUuid, measurementMarkerPutRequest, null);
        Type localVarReturnType = new TypeToken<MeasurementMarker>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace Measurement Marker using Measurement UUID (asynchronously)
     * （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーの情報を更新します。
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param measurementMarkerPutRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDAsync(String measurementUuid, String measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest, final ApiCallback<MeasurementMarker> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDValidateBeforeCall(measurementUuid, measurementMarkerUuid, measurementMarkerPutRequest, _callback);
        Type localVarReturnType = new TypeToken<MeasurementMarker>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProjectMeasurementMarker
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param measurementMarkerPutRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectMeasurementMarkerCall(String projectUuid, String measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = measurementMarkerPutRequest;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/markers/{measurement_marker_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_marker_uuid" + "}", localVarApiClient.escapeString(measurementMarkerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectMeasurementMarkerValidateBeforeCall(String projectUuid, String measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling updateProjectMeasurementMarker(Async)");
        }

        // verify the required parameter 'measurementMarkerUuid' is set
        if (measurementMarkerUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementMarkerUuid' when calling updateProjectMeasurementMarker(Async)");
        }

        return updateProjectMeasurementMarkerCall(projectUuid, measurementMarkerUuid, measurementMarkerPutRequest, _callback);

    }

    /**
     * Update Project Measurement Marker
     * 計測マーカーを更新します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param measurementMarkerPutRequest  (optional)
     * @return MeasurementMarker
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MeasurementMarker updateProjectMeasurementMarker(String projectUuid, String measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest) throws ApiException {
        ApiResponse<MeasurementMarker> localVarResp = updateProjectMeasurementMarkerWithHttpInfo(projectUuid, measurementMarkerUuid, measurementMarkerPutRequest);
        return localVarResp.getData();
    }

    /**
     * Update Project Measurement Marker
     * 計測マーカーを更新します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param measurementMarkerPutRequest  (optional)
     * @return ApiResponse&lt;MeasurementMarker&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeasurementMarker> updateProjectMeasurementMarkerWithHttpInfo(String projectUuid, String measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProjectMeasurementMarkerValidateBeforeCall(projectUuid, measurementMarkerUuid, measurementMarkerPutRequest, null);
        Type localVarReturnType = new TypeToken<MeasurementMarker>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Project Measurement Marker (asynchronously)
     * 計測マーカーを更新します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param measurementMarkerPutRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectMeasurementMarkerAsync(String projectUuid, String measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest, final ApiCallback<MeasurementMarker> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectMeasurementMarkerValidateBeforeCall(projectUuid, measurementMarkerUuid, measurementMarkerPutRequest, _callback);
        Type localVarReturnType = new TypeToken<MeasurementMarker>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param measurementMarkerPutRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDCall(String projectUuid, String measurementUuid, String measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = measurementMarkerPutRequest;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "measurement_uuid" + "}", localVarApiClient.escapeString(measurementUuid.toString()))
            .replace("{" + "measurement_marker_uuid" + "}", localVarApiClient.escapeString(measurementMarkerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDValidateBeforeCall(String projectUuid, String measurementUuid, String measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling updateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(Async)");
        }

        // verify the required parameter 'measurementUuid' is set
        if (measurementUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementUuid' when calling updateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(Async)");
        }

        // verify the required parameter 'measurementMarkerUuid' is set
        if (measurementMarkerUuid == null) {
            throw new ApiException("Missing the required parameter 'measurementMarkerUuid' when calling updateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(Async)");
        }

        return updateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDCall(projectUuid, measurementUuid, measurementMarkerUuid, measurementMarkerPutRequest, _callback);

    }

    /**
     * Replace Project Measurement Marker using Measurement UUID
     * 計測マーカーの情報を更新します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param measurementMarkerPutRequest  (optional)
     * @return MeasurementMarker
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MeasurementMarker updateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(String projectUuid, String measurementUuid, String measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest) throws ApiException {
        ApiResponse<MeasurementMarker> localVarResp = updateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(projectUuid, measurementUuid, measurementMarkerUuid, measurementMarkerPutRequest);
        return localVarResp.getData();
    }

    /**
     * Replace Project Measurement Marker using Measurement UUID
     * 計測マーカーの情報を更新します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param measurementMarkerPutRequest  (optional)
     * @return ApiResponse&lt;MeasurementMarker&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeasurementMarker> updateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(String projectUuid, String measurementUuid, String measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDValidateBeforeCall(projectUuid, measurementUuid, measurementMarkerUuid, measurementMarkerPutRequest, null);
        Type localVarReturnType = new TypeToken<MeasurementMarker>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace Project Measurement Marker using Measurement UUID (asynchronously)
     * 計測マーカーの情報を更新します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measurementUuid 計測のUUID (required)
     * @param measurementMarkerUuid 計測マーカーのUUID (required)
     * @param measurementMarkerPutRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDAsync(String projectUuid, String measurementUuid, String measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest, final ApiCallback<MeasurementMarker> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDValidateBeforeCall(projectUuid, measurementUuid, measurementMarkerUuid, measurementMarkerPutRequest, _callback);
        Type localVarReturnType = new TypeToken<MeasurementMarker>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
