/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aptpod.intdash;

import com.aptpod.ApiCallback;
import com.aptpod.ApiClient;
import com.aptpod.ApiException;
import com.aptpod.ApiResponse;
import com.aptpod.Configuration;
import com.aptpod.Pair;
import com.aptpod.ProgressRequestBody;
import com.aptpod.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.HLSList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MediaHlsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MediaHlsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MediaHlsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getFMP4
     * @param measUuid 計測のUUID (required)
     * @param channel チャンネル (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getFMP4Call(String measUuid, Integer channel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/measurements/{meas_uuid}/channels/{channel}/mp4s/measurement.mp4"
            .replace("{" + "meas_uuid" + "}", localVarApiClient.escapeString(measUuid.toString()))
            .replace("{" + "channel" + "}", localVarApiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "video/mp4"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFMP4ValidateBeforeCall(String measUuid, Integer channel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measUuid' is set
        if (measUuid == null) {
            throw new ApiException("Missing the required parameter 'measUuid' when calling getFMP4(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling getFMP4(Async)");
        }

        return getFMP4Call(measUuid, channel, _callback);

    }

    /**
     * Get HLS as FMP4
     * **Deprecated** このエンドポイントの代わりに [&#x60;POST /media/videos/{video_uuid}/mp4s&#x60;](#operation/createMP4) を使用してください。 mp4リソース作成後、 &#x60;MP4&#x60;オブジェクトの &#x60;file_path&#x60;にあるPATHに従って動画を取得してください
     * @param measUuid 計測のUUID (required)
     * @param channel チャンネル (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public File getFMP4(String measUuid, Integer channel) throws ApiException {
        ApiResponse<File> localVarResp = getFMP4WithHttpInfo(measUuid, channel);
        return localVarResp.getData();
    }

    /**
     * Get HLS as FMP4
     * **Deprecated** このエンドポイントの代わりに [&#x60;POST /media/videos/{video_uuid}/mp4s&#x60;](#operation/createMP4) を使用してください。 mp4リソース作成後、 &#x60;MP4&#x60;オブジェクトの &#x60;file_path&#x60;にあるPATHに従って動画を取得してください
     * @param measUuid 計測のUUID (required)
     * @param channel チャンネル (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> getFMP4WithHttpInfo(String measUuid, Integer channel) throws ApiException {
        okhttp3.Call localVarCall = getFMP4ValidateBeforeCall(measUuid, channel, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get HLS as FMP4 (asynchronously)
     * **Deprecated** このエンドポイントの代わりに [&#x60;POST /media/videos/{video_uuid}/mp4s&#x60;](#operation/createMP4) を使用してください。 mp4リソース作成後、 &#x60;MP4&#x60;オブジェクトの &#x60;file_path&#x60;にあるPATHに従って動画を取得してください
     * @param measUuid 計測のUUID (required)
     * @param channel チャンネル (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getFMP4Async(String measUuid, Integer channel, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFMP4ValidateBeforeCall(measUuid, channel, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHLSes
     * @param start 取得対象範囲の始点（マイクロ秒単位のUNIX時刻） (optional)
     * @param end 取得対象範囲の終点（マイクロ秒単位のUNIX時刻） (optional)
     * @param edgeUuid エッジのUUID (optional)
     * @param channel チャンネル (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getHLSesCall(Integer start, Integer end, String edgeUuid, Integer channel, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/hlses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (edgeUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("edge_uuid", edgeUuid));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHLSesValidateBeforeCall(Integer start, Integer end, String edgeUuid, Integer channel, Integer limit, final ApiCallback _callback) throws ApiException {
        return getHLSesCall(start, end, edgeUuid, channel, limit, _callback);

    }

    /**
     * List HLSes
     * **Deprecated** このエンドポイントではなく [&#x60;GET /media/videos&#x60;](#operation/getVideos) を使用してください
     * @param start 取得対象範囲の始点（マイクロ秒単位のUNIX時刻） (optional)
     * @param end 取得対象範囲の終点（マイクロ秒単位のUNIX時刻） (optional)
     * @param edgeUuid エッジのUUID (optional)
     * @param channel チャンネル (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @return HLSList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public HLSList getHLSes(Integer start, Integer end, String edgeUuid, Integer channel, Integer limit) throws ApiException {
        ApiResponse<HLSList> localVarResp = getHLSesWithHttpInfo(start, end, edgeUuid, channel, limit);
        return localVarResp.getData();
    }

    /**
     * List HLSes
     * **Deprecated** このエンドポイントではなく [&#x60;GET /media/videos&#x60;](#operation/getVideos) を使用してください
     * @param start 取得対象範囲の始点（マイクロ秒単位のUNIX時刻） (optional)
     * @param end 取得対象範囲の終点（マイクロ秒単位のUNIX時刻） (optional)
     * @param edgeUuid エッジのUUID (optional)
     * @param channel チャンネル (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @return ApiResponse&lt;HLSList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<HLSList> getHLSesWithHttpInfo(Integer start, Integer end, String edgeUuid, Integer channel, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getHLSesValidateBeforeCall(start, end, edgeUuid, channel, limit, null);
        Type localVarReturnType = new TypeToken<HLSList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List HLSes (asynchronously)
     * **Deprecated** このエンドポイントではなく [&#x60;GET /media/videos&#x60;](#operation/getVideos) を使用してください
     * @param start 取得対象範囲の始点（マイクロ秒単位のUNIX時刻） (optional)
     * @param end 取得対象範囲の終点（マイクロ秒単位のUNIX時刻） (optional)
     * @param edgeUuid エッジのUUID (optional)
     * @param channel チャンネル (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getHLSesAsync(Integer start, Integer end, String edgeUuid, Integer channel, Integer limit, final ApiCallback<HLSList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHLSesValidateBeforeCall(start, end, edgeUuid, channel, limit, _callback);
        Type localVarReturnType = new TypeToken<HLSList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlaylist
     * @param measUuid 計測のUUID (required)
     * @param channel チャンネル (required)
     * @param forceEnd &#x60;true&#x60; にすると、取得するm3u8形式のプレイリストに強制的にEXT-X-ENDLISTを追加します。 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPlaylistCall(String measUuid, Integer channel, Boolean forceEnd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/measurements/{meas_uuid}/channels/{channel}/hlses/playlist.m3u8"
            .replace("{" + "meas_uuid" + "}", localVarApiClient.escapeString(measUuid.toString()))
            .replace("{" + "channel" + "}", localVarApiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (forceEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force_end", forceEnd));
        }

        final String[] localVarAccepts = {
            "application/vnd.apple.mpegurl"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlaylistValidateBeforeCall(String measUuid, Integer channel, Boolean forceEnd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measUuid' is set
        if (measUuid == null) {
            throw new ApiException("Missing the required parameter 'measUuid' when calling getPlaylist(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling getPlaylist(Async)");
        }

        return getPlaylistCall(measUuid, channel, forceEnd, _callback);

    }

    /**
     * Get HLS Playlist
     * **Depricated** このエンドポイントの代わりに、Videoオブジェクトの &#x60;hls&#x60;にあるPATHにしたがってPlaylistを取得してください。
     * @param measUuid 計測のUUID (required)
     * @param channel チャンネル (required)
     * @param forceEnd &#x60;true&#x60; にすると、取得するm3u8形式のプレイリストに強制的にEXT-X-ENDLISTを追加します。 (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public String getPlaylist(String measUuid, Integer channel, Boolean forceEnd) throws ApiException {
        ApiResponse<String> localVarResp = getPlaylistWithHttpInfo(measUuid, channel, forceEnd);
        return localVarResp.getData();
    }

    /**
     * Get HLS Playlist
     * **Depricated** このエンドポイントの代わりに、Videoオブジェクトの &#x60;hls&#x60;にあるPATHにしたがってPlaylistを取得してください。
     * @param measUuid 計測のUUID (required)
     * @param channel チャンネル (required)
     * @param forceEnd &#x60;true&#x60; にすると、取得するm3u8形式のプレイリストに強制的にEXT-X-ENDLISTを追加します。 (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<String> getPlaylistWithHttpInfo(String measUuid, Integer channel, Boolean forceEnd) throws ApiException {
        okhttp3.Call localVarCall = getPlaylistValidateBeforeCall(measUuid, channel, forceEnd, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get HLS Playlist (asynchronously)
     * **Depricated** このエンドポイントの代わりに、Videoオブジェクトの &#x60;hls&#x60;にあるPATHにしたがってPlaylistを取得してください。
     * @param measUuid 計測のUUID (required)
     * @param channel チャンネル (required)
     * @param forceEnd &#x60;true&#x60; にすると、取得するm3u8形式のプレイリストに強制的にEXT-X-ENDLISTを追加します。 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPlaylistAsync(String measUuid, Integer channel, Boolean forceEnd, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlaylistValidateBeforeCall(measUuid, channel, forceEnd, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectFMP4
     * @param projectUuid プロジェクトのUUID (required)
     * @param measUuid 計測のUUID (required)
     * @param channel チャンネル (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getProjectFMP4Call(String projectUuid, String measUuid, Integer channel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/projects/{project_uuid}/measurements/{meas_uuid}/channels/{channel}/mp4s/measurement.mp4"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "meas_uuid" + "}", localVarApiClient.escapeString(measUuid.toString()))
            .replace("{" + "channel" + "}", localVarApiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "video/mp4"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectFMP4ValidateBeforeCall(String projectUuid, String measUuid, Integer channel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling getProjectFMP4(Async)");
        }

        // verify the required parameter 'measUuid' is set
        if (measUuid == null) {
            throw new ApiException("Missing the required parameter 'measUuid' when calling getProjectFMP4(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling getProjectFMP4(Async)");
        }

        return getProjectFMP4Call(projectUuid, measUuid, channel, _callback);

    }

    /**
     * Get Project HLS as FMP4
     * **Deprecated** このエンドポイントの代わりに [&#x60;POST /media/videos/{video_uuid}/mp4s&#x60;](#operation/createMP4) を使用してください。 mp4リソース作成後、 &#x60;MP4&#x60;オブジェクトの &#x60;file_path&#x60;にあるPATHに従って動画を取得してください
     * @param projectUuid プロジェクトのUUID (required)
     * @param measUuid 計測のUUID (required)
     * @param channel チャンネル (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public File getProjectFMP4(String projectUuid, String measUuid, Integer channel) throws ApiException {
        ApiResponse<File> localVarResp = getProjectFMP4WithHttpInfo(projectUuid, measUuid, channel);
        return localVarResp.getData();
    }

    /**
     * Get Project HLS as FMP4
     * **Deprecated** このエンドポイントの代わりに [&#x60;POST /media/videos/{video_uuid}/mp4s&#x60;](#operation/createMP4) を使用してください。 mp4リソース作成後、 &#x60;MP4&#x60;オブジェクトの &#x60;file_path&#x60;にあるPATHに従って動画を取得してください
     * @param projectUuid プロジェクトのUUID (required)
     * @param measUuid 計測のUUID (required)
     * @param channel チャンネル (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> getProjectFMP4WithHttpInfo(String projectUuid, String measUuid, Integer channel) throws ApiException {
        okhttp3.Call localVarCall = getProjectFMP4ValidateBeforeCall(projectUuid, measUuid, channel, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Project HLS as FMP4 (asynchronously)
     * **Deprecated** このエンドポイントの代わりに [&#x60;POST /media/videos/{video_uuid}/mp4s&#x60;](#operation/createMP4) を使用してください。 mp4リソース作成後、 &#x60;MP4&#x60;オブジェクトの &#x60;file_path&#x60;にあるPATHに従って動画を取得してください
     * @param projectUuid プロジェクトのUUID (required)
     * @param measUuid 計測のUUID (required)
     * @param channel チャンネル (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getProjectFMP4Async(String projectUuid, String measUuid, Integer channel, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectFMP4ValidateBeforeCall(projectUuid, measUuid, channel, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectHLSes
     * @param projectUuid プロジェクトのUUID (required)
     * @param start 取得対象範囲の始点（マイクロ秒単位のUNIX時刻） (optional)
     * @param end 取得対象範囲の終点（マイクロ秒単位のUNIX時刻） (optional)
     * @param edgeUuid エッジのUUID (optional)
     * @param channel チャンネル (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getProjectHLSesCall(String projectUuid, Integer start, Integer end, String edgeUuid, Integer channel, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/projects/{project_uuid}/hlses"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (edgeUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("edge_uuid", edgeUuid));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectHLSesValidateBeforeCall(String projectUuid, Integer start, Integer end, String edgeUuid, Integer channel, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling getProjectHLSes(Async)");
        }

        return getProjectHLSesCall(projectUuid, start, end, edgeUuid, channel, limit, _callback);

    }

    /**
     * List Project HLSes
     * **Deprecated** このエンドポイントではなく [&#x60;GET /media/videos&#x60;](#operation/getVideos) を使用してください
     * @param projectUuid プロジェクトのUUID (required)
     * @param start 取得対象範囲の始点（マイクロ秒単位のUNIX時刻） (optional)
     * @param end 取得対象範囲の終点（マイクロ秒単位のUNIX時刻） (optional)
     * @param edgeUuid エッジのUUID (optional)
     * @param channel チャンネル (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @return HLSList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public HLSList getProjectHLSes(String projectUuid, Integer start, Integer end, String edgeUuid, Integer channel, Integer limit) throws ApiException {
        ApiResponse<HLSList> localVarResp = getProjectHLSesWithHttpInfo(projectUuid, start, end, edgeUuid, channel, limit);
        return localVarResp.getData();
    }

    /**
     * List Project HLSes
     * **Deprecated** このエンドポイントではなく [&#x60;GET /media/videos&#x60;](#operation/getVideos) を使用してください
     * @param projectUuid プロジェクトのUUID (required)
     * @param start 取得対象範囲の始点（マイクロ秒単位のUNIX時刻） (optional)
     * @param end 取得対象範囲の終点（マイクロ秒単位のUNIX時刻） (optional)
     * @param edgeUuid エッジのUUID (optional)
     * @param channel チャンネル (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @return ApiResponse&lt;HLSList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<HLSList> getProjectHLSesWithHttpInfo(String projectUuid, Integer start, Integer end, String edgeUuid, Integer channel, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getProjectHLSesValidateBeforeCall(projectUuid, start, end, edgeUuid, channel, limit, null);
        Type localVarReturnType = new TypeToken<HLSList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Project HLSes (asynchronously)
     * **Deprecated** このエンドポイントではなく [&#x60;GET /media/videos&#x60;](#operation/getVideos) を使用してください
     * @param projectUuid プロジェクトのUUID (required)
     * @param start 取得対象範囲の始点（マイクロ秒単位のUNIX時刻） (optional)
     * @param end 取得対象範囲の終点（マイクロ秒単位のUNIX時刻） (optional)
     * @param edgeUuid エッジのUUID (optional)
     * @param channel チャンネル (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getProjectHLSesAsync(String projectUuid, Integer start, Integer end, String edgeUuid, Integer channel, Integer limit, final ApiCallback<HLSList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectHLSesValidateBeforeCall(projectUuid, start, end, edgeUuid, channel, limit, _callback);
        Type localVarReturnType = new TypeToken<HLSList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectPlaylist
     * @param projectUuid プロジェクトのUUID (required)
     * @param measUuid 計測のUUID (required)
     * @param channel チャンネル (required)
     * @param forceEnd &#x60;true&#x60; にすると、取得するm3u8形式のプレイリストに強制的にEXT-X-ENDLISTを追加します。 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getProjectPlaylistCall(String projectUuid, String measUuid, Integer channel, Boolean forceEnd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/projects/{project_uuid}/measurements/{meas_uuid}/channels/{channel}/hlses/playlist.m3u8"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()))
            .replace("{" + "meas_uuid" + "}", localVarApiClient.escapeString(measUuid.toString()))
            .replace("{" + "channel" + "}", localVarApiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (forceEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force_end", forceEnd));
        }

        final String[] localVarAccepts = {
            "application/vnd.apple.mpegurl"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectPlaylistValidateBeforeCall(String projectUuid, String measUuid, Integer channel, Boolean forceEnd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling getProjectPlaylist(Async)");
        }

        // verify the required parameter 'measUuid' is set
        if (measUuid == null) {
            throw new ApiException("Missing the required parameter 'measUuid' when calling getProjectPlaylist(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling getProjectPlaylist(Async)");
        }

        return getProjectPlaylistCall(projectUuid, measUuid, channel, forceEnd, _callback);

    }

    /**
     * Get Project HLS Playlist
     * **Depricated** このエンドポイントの代わりに、Videoオブジェクトの &#x60;hls&#x60;にあるPATHにしたがってPlaylistを取得してください。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measUuid 計測のUUID (required)
     * @param channel チャンネル (required)
     * @param forceEnd &#x60;true&#x60; にすると、取得するm3u8形式のプレイリストに強制的にEXT-X-ENDLISTを追加します。 (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public String getProjectPlaylist(String projectUuid, String measUuid, Integer channel, Boolean forceEnd) throws ApiException {
        ApiResponse<String> localVarResp = getProjectPlaylistWithHttpInfo(projectUuid, measUuid, channel, forceEnd);
        return localVarResp.getData();
    }

    /**
     * Get Project HLS Playlist
     * **Depricated** このエンドポイントの代わりに、Videoオブジェクトの &#x60;hls&#x60;にあるPATHにしたがってPlaylistを取得してください。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measUuid 計測のUUID (required)
     * @param channel チャンネル (required)
     * @param forceEnd &#x60;true&#x60; にすると、取得するm3u8形式のプレイリストに強制的にEXT-X-ENDLISTを追加します。 (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<String> getProjectPlaylistWithHttpInfo(String projectUuid, String measUuid, Integer channel, Boolean forceEnd) throws ApiException {
        okhttp3.Call localVarCall = getProjectPlaylistValidateBeforeCall(projectUuid, measUuid, channel, forceEnd, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Project HLS Playlist (asynchronously)
     * **Depricated** このエンドポイントの代わりに、Videoオブジェクトの &#x60;hls&#x60;にあるPATHにしたがってPlaylistを取得してください。
     * @param projectUuid プロジェクトのUUID (required)
     * @param measUuid 計測のUUID (required)
     * @param channel チャンネル (required)
     * @param forceEnd &#x60;true&#x60; にすると、取得するm3u8形式のプレイリストに強制的にEXT-X-ENDLISTを追加します。 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getProjectPlaylistAsync(String projectUuid, String measUuid, Integer channel, Boolean forceEnd, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectPlaylistValidateBeforeCall(projectUuid, measUuid, channel, forceEnd, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
