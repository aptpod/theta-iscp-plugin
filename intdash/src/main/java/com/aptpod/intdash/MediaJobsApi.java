/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aptpod.intdash;

import com.aptpod.ApiCallback;
import com.aptpod.ApiClient;
import com.aptpod.ApiException;
import com.aptpod.ApiResponse;
import com.aptpod.Configuration;
import com.aptpod.Pair;
import com.aptpod.ProgressRequestBody;
import com.aptpod.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.CreateJobRequest;
import org.openapitools.client.model.ErrorProblemMedia;
import org.openapitools.client.model.Job;
import org.openapitools.client.model.JobList;
import org.openapitools.client.model.JobStatus;
import org.openapitools.client.model.JobType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MediaJobsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MediaJobsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MediaJobsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createJob
     * @param createJobRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createJobCall(CreateJobRequest createJobRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createJobRequest;

        // create path and map variables
        String localVarPath = "/media/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createJobValidateBeforeCall(CreateJobRequest createJobRequest, final ApiCallback _callback) throws ApiException {
        return createJobCall(createJobRequest, _callback);

    }

    /**
     * Create Job
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） HLSへの変換ジョブを作成します。
     * @param createJobRequest  (optional)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Job createJob(CreateJobRequest createJobRequest) throws ApiException {
        ApiResponse<Job> localVarResp = createJobWithHttpInfo(createJobRequest);
        return localVarResp.getData();
    }

    /**
     * Create Job
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） HLSへの変換ジョブを作成します。
     * @param createJobRequest  (optional)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Job> createJobWithHttpInfo(CreateJobRequest createJobRequest) throws ApiException {
        okhttp3.Call localVarCall = createJobValidateBeforeCall(createJobRequest, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Job (asynchronously)
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） HLSへの変換ジョブを作成します。
     * @param createJobRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createJobAsync(CreateJobRequest createJobRequest, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = createJobValidateBeforeCall(createJobRequest, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProjectJob
     * @param projectUuid プロジェクトのUUID (required)
     * @param createJobRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectJobCall(String projectUuid, CreateJobRequest createJobRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createJobRequest;

        // create path and map variables
        String localVarPath = "/media/projects/{project_uuid}/jobs"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectJobValidateBeforeCall(String projectUuid, CreateJobRequest createJobRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling createProjectJob(Async)");
        }

        return createProjectJobCall(projectUuid, createJobRequest, _callback);

    }

    /**
     * Create Project Job
     * HLSへの変換ジョブを作成します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param createJobRequest  (optional)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public Job createProjectJob(String projectUuid, CreateJobRequest createJobRequest) throws ApiException {
        ApiResponse<Job> localVarResp = createProjectJobWithHttpInfo(projectUuid, createJobRequest);
        return localVarResp.getData();
    }

    /**
     * Create Project Job
     * HLSへの変換ジョブを作成します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param createJobRequest  (optional)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Job> createProjectJobWithHttpInfo(String projectUuid, CreateJobRequest createJobRequest) throws ApiException {
        okhttp3.Call localVarCall = createProjectJobValidateBeforeCall(projectUuid, createJobRequest, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Project Job (asynchronously)
     * HLSへの変換ジョブを作成します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param createJobRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectJobAsync(String projectUuid, CreateJobRequest createJobRequest, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectJobValidateBeforeCall(projectUuid, createJobRequest, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobs
     * @param uuid 取得したいジョブのUUID (optional)
     * @param measUuid 計測のUUID (optional)
     * @param type - update   - 計測内の動画データのうち、新しくサーバーが受信した部分（HLSにまだ変換されていない部分）を     HLSに変換するジョブ。通常は計測実行中に行います。 - finalize   - 計測全体をサーバーに回収した後に、動画データ全体をHLSに変換するジョブ - delete   - 変換によって作成されたHLSデータを削除するジョブ。     このジョブを実行すると、HLSプレイリスト、セグメントファイル、     データベース内のHLSに関する情報が削除され、この動画のHLSによる再生はできなくなります。 (optional)
     * @param status ジョブのステータス (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param page 取得するページ番号 (optional, default to 1)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param order 並べ替えの順序 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getJobsCall(List<String> uuid, List<String> measUuid, List<JobType> type, List<JobStatus> status, BigDecimal limit, Integer page, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "uuid", uuid));
        }

        if (measUuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "meas_uuid", measUuid));
        }

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "type", type));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status", status));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobsValidateBeforeCall(List<String> uuid, List<String> measUuid, List<JobType> type, List<JobStatus> status, BigDecimal limit, Integer page, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getJobsCall(uuid, measUuid, type, status, limit, page, sort, order, _callback);

    }

    /**
     * List Jobs
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） HLSへの変換ジョブのリストを取得します。
     * @param uuid 取得したいジョブのUUID (optional)
     * @param measUuid 計測のUUID (optional)
     * @param type - update   - 計測内の動画データのうち、新しくサーバーが受信した部分（HLSにまだ変換されていない部分）を     HLSに変換するジョブ。通常は計測実行中に行います。 - finalize   - 計測全体をサーバーに回収した後に、動画データ全体をHLSに変換するジョブ - delete   - 変換によって作成されたHLSデータを削除するジョブ。     このジョブを実行すると、HLSプレイリスト、セグメントファイル、     データベース内のHLSに関する情報が削除され、この動画のHLSによる再生はできなくなります。 (optional)
     * @param status ジョブのステータス (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param page 取得するページ番号 (optional, default to 1)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param order 並べ替えの順序 (optional)
     * @return JobList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public JobList getJobs(List<String> uuid, List<String> measUuid, List<JobType> type, List<JobStatus> status, BigDecimal limit, Integer page, String sort, String order) throws ApiException {
        ApiResponse<JobList> localVarResp = getJobsWithHttpInfo(uuid, measUuid, type, status, limit, page, sort, order);
        return localVarResp.getData();
    }

    /**
     * List Jobs
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） HLSへの変換ジョブのリストを取得します。
     * @param uuid 取得したいジョブのUUID (optional)
     * @param measUuid 計測のUUID (optional)
     * @param type - update   - 計測内の動画データのうち、新しくサーバーが受信した部分（HLSにまだ変換されていない部分）を     HLSに変換するジョブ。通常は計測実行中に行います。 - finalize   - 計測全体をサーバーに回収した後に、動画データ全体をHLSに変換するジョブ - delete   - 変換によって作成されたHLSデータを削除するジョブ。     このジョブを実行すると、HLSプレイリスト、セグメントファイル、     データベース内のHLSに関する情報が削除され、この動画のHLSによる再生はできなくなります。 (optional)
     * @param status ジョブのステータス (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param page 取得するページ番号 (optional, default to 1)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param order 並べ替えの順序 (optional)
     * @return ApiResponse&lt;JobList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<JobList> getJobsWithHttpInfo(List<String> uuid, List<String> measUuid, List<JobType> type, List<JobStatus> status, BigDecimal limit, Integer page, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getJobsValidateBeforeCall(uuid, measUuid, type, status, limit, page, sort, order, null);
        Type localVarReturnType = new TypeToken<JobList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Jobs (asynchronously)
     * （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） HLSへの変換ジョブのリストを取得します。
     * @param uuid 取得したいジョブのUUID (optional)
     * @param measUuid 計測のUUID (optional)
     * @param type - update   - 計測内の動画データのうち、新しくサーバーが受信した部分（HLSにまだ変換されていない部分）を     HLSに変換するジョブ。通常は計測実行中に行います。 - finalize   - 計測全体をサーバーに回収した後に、動画データ全体をHLSに変換するジョブ - delete   - 変換によって作成されたHLSデータを削除するジョブ。     このジョブを実行すると、HLSプレイリスト、セグメントファイル、     データベース内のHLSに関する情報が削除され、この動画のHLSによる再生はできなくなります。 (optional)
     * @param status ジョブのステータス (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param page 取得するページ番号 (optional, default to 1)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param order 並べ替えの順序 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getJobsAsync(List<String> uuid, List<String> measUuid, List<JobType> type, List<JobStatus> status, BigDecimal limit, Integer page, String sort, String order, final ApiCallback<JobList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobsValidateBeforeCall(uuid, measUuid, type, status, limit, page, sort, order, _callback);
        Type localVarReturnType = new TypeToken<JobList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectJobs
     * @param projectUuid プロジェクトのUUID (required)
     * @param uuid 取得したいジョブのUUID (optional)
     * @param measUuid 計測のUUID (optional)
     * @param type - update   - 計測内の動画データのうち、新しくサーバーが受信した部分（HLSにまだ変換されていない部分）を     HLSに変換するジョブ。通常は計測実行中に行います。 - finalize   - 計測全体をサーバーに回収した後に、動画データ全体をHLSに変換するジョブ - delete   - 変換によって作成されたHLSデータを削除するジョブ。     このジョブを実行すると、HLSプレイリスト、セグメントファイル、     データベース内のHLSに関する情報が削除され、この動画のHLSによる再生はできなくなります。 (optional)
     * @param status ジョブのステータス (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param page 取得するページ番号 (optional, default to 1)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param order 並べ替えの順序 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectJobsCall(String projectUuid, List<String> uuid, List<String> measUuid, List<JobType> type, List<JobStatus> status, BigDecimal limit, Integer page, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/projects/{project_uuid}/jobs"
            .replace("{" + "project_uuid" + "}", localVarApiClient.escapeString(projectUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "uuid", uuid));
        }

        if (measUuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "meas_uuid", measUuid));
        }

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "type", type));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status", status));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "IntdashToken", "OAuth2TokenInCookie", "OAuth2TokenInHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectJobsValidateBeforeCall(String projectUuid, List<String> uuid, List<String> measUuid, List<JobType> type, List<JobStatus> status, BigDecimal limit, Integer page, String sort, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectUuid' is set
        if (projectUuid == null) {
            throw new ApiException("Missing the required parameter 'projectUuid' when calling getProjectJobs(Async)");
        }

        return getProjectJobsCall(projectUuid, uuid, measUuid, type, status, limit, page, sort, order, _callback);

    }

    /**
     * List Project Jobs
     * HLSへの変換ジョブのリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param uuid 取得したいジョブのUUID (optional)
     * @param measUuid 計測のUUID (optional)
     * @param type - update   - 計測内の動画データのうち、新しくサーバーが受信した部分（HLSにまだ変換されていない部分）を     HLSに変換するジョブ。通常は計測実行中に行います。 - finalize   - 計測全体をサーバーに回収した後に、動画データ全体をHLSに変換するジョブ - delete   - 変換によって作成されたHLSデータを削除するジョブ。     このジョブを実行すると、HLSプレイリスト、セグメントファイル、     データベース内のHLSに関する情報が削除され、この動画のHLSによる再生はできなくなります。 (optional)
     * @param status ジョブのステータス (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param page 取得するページ番号 (optional, default to 1)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param order 並べ替えの順序 (optional)
     * @return JobList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public JobList getProjectJobs(String projectUuid, List<String> uuid, List<String> measUuid, List<JobType> type, List<JobStatus> status, BigDecimal limit, Integer page, String sort, String order) throws ApiException {
        ApiResponse<JobList> localVarResp = getProjectJobsWithHttpInfo(projectUuid, uuid, measUuid, type, status, limit, page, sort, order);
        return localVarResp.getData();
    }

    /**
     * List Project Jobs
     * HLSへの変換ジョブのリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param uuid 取得したいジョブのUUID (optional)
     * @param measUuid 計測のUUID (optional)
     * @param type - update   - 計測内の動画データのうち、新しくサーバーが受信した部分（HLSにまだ変換されていない部分）を     HLSに変換するジョブ。通常は計測実行中に行います。 - finalize   - 計測全体をサーバーに回収した後に、動画データ全体をHLSに変換するジョブ - delete   - 変換によって作成されたHLSデータを削除するジョブ。     このジョブを実行すると、HLSプレイリスト、セグメントファイル、     データベース内のHLSに関する情報が削除され、この動画のHLSによる再生はできなくなります。 (optional)
     * @param status ジョブのステータス (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param page 取得するページ番号 (optional, default to 1)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param order 並べ替えの順序 (optional)
     * @return ApiResponse&lt;JobList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobList> getProjectJobsWithHttpInfo(String projectUuid, List<String> uuid, List<String> measUuid, List<JobType> type, List<JobStatus> status, BigDecimal limit, Integer page, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getProjectJobsValidateBeforeCall(projectUuid, uuid, measUuid, type, status, limit, page, sort, order, null);
        Type localVarReturnType = new TypeToken<JobList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Project Jobs (asynchronously)
     * HLSへの変換ジョブのリストを取得します。
     * @param projectUuid プロジェクトのUUID (required)
     * @param uuid 取得したいジョブのUUID (optional)
     * @param measUuid 計測のUUID (optional)
     * @param type - update   - 計測内の動画データのうち、新しくサーバーが受信した部分（HLSにまだ変換されていない部分）を     HLSに変換するジョブ。通常は計測実行中に行います。 - finalize   - 計測全体をサーバーに回収した後に、動画データ全体をHLSに変換するジョブ - delete   - 変換によって作成されたHLSデータを削除するジョブ。     このジョブを実行すると、HLSプレイリスト、セグメントファイル、     データベース内のHLSに関する情報が削除され、この動画のHLSによる再生はできなくなります。 (optional)
     * @param status ジョブのステータス (optional)
     * @param limit 1回のリクエストで取得する件数 (optional)
     * @param page 取得するページ番号 (optional, default to 1)
     * @param sort 並べ替えに使用するキー (optional, default to created_at)
     * @param order 並べ替えの順序 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectJobsAsync(String projectUuid, List<String> uuid, List<String> measUuid, List<JobType> type, List<JobStatus> status, BigDecimal limit, Integer page, String sort, String order, final ApiCallback<JobList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectJobsValidateBeforeCall(projectUuid, uuid, measUuid, type, status, limit, page, sort, order, _callback);
        Type localVarReturnType = new TypeToken<JobList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
