/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.openapitools.client.model.AllowedEndpoint;
import org.openapitools.client.model.AllowedISCPMessage;
import org.openapitools.client.model.DeniedEndpoint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.aptpod.JSON;

/**
 * Scope
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-19T17:57:54.384855300+09:00[GMT+09:00]")
public class Scope {
  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ALLOWED_ENDPOINTS = "allowed_endpoints";
  @SerializedName(SERIALIZED_NAME_ALLOWED_ENDPOINTS)
  private List<AllowedEndpoint> allowedEndpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_ISCP_MESSAGES = "allowed_iscp_messages";
  @SerializedName(SERIALIZED_NAME_ALLOWED_ISCP_MESSAGES)
  private List<AllowedISCPMessage> allowedIscpMessages = new ArrayList<>();

  public static final String SERIALIZED_NAME_DENIED_ENDPOINTS = "denied_endpoints";
  @SerializedName(SERIALIZED_NAME_DENIED_ENDPOINTS)
  private List<DeniedEndpoint> deniedEndpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private Date createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private Date updatedAt;

  public Scope() {
  }

  public Scope uuid(String uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * スコープのUUID
   * @return uuid
  **/
  @javax.annotation.Nonnull
  public String getUuid() {
    return uuid;
  }


  public void setUuid(String uuid) {
    this.uuid = uuid;
  }


  public Scope name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * スコープの名前
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Scope allowedEndpoints(List<AllowedEndpoint> allowedEndpoints) {
    
    this.allowedEndpoints = allowedEndpoints;
    return this;
  }

  public Scope addAllowedEndpointsItem(AllowedEndpoint allowedEndpointsItem) {
    if (this.allowedEndpoints == null) {
      this.allowedEndpoints = new ArrayList<>();
    }
    this.allowedEndpoints.add(allowedEndpointsItem);
    return this;
  }

   /**
   * 許可されているエンドポイント
   * @return allowedEndpoints
  **/
  @javax.annotation.Nonnull
  public List<AllowedEndpoint> getAllowedEndpoints() {
    return allowedEndpoints;
  }


  public void setAllowedEndpoints(List<AllowedEndpoint> allowedEndpoints) {
    this.allowedEndpoints = allowedEndpoints;
  }


  public Scope allowedIscpMessages(List<AllowedISCPMessage> allowedIscpMessages) {
    
    this.allowedIscpMessages = allowedIscpMessages;
    return this;
  }

  public Scope addAllowedIscpMessagesItem(AllowedISCPMessage allowedIscpMessagesItem) {
    if (this.allowedIscpMessages == null) {
      this.allowedIscpMessages = new ArrayList<>();
    }
    this.allowedIscpMessages.add(allowedIscpMessagesItem);
    return this;
  }

   /**
   * 許可されているiSCPメッセージ
   * @return allowedIscpMessages
  **/
  @javax.annotation.Nonnull
  public List<AllowedISCPMessage> getAllowedIscpMessages() {
    return allowedIscpMessages;
  }


  public void setAllowedIscpMessages(List<AllowedISCPMessage> allowedIscpMessages) {
    this.allowedIscpMessages = allowedIscpMessages;
  }


  public Scope deniedEndpoints(List<DeniedEndpoint> deniedEndpoints) {
    
    this.deniedEndpoints = deniedEndpoints;
    return this;
  }

  public Scope addDeniedEndpointsItem(DeniedEndpoint deniedEndpointsItem) {
    if (this.deniedEndpoints == null) {
      this.deniedEndpoints = new ArrayList<>();
    }
    this.deniedEndpoints.add(deniedEndpointsItem);
    return this;
  }

   /**
   * 拒否されているエンドポイント
   * @return deniedEndpoints
  **/
  @javax.annotation.Nonnull
  public List<DeniedEndpoint> getDeniedEndpoints() {
    return deniedEndpoints;
  }


  public void setDeniedEndpoints(List<DeniedEndpoint> deniedEndpoints) {
    this.deniedEndpoints = deniedEndpoints;
  }


  public Scope createdAt(Date createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * 作成日時
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public Date getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }


  public Scope updatedAt(Date updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * 最終更新日時
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  public Date getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(Date updatedAt) {
    this.updatedAt = updatedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Scope instance itself
   */
  public Scope putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Scope scope = (Scope) o;
    return Objects.equals(this.uuid, scope.uuid) &&
        Objects.equals(this.name, scope.name) &&
        Objects.equals(this.allowedEndpoints, scope.allowedEndpoints) &&
        Objects.equals(this.allowedIscpMessages, scope.allowedIscpMessages) &&
        Objects.equals(this.deniedEndpoints, scope.deniedEndpoints) &&
        Objects.equals(this.createdAt, scope.createdAt) &&
        Objects.equals(this.updatedAt, scope.updatedAt)&&
        Objects.equals(this.additionalProperties, scope.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, name, allowedEndpoints, allowedIscpMessages, deniedEndpoints, createdAt, updatedAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Scope {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    allowedEndpoints: ").append(toIndentedString(allowedEndpoints)).append("\n");
    sb.append("    allowedIscpMessages: ").append(toIndentedString(allowedIscpMessages)).append("\n");
    sb.append("    deniedEndpoints: ").append(toIndentedString(deniedEndpoints)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uuid");
    openapiFields.add("name");
    openapiFields.add("allowed_endpoints");
    openapiFields.add("allowed_iscp_messages");
    openapiFields.add("denied_endpoints");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("uuid");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("allowed_endpoints");
    openapiRequiredFields.add("allowed_iscp_messages");
    openapiRequiredFields.add("denied_endpoints");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("updated_at");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Scope
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Scope.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Scope is not found in the empty JSON string", Scope.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Scope.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("allowed_endpoints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_endpoints` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_endpoints").toString()));
      }

      JsonArray jsonArrayallowedEndpoints = jsonObj.getAsJsonArray("allowed_endpoints");
      // validate the required field `allowed_endpoints` (array)
      for (int i = 0; i < jsonArrayallowedEndpoints.size(); i++) {
        AllowedEndpoint.validateJsonObject(jsonArrayallowedEndpoints.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("allowed_iscp_messages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_iscp_messages` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_iscp_messages").toString()));
      }

      JsonArray jsonArrayallowedIscpMessages = jsonObj.getAsJsonArray("allowed_iscp_messages");
      // validate the required field `allowed_iscp_messages` (array)
      for (int i = 0; i < jsonArrayallowedIscpMessages.size(); i++) {
        AllowedISCPMessage.validateJsonObject(jsonArrayallowedIscpMessages.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("denied_endpoints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `denied_endpoints` to be an array in the JSON string but got `%s`", jsonObj.get("denied_endpoints").toString()));
      }

      JsonArray jsonArraydeniedEndpoints = jsonObj.getAsJsonArray("denied_endpoints");
      // validate the required field `denied_endpoints` (array)
      for (int i = 0; i < jsonArraydeniedEndpoints.size(); i++) {
        DeniedEndpoint.validateJsonObject(jsonArraydeniedEndpoints.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Scope.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Scope' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Scope> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Scope.class));

       return (TypeAdapter<T>) new TypeAdapter<Scope>() {
           @Override
           public void write(JsonWriter out, Scope value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Scope read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Scope instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Scope given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Scope
  * @throws IOException if the JSON string is invalid with respect to Scope
  */
  public static Scope fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Scope.class);
  }

 /**
  * Convert an instance of Scope to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

