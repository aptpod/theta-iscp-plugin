/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.SignalConversionCSV;
import org.openapitools.client.model.SignalConversionJSON;
import org.openapitools.client.model.SignalConversionNumFixedPoint;
import org.openapitools.client.model.SignalConversionNumFloatingPoint;
import org.openapitools.client.model.SignalConversionOptionSubString;
import org.openapitools.client.model.SignalConversionOptionType;
import org.openapitools.client.model.SignalConversionSubBytes;
import org.openapitools.client.model.SignalConversionSubString;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import com.aptpod.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-19T17:57:54.384855300+09:00[GMT+09:00]")
public class SignalConversion extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(SignalConversion.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SignalConversion.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SignalConversion' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SignalConversionCSV> adapterSignalConversionCSV = gson.getDelegateAdapter(this, TypeToken.get(SignalConversionCSV.class));
            final TypeAdapter<SignalConversionJSON> adapterSignalConversionJSON = gson.getDelegateAdapter(this, TypeToken.get(SignalConversionJSON.class));
            final TypeAdapter<SignalConversionNumFixedPoint> adapterSignalConversionNumFixedPoint = gson.getDelegateAdapter(this, TypeToken.get(SignalConversionNumFixedPoint.class));
            final TypeAdapter<SignalConversionNumFloatingPoint> adapterSignalConversionNumFloatingPoint = gson.getDelegateAdapter(this, TypeToken.get(SignalConversionNumFloatingPoint.class));
            final TypeAdapter<SignalConversionSubBytes> adapterSignalConversionSubBytes = gson.getDelegateAdapter(this, TypeToken.get(SignalConversionSubBytes.class));
            final TypeAdapter<SignalConversionSubString> adapterSignalConversionSubString = gson.getDelegateAdapter(this, TypeToken.get(SignalConversionSubString.class));

            return (TypeAdapter<T>) new TypeAdapter<SignalConversion>() {
                @Override
                public void write(JsonWriter out, SignalConversion value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `SignalConversionCSV`
                    if (value.getActualInstance() instanceof SignalConversionCSV) {
                        JsonObject obj = adapterSignalConversionCSV.toJsonTree((SignalConversionCSV)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `SignalConversionJSON`
                    if (value.getActualInstance() instanceof SignalConversionJSON) {
                        JsonObject obj = adapterSignalConversionJSON.toJsonTree((SignalConversionJSON)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `SignalConversionNumFixedPoint`
                    if (value.getActualInstance() instanceof SignalConversionNumFixedPoint) {
                        JsonObject obj = adapterSignalConversionNumFixedPoint.toJsonTree((SignalConversionNumFixedPoint)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `SignalConversionNumFloatingPoint`
                    if (value.getActualInstance() instanceof SignalConversionNumFloatingPoint) {
                        JsonObject obj = adapterSignalConversionNumFloatingPoint.toJsonTree((SignalConversionNumFloatingPoint)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `SignalConversionSubBytes`
                    if (value.getActualInstance() instanceof SignalConversionSubBytes) {
                        JsonObject obj = adapterSignalConversionSubBytes.toJsonTree((SignalConversionSubBytes)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `SignalConversionSubString`
                    if (value.getActualInstance() instanceof SignalConversionSubString) {
                        JsonObject obj = adapterSignalConversionSubString.toJsonTree((SignalConversionSubString)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: SignalConversionCSV, SignalConversionJSON, SignalConversionNumFixedPoint, SignalConversionNumFloatingPoint, SignalConversionSubBytes, SignalConversionSubString");
                }

                @Override
                public SignalConversion read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize SignalConversionCSV
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SignalConversionCSV.validateJsonObject(jsonObject);
                        actualAdapter = adapterSignalConversionCSV;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SignalConversionCSV'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SignalConversionCSV failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SignalConversionCSV'", e);
                    }

                    // deserialize SignalConversionJSON
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SignalConversionJSON.validateJsonObject(jsonObject);
                        actualAdapter = adapterSignalConversionJSON;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SignalConversionJSON'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SignalConversionJSON failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SignalConversionJSON'", e);
                    }

                    // deserialize SignalConversionNumFixedPoint
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SignalConversionNumFixedPoint.validateJsonObject(jsonObject);
                        actualAdapter = adapterSignalConversionNumFixedPoint;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SignalConversionNumFixedPoint'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SignalConversionNumFixedPoint failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SignalConversionNumFixedPoint'", e);
                    }

                    // deserialize SignalConversionNumFloatingPoint
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SignalConversionNumFloatingPoint.validateJsonObject(jsonObject);
                        actualAdapter = adapterSignalConversionNumFloatingPoint;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SignalConversionNumFloatingPoint'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SignalConversionNumFloatingPoint failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SignalConversionNumFloatingPoint'", e);
                    }

                    // deserialize SignalConversionSubBytes
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SignalConversionSubBytes.validateJsonObject(jsonObject);
                        actualAdapter = adapterSignalConversionSubBytes;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SignalConversionSubBytes'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SignalConversionSubBytes failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SignalConversionSubBytes'", e);
                    }

                    // deserialize SignalConversionSubString
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SignalConversionSubString.validateJsonObject(jsonObject);
                        actualAdapter = adapterSignalConversionSubString;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SignalConversionSubString'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SignalConversionSubString failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SignalConversionSubString'", e);
                    }

                    if (match == 1) {
                        SignalConversion ret = new SignalConversion();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for SignalConversion: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public SignalConversion() {
        super("oneOf", Boolean.FALSE);
    }

    public SignalConversion(SignalConversionCSV o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SignalConversion(SignalConversionJSON o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SignalConversion(SignalConversionNumFixedPoint o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SignalConversion(SignalConversionNumFloatingPoint o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SignalConversion(SignalConversionSubBytes o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SignalConversion(SignalConversionSubString o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("SignalConversionCSV", new GenericType<SignalConversionCSV>() {
        });
        schemas.put("SignalConversionJSON", new GenericType<SignalConversionJSON>() {
        });
        schemas.put("SignalConversionNumFixedPoint", new GenericType<SignalConversionNumFixedPoint>() {
        });
        schemas.put("SignalConversionNumFloatingPoint", new GenericType<SignalConversionNumFloatingPoint>() {
        });
        schemas.put("SignalConversionSubBytes", new GenericType<SignalConversionSubBytes>() {
        });
        schemas.put("SignalConversionSubString", new GenericType<SignalConversionSubString>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return SignalConversion.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * SignalConversionCSV, SignalConversionJSON, SignalConversionNumFixedPoint, SignalConversionNumFloatingPoint, SignalConversionSubBytes, SignalConversionSubString
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof SignalConversionCSV) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SignalConversionJSON) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SignalConversionNumFixedPoint) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SignalConversionNumFloatingPoint) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SignalConversionSubBytes) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SignalConversionSubString) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be SignalConversionCSV, SignalConversionJSON, SignalConversionNumFixedPoint, SignalConversionNumFloatingPoint, SignalConversionSubBytes, SignalConversionSubString");
    }

    /**
     * Get the actual instance, which can be the following:
     * SignalConversionCSV, SignalConversionJSON, SignalConversionNumFixedPoint, SignalConversionNumFloatingPoint, SignalConversionSubBytes, SignalConversionSubString
     *
     * @return The actual instance (SignalConversionCSV, SignalConversionJSON, SignalConversionNumFixedPoint, SignalConversionNumFloatingPoint, SignalConversionSubBytes, SignalConversionSubString)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `SignalConversionCSV`. If the actual instance is not `SignalConversionCSV`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SignalConversionCSV`
     * @throws ClassCastException if the instance is not `SignalConversionCSV`
     */
    public SignalConversionCSV getSignalConversionCSV() throws ClassCastException {
        return (SignalConversionCSV)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SignalConversionJSON`. If the actual instance is not `SignalConversionJSON`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SignalConversionJSON`
     * @throws ClassCastException if the instance is not `SignalConversionJSON`
     */
    public SignalConversionJSON getSignalConversionJSON() throws ClassCastException {
        return (SignalConversionJSON)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SignalConversionNumFixedPoint`. If the actual instance is not `SignalConversionNumFixedPoint`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SignalConversionNumFixedPoint`
     * @throws ClassCastException if the instance is not `SignalConversionNumFixedPoint`
     */
    public SignalConversionNumFixedPoint getSignalConversionNumFixedPoint() throws ClassCastException {
        return (SignalConversionNumFixedPoint)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SignalConversionNumFloatingPoint`. If the actual instance is not `SignalConversionNumFloatingPoint`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SignalConversionNumFloatingPoint`
     * @throws ClassCastException if the instance is not `SignalConversionNumFloatingPoint`
     */
    public SignalConversionNumFloatingPoint getSignalConversionNumFloatingPoint() throws ClassCastException {
        return (SignalConversionNumFloatingPoint)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SignalConversionSubBytes`. If the actual instance is not `SignalConversionSubBytes`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SignalConversionSubBytes`
     * @throws ClassCastException if the instance is not `SignalConversionSubBytes`
     */
    public SignalConversionSubBytes getSignalConversionSubBytes() throws ClassCastException {
        return (SignalConversionSubBytes)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SignalConversionSubString`. If the actual instance is not `SignalConversionSubString`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SignalConversionSubString`
     * @throws ClassCastException if the instance is not `SignalConversionSubString`
     */
    public SignalConversionSubString getSignalConversionSubString() throws ClassCastException {
        return (SignalConversionSubString)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SignalConversion
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with SignalConversionCSV
    try {
      SignalConversionCSV.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SignalConversionCSV failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SignalConversionJSON
    try {
      SignalConversionJSON.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SignalConversionJSON failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SignalConversionNumFixedPoint
    try {
      SignalConversionNumFixedPoint.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SignalConversionNumFixedPoint failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SignalConversionNumFloatingPoint
    try {
      SignalConversionNumFloatingPoint.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SignalConversionNumFloatingPoint failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SignalConversionSubBytes
    try {
      SignalConversionSubBytes.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SignalConversionSubBytes failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SignalConversionSubString
    try {
      SignalConversionSubString.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SignalConversionSubString failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for SignalConversion with oneOf schemas: SignalConversionCSV, SignalConversionJSON, SignalConversionNumFixedPoint, SignalConversionNumFloatingPoint, SignalConversionSubBytes, SignalConversionSubString. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of SignalConversion given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SignalConversion
  * @throws IOException if the JSON string is invalid with respect to SignalConversion
  */
  public static SignalConversion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignalConversion.class);
  }

 /**
  * Convert an instance of SignalConversion to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

