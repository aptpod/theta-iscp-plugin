/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Jpeg;
import org.openapitools.client.model.MP4;
import org.openapitools.client.model.MediaMeasurement;
import org.openapitools.client.model.Playlist;
import org.openapitools.client.model.VideoCodecs;
import org.openapitools.client.model.VideoSourceDataType;
import org.openapitools.client.model.VideoStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.aptpod.JSON;

/**
 * Video
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-19T17:57:54.384855300+09:00[GMT+09:00]")
public class Video {
  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  public static final String SERIALIZED_NAME_MEASUREMENT_UUID = "measurement_uuid";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_UUID)
  private UUID measurementUuid;

  public static final String SERIALIZED_NAME_MEASUREMENT = "measurement";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT)
  private MediaMeasurement measurement;

  public static final String SERIALIZED_NAME_EDGE_UUID = "edge_uuid";
  @SerializedName(SERIALIZED_NAME_EDGE_UUID)
  private UUID edgeUuid;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private Integer channel;

  public static final String SERIALIZED_NAME_CODEC = "codec";
  @SerializedName(SERIALIZED_NAME_CODEC)
  private VideoCodecs codec;

  public static final String SERIALIZED_NAME_SOURCE_DATA_TYPE = "source_data_type";
  @SerializedName(SERIALIZED_NAME_SOURCE_DATA_TYPE)
  private VideoSourceDataType sourceDataType;

  public static final String SERIALIZED_NAME_OFFSET_TIME = "offset_time";
  @SerializedName(SERIALIZED_NAME_OFFSET_TIME)
  private Integer offsetTime;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_FPS = "fps";
  @SerializedName(SERIALIZED_NAME_FPS)
  private BigDecimal fps;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private VideoStatus status;

  public static final String SERIALIZED_NAME_HLS = "hls";
  @SerializedName(SERIALIZED_NAME_HLS)
  private Playlist hls;

  public static final String SERIALIZED_NAME_MP4S = "mp4s";
  @SerializedName(SERIALIZED_NAME_MP4S)
  private List<MP4> mp4s = new ArrayList<>();

  public static final String SERIALIZED_NAME_JPEGS = "jpegs";
  @SerializedName(SERIALIZED_NAME_JPEGS)
  private List<Jpeg> jpegs = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private Date createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private Date updatedAt;

  public Video() {
  }

  public Video uuid(UUID uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * 動画（video）のUUID
   * @return uuid
  **/
  @javax.annotation.Nonnull
  public UUID getUuid() {
    return uuid;
  }


  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }


  public Video measurementUuid(UUID measurementUuid) {
    
    this.measurementUuid = measurementUuid;
    return this;
  }

   /**
   * 計測のUUID
   * @return measurementUuid
  **/
  @javax.annotation.Nonnull
  public UUID getMeasurementUuid() {
    return measurementUuid;
  }


  public void setMeasurementUuid(UUID measurementUuid) {
    this.measurementUuid = measurementUuid;
  }


  public Video measurement(MediaMeasurement measurement) {
    
    this.measurement = measurement;
    return this;
  }

   /**
   * Get measurement
   * @return measurement
  **/
  @javax.annotation.Nullable
  public MediaMeasurement getMeasurement() {
    return measurement;
  }


  public void setMeasurement(MediaMeasurement measurement) {
    this.measurement = measurement;
  }


  public Video edgeUuid(UUID edgeUuid) {
    
    this.edgeUuid = edgeUuid;
    return this;
  }

   /**
   * エッジのUUID
   * @return edgeUuid
  **/
  @javax.annotation.Nonnull
  public UUID getEdgeUuid() {
    return edgeUuid;
  }


  public void setEdgeUuid(UUID edgeUuid) {
    this.edgeUuid = edgeUuid;
  }


  public Video channel(Integer channel) {
    
    this.channel = channel;
    return this;
  }

   /**
   * チャンネル
   * @return channel
  **/
  @javax.annotation.Nonnull
  public Integer getChannel() {
    return channel;
  }


  public void setChannel(Integer channel) {
    this.channel = channel;
  }


  public Video codec(VideoCodecs codec) {
    
    this.codec = codec;
    return this;
  }

   /**
   * Get codec
   * @return codec
  **/
  @javax.annotation.Nonnull
  public VideoCodecs getCodec() {
    return codec;
  }


  public void setCodec(VideoCodecs codec) {
    this.codec = codec;
  }


  public Video sourceDataType(VideoSourceDataType sourceDataType) {
    
    this.sourceDataType = sourceDataType;
    return this;
  }

   /**
   * Get sourceDataType
   * @return sourceDataType
  **/
  @javax.annotation.Nonnull
  public VideoSourceDataType getSourceDataType() {
    return sourceDataType;
  }


  public void setSourceDataType(VideoSourceDataType sourceDataType) {
    this.sourceDataType = sourceDataType;
  }


  public Video offsetTime(Integer offsetTime) {
    
    this.offsetTime = offsetTime;
    return this;
  }

   /**
   * 計測開始からのオフセット（マイクロ秒）
   * @return offsetTime
  **/
  @javax.annotation.Nonnull
  public Integer getOffsetTime() {
    return offsetTime;
  }


  public void setOffsetTime(Integer offsetTime) {
    this.offsetTime = offsetTime;
  }


  public Video duration(Integer duration) {
    
    this.duration = duration;
    return this;
  }

   /**
   * 長さ（マイクロ秒）
   * @return duration
  **/
  @javax.annotation.Nonnull
  public Integer getDuration() {
    return duration;
  }


  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public Video fps(BigDecimal fps) {
    
    this.fps = fps;
    return this;
  }

   /**
   * フレームレート（fps）
   * @return fps
  **/
  @javax.annotation.Nonnull
  public BigDecimal getFps() {
    return fps;
  }


  public void setFps(BigDecimal fps) {
    this.fps = fps;
  }


  public Video width(Integer width) {
    
    this.width = width;
    return this;
  }

   /**
   * 動画の幅
   * @return width
  **/
  @javax.annotation.Nonnull
  public Integer getWidth() {
    return width;
  }


  public void setWidth(Integer width) {
    this.width = width;
  }


  public Video height(Integer height) {
    
    this.height = height;
    return this;
  }

   /**
   * 動画の高さ
   * @return height
  **/
  @javax.annotation.Nonnull
  public Integer getHeight() {
    return height;
  }


  public void setHeight(Integer height) {
    this.height = height;
  }


  public Video status(VideoStatus status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public VideoStatus getStatus() {
    return status;
  }


  public void setStatus(VideoStatus status) {
    this.status = status;
  }


  public Video hls(Playlist hls) {
    
    this.hls = hls;
    return this;
  }

   /**
   * Get hls
   * @return hls
  **/
  @javax.annotation.Nullable
  public Playlist getHls() {
    return hls;
  }


  public void setHls(Playlist hls) {
    this.hls = hls;
  }


  public Video mp4s(List<MP4> mp4s) {
    
    this.mp4s = mp4s;
    return this;
  }

  public Video addMp4sItem(MP4 mp4sItem) {
    if (this.mp4s == null) {
      this.mp4s = new ArrayList<>();
    }
    this.mp4s.add(mp4sItem);
    return this;
  }

   /**
   * この動画を変換して作成されたMP4のリスト
   * @return mp4s
  **/
  @javax.annotation.Nonnull
  public List<MP4> getMp4s() {
    return mp4s;
  }


  public void setMp4s(List<MP4> mp4s) {
    this.mp4s = mp4s;
  }


  public Video jpegs(List<Jpeg> jpegs) {
    
    this.jpegs = jpegs;
    return this;
  }

  public Video addJpegsItem(Jpeg jpegsItem) {
    if (this.jpegs == null) {
      this.jpegs = new ArrayList<>();
    }
    this.jpegs.add(jpegsItem);
    return this;
  }

   /**
   * この動画を変換して作成されたJPEGのリスト
   * @return jpegs
  **/
  @javax.annotation.Nonnull
  public List<Jpeg> getJpegs() {
    return jpegs;
  }


  public void setJpegs(List<Jpeg> jpegs) {
    this.jpegs = jpegs;
  }


  public Video createdAt(Date createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * 作成された日時
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public Date getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }


  public Video updatedAt(Date updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * 最終更新日時
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  public Date getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(Date updatedAt) {
    this.updatedAt = updatedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Video instance itself
   */
  public Video putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Video video = (Video) o;
    return Objects.equals(this.uuid, video.uuid) &&
        Objects.equals(this.measurementUuid, video.measurementUuid) &&
        Objects.equals(this.measurement, video.measurement) &&
        Objects.equals(this.edgeUuid, video.edgeUuid) &&
        Objects.equals(this.channel, video.channel) &&
        Objects.equals(this.codec, video.codec) &&
        Objects.equals(this.sourceDataType, video.sourceDataType) &&
        Objects.equals(this.offsetTime, video.offsetTime) &&
        Objects.equals(this.duration, video.duration) &&
        Objects.equals(this.fps, video.fps) &&
        Objects.equals(this.width, video.width) &&
        Objects.equals(this.height, video.height) &&
        Objects.equals(this.status, video.status) &&
        Objects.equals(this.hls, video.hls) &&
        Objects.equals(this.mp4s, video.mp4s) &&
        Objects.equals(this.jpegs, video.jpegs) &&
        Objects.equals(this.createdAt, video.createdAt) &&
        Objects.equals(this.updatedAt, video.updatedAt)&&
        Objects.equals(this.additionalProperties, video.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, measurementUuid, measurement, edgeUuid, channel, codec, sourceDataType, offsetTime, duration, fps, width, height, status, hls, mp4s, jpegs, createdAt, updatedAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Video {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    measurementUuid: ").append(toIndentedString(measurementUuid)).append("\n");
    sb.append("    measurement: ").append(toIndentedString(measurement)).append("\n");
    sb.append("    edgeUuid: ").append(toIndentedString(edgeUuid)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    codec: ").append(toIndentedString(codec)).append("\n");
    sb.append("    sourceDataType: ").append(toIndentedString(sourceDataType)).append("\n");
    sb.append("    offsetTime: ").append(toIndentedString(offsetTime)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    fps: ").append(toIndentedString(fps)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    hls: ").append(toIndentedString(hls)).append("\n");
    sb.append("    mp4s: ").append(toIndentedString(mp4s)).append("\n");
    sb.append("    jpegs: ").append(toIndentedString(jpegs)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uuid");
    openapiFields.add("measurement_uuid");
    openapiFields.add("measurement");
    openapiFields.add("edge_uuid");
    openapiFields.add("channel");
    openapiFields.add("codec");
    openapiFields.add("source_data_type");
    openapiFields.add("offset_time");
    openapiFields.add("duration");
    openapiFields.add("fps");
    openapiFields.add("width");
    openapiFields.add("height");
    openapiFields.add("status");
    openapiFields.add("hls");
    openapiFields.add("mp4s");
    openapiFields.add("jpegs");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("uuid");
    openapiRequiredFields.add("measurement_uuid");
    openapiRequiredFields.add("edge_uuid");
    openapiRequiredFields.add("channel");
    openapiRequiredFields.add("codec");
    openapiRequiredFields.add("source_data_type");
    openapiRequiredFields.add("offset_time");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("fps");
    openapiRequiredFields.add("width");
    openapiRequiredFields.add("height");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("mp4s");
    openapiRequiredFields.add("jpegs");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("updated_at");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Video
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Video.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Video is not found in the empty JSON string", Video.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Video.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if (!jsonObj.get("measurement_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurement_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurement_uuid").toString()));
      }
      // validate the optional field `measurement`
      if (jsonObj.get("measurement") != null && !jsonObj.get("measurement").isJsonNull()) {
        MediaMeasurement.validateJsonObject(jsonObj.getAsJsonObject("measurement"));
      }
      if (!jsonObj.get("edge_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `edge_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("edge_uuid").toString()));
      }
      // validate the optional field `hls`
      if (jsonObj.get("hls") != null && !jsonObj.get("hls").isJsonNull()) {
        Playlist.validateJsonObject(jsonObj.getAsJsonObject("hls"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("mp4s").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mp4s` to be an array in the JSON string but got `%s`", jsonObj.get("mp4s").toString()));
      }

      JsonArray jsonArraymp4s = jsonObj.getAsJsonArray("mp4s");
      // validate the required field `mp4s` (array)
      for (int i = 0; i < jsonArraymp4s.size(); i++) {
        MP4.validateJsonObject(jsonArraymp4s.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("jpegs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jpegs` to be an array in the JSON string but got `%s`", jsonObj.get("jpegs").toString()));
      }

      JsonArray jsonArrayjpegs = jsonObj.getAsJsonArray("jpegs");
      // validate the required field `jpegs` (array)
      for (int i = 0; i < jsonArrayjpegs.size(); i++) {
        Jpeg.validateJsonObject(jsonArrayjpegs.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Video.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Video' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Video> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Video.class));

       return (TypeAdapter<T>) new TypeAdapter<Video>() {
           @Override
           public void write(JsonWriter out, Video value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Video read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Video instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Video given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Video
  * @throws IOException if the JSON string is invalid with respect to Video
  */
  public static Video fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Video.class);
  }

 /**
  * Convert an instance of Video to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

