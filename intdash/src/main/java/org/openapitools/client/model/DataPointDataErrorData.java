/*
 * intdash API specification
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:--------------------------|:----------------------------------------------------------------------| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.ErrorConverted;
import org.openapitools.client.model.ErrorConvertedAllOfErrorExtra;
import org.openapitools.client.model.ErrorExtraEmpty;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import com.aptpod.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-19T17:57:54.384855300+09:00[GMT+09:00]")
public class DataPointDataErrorData extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(DataPointDataErrorData.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DataPointDataErrorData.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DataPointDataErrorData' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ErrorConverted> adapterErrorConverted = gson.getDelegateAdapter(this, TypeToken.get(ErrorConverted.class));
            final TypeAdapter<ErrorExtraEmpty> adapterErrorExtraEmpty = gson.getDelegateAdapter(this, TypeToken.get(ErrorExtraEmpty.class));

            return (TypeAdapter<T>) new TypeAdapter<DataPointDataErrorData>() {
                @Override
                public void write(JsonWriter out, DataPointDataErrorData value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ErrorConverted`
                    if (value.getActualInstance() instanceof ErrorConverted) {
                        JsonObject obj = adapterErrorConverted.toJsonTree((ErrorConverted)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ErrorExtraEmpty`
                    if (value.getActualInstance() instanceof ErrorExtraEmpty) {
                        JsonObject obj = adapterErrorExtraEmpty.toJsonTree((ErrorExtraEmpty)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ErrorConverted, ErrorExtraEmpty");
                }

                @Override
                public DataPointDataErrorData read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ErrorConverted
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorConverted.validateJsonObject(jsonObject);
                        actualAdapter = adapterErrorConverted;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ErrorConverted'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorConverted failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorConverted'", e);
                    }

                    // deserialize ErrorExtraEmpty
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorExtraEmpty.validateJsonObject(jsonObject);
                        actualAdapter = adapterErrorExtraEmpty;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ErrorExtraEmpty'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorExtraEmpty failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorExtraEmpty'", e);
                    }

                    if (match == 1) {
                        DataPointDataErrorData ret = new DataPointDataErrorData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for DataPointDataErrorData: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public DataPointDataErrorData() {
        super("oneOf", Boolean.FALSE);
    }

    public DataPointDataErrorData(ErrorConverted o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DataPointDataErrorData(ErrorExtraEmpty o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ErrorConverted", new GenericType<ErrorConverted>() {
        });
        schemas.put("ErrorExtraEmpty", new GenericType<ErrorExtraEmpty>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return DataPointDataErrorData.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ErrorConverted, ErrorExtraEmpty
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ErrorConverted) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorExtraEmpty) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ErrorConverted, ErrorExtraEmpty");
    }

    /**
     * Get the actual instance, which can be the following:
     * ErrorConverted, ErrorExtraEmpty
     *
     * @return The actual instance (ErrorConverted, ErrorExtraEmpty)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ErrorConverted`. If the actual instance is not `ErrorConverted`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorConverted`
     * @throws ClassCastException if the instance is not `ErrorConverted`
     */
    public ErrorConverted getErrorConverted() throws ClassCastException {
        return (ErrorConverted)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ErrorExtraEmpty`. If the actual instance is not `ErrorExtraEmpty`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorExtraEmpty`
     * @throws ClassCastException if the instance is not `ErrorExtraEmpty`
     */
    public ErrorExtraEmpty getErrorExtraEmpty() throws ClassCastException {
        return (ErrorExtraEmpty)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DataPointDataErrorData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with ErrorConverted
    try {
      ErrorConverted.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ErrorConverted failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ErrorExtraEmpty
    try {
      ErrorExtraEmpty.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ErrorExtraEmpty failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for DataPointDataErrorData with oneOf schemas: ErrorConverted, ErrorExtraEmpty. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of DataPointDataErrorData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DataPointDataErrorData
  * @throws IOException if the JSON string is invalid with respect to DataPointDataErrorData
  */
  public static DataPointDataErrorData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataPointDataErrorData.class);
  }

 /**
  * Convert an instance of DataPointDataErrorData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

