openapi: 3.0.3
info:
  title: intdash API specification
  version: v2.4.0-next-4a4316946
  contact:
    name: 株式会社アプトポッド
    url: https://www.aptpod.co.jp/
    email: VM2M-support@aptpod.co.jp
  description: >-
    ## ベースURL


    ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。


    ```

    https://<host>/api

    ```

    エンドポイント例:

    ```

    https://example.intdash.jp/api/v1/measurements

    https://example.intdash.jp/api/media/videos

    ```


    ## レスポンスのステータスコード


    サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。



    | コード                    |
    説明                                                                  |

    |:--------------------------|:----------------------------------------------------------------------|

    | 101 Switching Protocols   |
    サーバーはプロトコルを切り替えます。                                  |

    | 200 OK                    |
    リクエストは成功しました。                                            |

    | 201 Created               |
    新しいリソースが作成されました。                                      |

    | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            |

    | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  |

    | 401 Unauthorized          |
    リクエストには認証が必要です。                                        |

    | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        |

    | 404 Not Found             |
    APIまたはリソースが見つかりません。                                   |

    | 405 Method Not Allowed    |
    指定されたメソッドは許可されていません。                              |

    | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      |

    | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |



    ## 注意

    リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。


    ```


    {
      "username" : "username",
      "password" : "password"
    }


    ```



    ```


    {
      "Username" : "username",
      "Password" : "password"
    }


    ```
servers:
  - url: https://example.intdash.jp/api
    description: URLのサンプルです。
components:
  securitySchemes:
    BasicAuthForTenantAPI:
      type: http
      scheme: basic
      description: |-

        テナント管理APIを利用するためのベーシック認証です。サーバーに配置された設定ファイルに記述したユーザー情報を指定します。
        詳細はサーバー管理者にお問い合わせ下さい。
    IntdashToken:
      type: apiKey
      name: X-Intdash-Token
      in: header
      description: >-

        APIトークンを使用する場合は、[トークンを作成](#operation/createAPIToken)し、そのトークンをX-Intdash-Tokenヘッダーにセットします。


        ```

        X-Intdash-Token: XXXXXX...XXXXXX

        ```
    OAuth2:
      type: oauth2
      flows:
        password:
          tokenUrl: /api/auth/oauth2/token
          refreshUrl: /api/auth/oauth2/token
          scopes:
            <scopes>: OAuth2のスコープ（権限を制御するために使用される、サーバーによって決められた文字列）
        clientCredentials:
          tokenUrl: /api/auth/oauth2/token
          scopes:
            <scopes>: OAuth2のスコープ（権限を制御するために使用される、サーバーによって決められた文字列）
        authorizationCode:
          authorizationUrl: /api/auth/oauth2/authorization
          tokenUrl: /api/auth/oauth2/token
          refreshUrl: /api/auth/oauth2/token
          scopes:
            <scopes>: OAuth2のスコープ（権限を制御するために使用される、サーバーによって決められた文字列）
      description: >-
        OAuth2のトークン交換を使用することができます。取得したトークンは、以下の `OAuth2TokenInHeader` か
        `OAuth2TokenInCookie` で利用します。
    OAuth2TokenInHeader:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |-

        OAuth2で取得したトークンを `Bearer` トークンとして利用します。
        ```
        Authrization: Bearer xxx...
        ```
    OAuth2TokenInCookie:
      type: apiKey
      in: cookie
      name: _bearer_token
      description: |-
        **アクセストークン(JSON Web Token)**

        OAuth2を使って取得したトークンを、`_bearer_token` という名前でCookieにセットします。

        リクエストヘッダーは以下のようになります:

        ```
        Cookie: _bearer_token=eyJhbGci...
        ```
  parameters:
    QueryPage:
      in: query
      name: page
      description: 取得するページの番号
      schema:
        type: integer
        default: 1
        minimum: 1
    QueryPerPage:
      in: query
      name: per_page
      description: 1回のリクエストで取得する件数
      schema:
        type: integer
        maximum: 200
        default: 30
    PathClientID:
      name: client_id
      required: true
      in: path
      description: OAuth2クライアントID
      example: 039b8ee2-8edc-46e4-9a88-4d03bac142f7
      schema:
        type: string
    PathEdgeUUID:
      in: path
      name: edge_uuid
      required: true
      example: e920a50c-ddde-4571-b066-b568340de7cf
      description: エッジのUUID
      schema:
        type: string
    QueryOAuth2ClientID:
      name: client_id
      in: query
      description: OAuth2クライアントID
      required: true
      example: client_id
      schema:
        type: string
    QueryOAuth2ResponseType:
      name: response_type
      in: query
      description: OAuth2のresponse_type。 `code` のみサポートされています。
      example: code
      required: true
      schema:
        enum:
          - code
        type: string
    QueryOAuth2RedirectURI:
      name: redirect_uri
      in: query
      description: 認可後のリダイレクト先URI
      example: http://localhost:8080/
      required: true
      schema:
        type: string
    QueryOAuth2State:
      name: state
      in: query
      description: CSRF対策のためのstate
      example: 05d54c58385046dd822d233c6adfb9e9
      required: true
      schema:
        type: string
    QueryOAuth2CodeChallenge:
      name: code_challenge
      in: query
      description: PKCEコードチャレンジ。 `code_verifier` から計算したSHA-256ハッシュを、Base64 URLエンコードしたもの。
      required: false
      example: ZtNPunH49FD35FWYhT5Tv8I7vRKQJ8uxMaL0_9eHjNA
      schema:
        type: string
    QueryOAuth2CodeChallengeMethod:
      name: code_challenge_method
      in: query
      description: PKCEコードチャレンジの方式。 `S256` （SHA-256）のみサポートされます。
      example: S256
      schema:
        type: string
        enum:
          - S256
    PathUserEmailID:
      in: path
      name: user_email_id
      description: ユーザーのメールアドレスのID
      required: true
      example: 1
      schema:
        type: integer
        format: int64
        example: 1
    UserAPITokenID:
      in: path
      name: user_api_token_id
      description: APIトークンのID
      required: true
      example: 1
      schema:
        type: integer
        format: int64
        example: 1
    QueryProjectSort:
      name: sort
      in: query
      description: >-
        並べ替えに使用するキー。接尾辞 `+` を付けた場合は昇順、 `-` を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。
        例えば、 `name-` を指定すると、nameによる降順で出力されます。
      schema:
        type: string
        enum:
          - created_at
          - created_at+
          - created_at-
          - updated_at
          - updated_at+
          - updated_at-
          - name
          - name+
          - name-
        x-enum-varnames:
          - CreatedAt
          - CreatedAtAsc
          - CreatedAtDesc
          - UpdatedAt
          - UpdatedAtAsc
          - UpdatedAtDesc
          - Name
          - NameAsc
          - NameDesc
    QueryGroupSort:
      name: sort
      in: query
      description: >-
        並べ替えに使用するキー。接尾辞 `+` を付けた場合は昇順、 `-` を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。
        例えば、 `name-` を指定すると、nameによる降順で出力されます。
      schema:
        type: string
        enum:
          - created_at
          - created_at+
          - created_at-
          - updated_at
          - updated_at+
          - updated_at-
          - name
          - name+
          - name-
        x-enum-varnames:
          - CreatedAt
          - CreatedAtAsc
          - CreatedAtDesc
          - UpdatedAt
          - UpdatedAtAsc
          - UpdatedAtDesc
          - Name
          - NameAsc
          - NameDesc
    PathUserUUID:
      in: path
      name: user_uuid
      required: true
      example: 0932ff17-567c-4ac8-a40d-136357890f7b
      schema:
        type: string
        description: ユーザーのUUID
        example: 0932ff17-567c-4ac8-a40d-136357890f7b
    PathRoleUUID:
      in: path
      name: role_uuid
      required: true
      example: 6b4f4bce-ba32-4ad9-b808-39e2d68b33ee
      description: ロールのUUID
      schema:
        type: string
    PathGroupUUID:
      in: path
      name: group_uuid
      required: true
      example: 6b4f4bce-ba32-4ad9-b808-39e2d68b33ee
      description: グループのUUID
      schema:
        type: string
    QueryIsOwner:
      in: query
      name: is_owner
      example: false
      description: |-
        * `true` を指定した場合、オーナーのみを取得します。
        * `false` を指定した場合、オーナー以外を取得します。
        * 指定を省略した場合、オーナーであるかにかかわらずメンバーを取得します。
      schema:
        type: boolean
    QueryUserUUIDs:
      in: query
      name: user_uuid
      description: ユーザーのUUID
      schema:
        type: array
        items:
          type: string
          example: b7f5f259-6a63-4a26-bfa3-e15240cbc0b7
    QueryGroupMemberSort:
      name: sort
      in: query
      description: >-
        並べ替えに使用するキー。接尾辞 `+` を付けた場合は昇順、 `-` を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。
        例えば、 `name-` を指定すると、nameによる降順で出力されます。
      schema:
        type: string
        enum:
          - created_at
          - created_at+
          - created_at-
          - updated_at
          - updated_at+
          - updated_at-
          - name
          - name+
          - name-
        x-enum-varnames:
          - CreatedAt
          - CreatedAtAsc
          - CreatedAtDesc
          - UpdatedAt
          - UpdatedAtAsc
          - UpdatedAtDesc
          - Name
          - NameAsc
          - NameDesc
    QuerySinceCreatedAt:
      name: since_created_at
      in: query
      description: 指定した時刻より後に作成されたリソースを取得します。
      example: '2006-01-02T15:04:05.999999999Z'
      schema:
        type: string
        format: date-time
    PathProjectUUID:
      in: path
      name: project_uuid
      required: true
      example: 0932ff17-567c-4ac8-a40d-136357890f7b
      description: プロジェクトのUUID
      schema:
        type: string
    QueryEdgeUUIDs:
      in: query
      name: edge_uuid
      description: エッジのUUID
      schema:
        type: array
        items:
          type: string
          example: b7f5f259-6a63-4a26-bfa3-e15240cbc0b7
    QueryProjectEdgeSort:
      name: sort
      in: query
      description: >-
        並べ替えに使用するキー。接尾辞 `+` を付けた場合は昇順、 `-` を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。
        例えば、 `name-` を指定すると、nameによる降順で出力されます。
      schema:
        type: string
        enum:
          - created_at
          - created_at+
          - created_at-
          - updated_at
          - updated_at+
          - updated_at-
          - nickname
          - nickname+
          - nickname-
        x-enum-varnames:
          - CreatedAt
          - CreatedAtAsc
          - CreatedAtDesc
          - UpdatedAt
          - UpdatedAtAsc
          - UpdatedAtDesc
          - NicknameAt
          - NicknameAtAsc
          - NicknameAtDesc
    QueryProjectMemberSort:
      name: sort
      in: query
      description: >-
        並べ替えに使用するキー。接尾辞 `+` を付けた場合は昇順、 `-` を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。
        例えば、 `name-` を指定すると、nameによる降順で出力されます。
      schema:
        type: string
        enum:
          - created_at
          - created_at+
          - created_at-
          - updated_at
          - updated_at+
          - updated_at-
          - name
          - name+
          - name-
        x-enum-varnames:
          - CreatedAt
          - CreatedAtAsc
          - CreatedAtDesc
          - UpdatedAt
          - UpdatedAtAsc
          - UpdatedAtDesc
          - Name
          - NameAsc
          - NameDesc
    PathScopeUUID:
      in: path
      name: scope_uuid
      required: true
      example: 4688a07a-0cbc-4597-8c87-538e744bc90d
      description: The Scope UUID.
      schema:
        type: string
    BrokerPathProjectUUID:
      name: project_uuid
      in: path
      description: プロジェクトのUUID
      required: true
      example: c78ce0c1-eb57-4f93-a087-ee3b7cee5e06
      schema:
        type: string
    DataPointsTargetName:
      description: >-
        どの計測またはどのエッジのデータポイントを取得するかを、以下のいずれかを使って指定します：

        - 計測UUID

        - エッジUUID

        - エッジの名前


        最初に、指定されたnameに一致する計測UUIDがあるかが検索されます。なければ一致するエッジUUIDがあるかが検索され、それもなければ一致するエッジの名前があるかが検索されます。
      example: 8f40b21c-f2c4-4fa5-8fe3-325491a59597
      in: query
      name: name
      required: true
      schema:
        type: string
    DataPointsStart:
      description: |-
        取得対象範囲の始点。以下のいずれかの形式で指定します。
          - rfc3339(ex 2019-10-29T03:04:05.341268Z)
          - UNIX時刻（マイクロ秒）(**Deprecated**)
      example: '2019-10-29T03:04:05.123456Z'
      in: query
      name: start
      required: false
      schema:
        type: string
    DataPointsEnd:
      description: |-
        取得対象範囲の終点。以下のいずれかの形式で指定します。
          - rfc3339(ex 2019-10-29T03:04:05.341268Z)
          - UNIX時刻（マイクロ秒）(**Deprecated**)
      example: '2019-10-29T03:04:05.234567Z'
      in: query
      name: end
      required: false
      schema:
        type: string
    QueryLabel:
      name: label
      in: query
      description: 信号定義のラベル
      required: false
      example: label
      schema:
        type: array
        items:
          type: string
    QueryPeriod:
      name: period
      in: query
      description: |-
        データポイントを指定した間隔（マイクロ秒）に間引きます。（ **Experimental** ）

        指定された間隔ごとに最新のデータポイントを残し、それ以外を除去します。 また、指定された間隔になるようにデータポイントの時刻を揃えます。
        ```
         --1--2----3---4--5---6-7--89-a---b-c---d--e--> period指定なし
         |     |     |     |     |     |     |     |
         |     |     |     |     |     |     |     |
         2-----3-----5-----7-----a-----c-----d-----e--> period指定あり

         |<--->| period
        ```
      required: false
      example: 10000
      schema:
        type: integer
        format: int64
    QueryStart:
      name: start
      in: query
      description: 取得対象範囲の始点（マイクロ秒単位のUNIX時刻）
      required: false
      example: 1505797626000000
      schema:
        type: integer
        format: int64
    QueryEnd:
      name: end
      in: query
      description: 取得対象範囲の終点（マイクロ秒単位のUNIX時刻）
      required: false
      example: 1505798226123456
      schema:
        type: integer
        format: int64
    QueryEdgeUUID:
      name: edge_uuid
      in: query
      description: エッジのUUID
      required: false
      example: 24dbdc29-165f-4919-b2ce-7a335282bde2
      schema:
        type: string
    pathMeasUUID:
      name: measurement_uuid
      in: path
      description: 計測のUUID
      required: true
      example: 2cc7de37-6f71-4458-887e-10e618a6fcfb
      schema:
        type: string
    page:
      name: page
      in: query
      description: 取得するページの番号
      required: false
      example: 1
      schema:
        type: integer
        format: int32
    order:
      name: order
      in: query
      description: 並べ替えの順序
      required: false
      example: asc
      schema:
        type: string
        enum:
          - asc
          - desc
    pathMeasBaseTimeType:
      name: type
      in: path
      description: 基準時刻のタイプ
      required: true
      example: ntp
      schema:
        type: string
        enum:
          - edge_rtc
          - ntp
          - gps
          - api_first_received
          - volatile
          - manual
    limit:
      name: limit
      in: query
      description: 1回のリクエストで取得する件数
      example: 1000
      schema:
        type: integer
        format: int32
    PathMeasSequenceGroupUUID:
      name: sequences_uuid
      in: path
      description: 計測シーケンスのUUID
      required: true
      example: 0b849907-9f04-4c87-b176-b73fb527e935
      schema:
        type: string
    PathMeasurementJobUUID:
      name: job_uuid
      in: path
      description: ジョブのUUID
      required: true
      example: ddba7729-3a53-42bb-a4cf-6d19a3e66deb
      schema:
        type: string
    QueryTag:
      name: tag.<key>
      in: query
      description: >-
        タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。

        キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。
        キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。

        `tag.<key>=<value>` 条件は複数個指定することができ、OR条件で使用されます。 ただし `!tag.<key>`
        と組み合わせた場合、  `!tag.<key>` が優先されます。


        例:

            | measurement marker | tag (key: value) |
            | ------------------ | ---------------- |
            | 1                  | a: value1        |
            |                    | c: value2        |
            |                    | e: 1             |

            | 2                  | a: b             |
            |                    | c: d             |

            | 3                  | a: b             |

          -  `?tag.e=` の場合、計測マーカー1番が取得されます。
          -  `?!tag.c=` の場合、計測マーカー3番が取得されます。
          -  `?tag.a=&!tag.e=` の場合、計測マーカー2、3番が取得されます。
          -  `?tag.a=val&tag.c=d` の場合、計測マーカー1、2番が取得されます。
      required: false
      example: include_tag_value
      schema:
        type: array
        items:
          type: string
    QueryNotTag:
      name: '!tag.<key>'
      in: query
      description: >-
        タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。

        タグの値は無視されます。

        `!tag.<key>` を複数個指定した場合、AND条件となります。 また、 `tag.<key>=<value>`
        と組み合わせて使用した場合、 `tag.<key>=<value>`  よりも `!tag.<key>` が優先されます。

        例: 上の `tag.<key>` の説明を参照してください。
      required: false
      example: exclude_tag_value
      schema:
        type: array
        items:
          type: string
    PathMeasurementMarkerUUID:
      name: measurement_marker_uuid
      in: path
      description: 計測マーカーのUUID
      required: true
      example: 27a841d8-78c0-4e5e-b0ee-ec1fafd90ef6
      schema:
        type: string
    MeasPathProjectUUID:
      name: project_uuid
      in: path
      description: プロジェクトのUUID
      required: true
      example: 75c55669-b2ab-4f14-a871-8571c6afa1ef
      schema:
        type: string
    QueryLimitMedia:
      name: limit
      in: query
      description: 1回のリクエストで取得する件数
      example: 1000
      schema:
        type: number
    QueryPageMedia:
      in: query
      name: page
      description: 取得するページ番号
      schema:
        type: integer
        default: 1
        minimum: 1
    QueryOrderMedia:
      name: order
      in: query
      description: 並べ替えの順序
      required: false
      example: asc
      schema:
        type: string
        enum:
          - asc
          - desc
    PathMeasUUIDMedia:
      in: path
      name: meas_uuid
      description: 計測のUUID
      required: true
      example: f967c530-f562-410a-991b-031c43142778
      schema:
        type: string
        example: f967c530-f562-410a-991b-031c43142778
    PathChannelMedia:
      in: path
      name: channel
      description: チャンネル
      required: true
      example: 1
      schema:
        type: integer
        example: 1
    QueryPerPageMedia:
      in: query
      name: per_page
      description: 1回のリクエストで取得する件数
      schema:
        type: integer
        maximum: 1000
        default: 100
    PathVideoUUID:
      in: path
      name: video_uuid
      required: true
      description: 変換元の動画（video）のUUID
      example: 68b91013-47e9-4e68-a965-892549587dfa
      schema:
        type: string
    PathJpegUUID:
      in: path
      name: jpeg_uuid
      required: true
      description: JPEGのUUID
      example: 3279bdfb-9079-417e-8f94-ee8126da5933
      schema:
        type: string
        example: 3279bdfb-9079-417e-8f94-ee8126da5933
    PathMP4UUID:
      in: path
      name: mp4_uuid
      required: true
      description: MP4のUUID
      example: 34cd9cc6-4c62-4310-bbfd-04541f59ca0f
      schema:
        type: string
        example: 34cd9cc6-4c62-4310-bbfd-04541f59ca0f
    PathEdgeUUIDMedia:
      in: path
      name: edge_uuid
      description: エッジのUUID
      required: true
      example: 421fecd4-646b-4ab8-a715-c4b888964b11
      schema:
        type: string
        example: 421fecd4-646b-4ab8-a715-c4b888964b11
    MediaPathProjectUUID:
      name: project_uuid
      in: path
      description: プロジェクトのUUID
      required: true
      example: 75c55669-b2ab-4f14-a871-8571c6afa1ef
      schema:
        type: string
  schemas:
    OAuth2ClientGrantType:
      type: string
      description: グラントタイプ
      enum:
        - authorization_code
        - client_credentials
        - refresh_token
    OAuth2ClientResponseType:
      type: string
      description: グラントタイプ
      enum:
        - code
    OAuth2Client:
      type: object
      properties:
        client_id:
          type: string
          description: OAuth2クライアントID
          example: 4b54d475-0607-441e-b252-944a97337a9e
        name:
          type: string
          description: 名前
          example: My Client
        grant_types:
          type: array
          description: グラントタイプ
          items:
            $ref: '#/components/schemas/OAuth2ClientGrantType'
        token_endpoint_auth_method:
          type: string
          description: トークンエンドポイントの認証方式
          enum:
            - none
            - client_secret_post
            - client_secret_basic
            - tls_client_auth
        redirect_uris:
          type: array
          description: 認可後のリダイレクト先URI
          items:
            type: string
            example: http://localhost:8080/
        response_types:
          type: array
          description: レスポンスタイプ
          items:
            $ref: '#/components/schemas/OAuth2ClientResponseType'
        scopes:
          type: array
          description: スコープ
          items:
            type: string
            example: meas:r
        audiences:
          type: array
          description: オーディエンス
          items:
            type: string
            example: audiences
        tls_client_auth_subject_dn:
          type: string
          description: TLSクライアント認証のサブジェクトDN
          example: >-
            SERIALNUMBER=0001,CN=CommonName,OU=OrganizationalUnit,O=Organization,POSTALCODE=PostalCode,STREET=StreetAddress,L=Locality,ST=Province,C=COUNTRY
      required:
        - client_id
        - name
        - type
        - grant_types
        - token_endpoint_auth_method
        - redirect_uris
        - response_types
        - scopes
        - audiences
        - tls_client_auth_subject_dn
    AuthPage:
      type: object
      required:
        - next
        - prev
        - total_page
        - total_count
      properties:
        next:
          type: boolean
          description: 次のページがあるかどうか
          example: true
        prev:
          type: boolean
          description: 前のページがあるかどうか
          example: true
        next_page:
          type: integer
          format: int64
          description: 取得対象の次のページ番号。`next` がtrueの場合のみ表示。
          example: 1
        prev_page:
          type: integer
          format: int64
          description: 取得対象の前のページ番号。`next` がtrueの場合のみ表示。
          example: 1
        total_page:
          type: integer
          format: int64
          description: 取得対象の総ページ数
          example: 1
        total_count:
          type: integer
          format: int64
          description: 取得対象の総件数
          example: 1
    OAuth2Clients:
      type: object
      title: Roles
      required:
        - items
        - page
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OAuth2Client'
        page:
          $ref: '#/components/schemas/AuthPage'
    CheckHTTPAuthorizationRequest:
      title: CheckAuthorizationRequest
      type: object
      description: >-
        アクセス制御可能かどうかを判定します。

        ###  サブジェクト指定なしの場合

        リクエストのスコープのみでアクセス判定を行います。

        ###  サブジェクト指定ありの場合

        パスを分類し、分類した結果によって処理が変わります。

        ####  パスがプロジェクトコンテキストの場合

        サブジェクトがプロジェクトに所属しているかを確認し、所属している場合は、サブジェクトがメンバーの場合そのプロジェクトにおけるスコープからアクセス判定を行います。サブジェクトがエッジの場合はリクエストのスコープからアクセス判定を行います。


        ###  パスがグループコンテキストの場合

        サブジェクトがプロジェクトに所属しているかを確認し、所属している場合は、そのプロジェクトにおけるスコープからアクセス判定を行います。

        ###  パスがその他の場合

        リクエストのスコープからアクセス判定を行います。
      required:
        - scopes
        - path
        - method
      properties:
        subject:
          type: string
          example: eb0398f0-3631-470a-abed-0ac3763cf90d
          description: 認証主体を指定します。通常アクセスユーザーのUUIDかアクセスエッジのUUIDを指定します。
        scopes:
          type: array
          example:
            - scope1
          items:
            type: string
          description: スコープを指定します。前述の説明を参照ください。
        path:
          type: string
          example: /resource/path
        method:
          type: string
          enum:
            - GET
            - POST
            - PUT
            - PATCH
            - DELETE
          example: POST
    CheckAuthorizationResponse:
      title: CheckAuthorizationResponse
      type: object
      required:
        - result
      properties:
        result:
          type: boolean
          example: true
    UpdateOAuth2ClientRequest:
      type: object
      properties:
        name:
          type: string
          description: 名前
          maxLength: 256
          minLength: 1
          example: My Client
        redirect_uris:
          type: array
          description: 認可後のリダイレクト先URI
          maximum: 10
          items:
            type: string
            maxLength: 256
            example: http://localhost:8080
            description: グラントタイプが `authorization_code` のときに必要です。
    EdgeOwner:
      type: object
      required:
        - user_uuid
      properties:
        user_uuid:
          type: string
          description: 所有者ユーザーのUUID
          example: 84693d9e-0f1a-457b-b417-a7c697cffdce
    Edge:
      type: object
      properties:
        uuid:
          type: string
          description: エッジのUUID
          example: 6b4f4bce-ba32-4ad9-b808-39e2d68b33ee
        name:
          type: string
          description: エッジの名前
          example: my-edge
        nickname:
          type: string
          description: エッジの表示名
          example: My Edge
        description:
          type: string
          description: エッジの説明
          example: Description
        owner:
          $ref: '#/components/schemas/EdgeOwner'
        created_at:
          type: string
          description: 作成日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
        updated_at:
          type: string
          description: 最終更新日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
        client_secret:
          type: string
          description: エッジのクライアントシークレット
          example: secret
      required:
        - uuid
        - name
        - nickname
        - description
        - created_at
        - updated_at
    Edges:
      type: object
      title: Edges
      required:
        - items
        - page
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Edge'
        page:
          $ref: '#/components/schemas/AuthPage'
    CreateEdgeRequest:
      type: object
      required:
        - name
      properties:
        name:
          description: エッジの名前
          example: edge
          minLength: 1
          maxLength: 255
          type: string
          pattern: ^[0-9a-zA-Z-_]*$
        nickname:
          description: エッジの表示名
          maxLength: 511
          example: nickname
          type: string
        description:
          description: エッジの説明
          maxLength: 65535
          example: description
          type: string
    PatchEdgeRequest:
      type: object
      properties:
        name:
          type: string
          description: エッジの名前
          minLength: 1
          maxLength: 255
          example: edge_name
          pattern: ^[0-9a-zA-Z-_]*$
        nickname:
          description: エッジの表示名
          maxLength: 511
          example: nickname
          type: string
        description:
          description: エッジの説明
          maxLength: 65535
          example: description
          type: string
    AssignOwnerRequest:
      type: object
      required:
        - user_uuid
      properties:
        user_uuid:
          type: string
          description: 所有者とするユーザーのUUID
          example: 0932ff17-567c-4ac8-a40d-136357890f7b
    ErrorProblem:
      type: object
      required:
        - type
        - title
      properties:
        type:
          description: エラーのタイプ
          type: string
          enum:
            - about:blank
            - invalid_request
            - conflict
            - forbidden
            - account_locked
            - exceeded_max_groups_count
            - exceeded_max_projects_count_per_group
            - conflict_project_edge_uuid
            - conflict_project_edge_nickname
        title:
          description: エラーのタイトル
          type: string
        properties:
          description: 無効なパラメーターについての情報
          type: object
    RevokeTokenRequest:
      type: object
      properties:
        client_id:
          description: OAuth2クライアントID
          type: string
        token_type_hint:
          description: OAuth2トークンタイプについてのヒント
          default: refresh_token
          enum:
            - access_token
            - refresh_token
        token:
          description: >-
            無効化したいリフレッシュトークンまたはアクセストークン。

            指定を省略した場合、サーバーは、cookieの `_bearer_token`
            に指定されたアクセストークン、または、Authorizationヘッダーに指定されたアクセストークン（ `Bearer`
            トークン）を無効化します。
          type: string
      required:
        - client_id
    JSONWebKey:
      type: object
      description: See [JSON Web Key (JWK)](https://datatracker.ietf.org/doc/html/rfc7517)
      properties:
        use:
          type: string
        kty:
          type: string
        kid:
          type: string
        crv:
          type: string
        alg:
          type: string
        k:
          type: string
          format: byte
        x:
          type: string
          format: byte
        'y':
          type: string
          format: byte
        'n':
          type: string
          format: byte
        e:
          type: string
          format: byte
        d:
          type: string
          format: byte
        p:
          type: string
          format: byte
        q:
          type: string
          format: byte
        dp:
          type: string
          format: byte
        dq:
          type: string
          format: byte
        qi:
          type: string
          format: byte
        x5c:
          type: array
          items:
            type: string
        x5u:
          type: string
          format: url
        x5t:
          type: string
        x5t#S256:
          type: string
    OAuth2JWKs:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/JSONWebKey'
    UserEmail:
      type: object
      required:
        - id
        - address
        - verified
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          description: メールアドレスのID
          format: int64
          example: 1
        address:
          type: string
          description: メールアドレス
          example: intdash@example.com
        verified:
          type: boolean
          description: '`true` の場合、確認メールによるメールアドレス確認が済んでいます。'
          example: false
        created_at:
          type: string
          description: 作成日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
        updated_at:
          type: string
          description: 最終更新日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
    UserPassword:
      type: object
      title: UserPassword
      required:
        - attempt_count
        - is_temporary
        - last_attempt_at
        - created_at
        - updated_at
      properties:
        attempt_count:
          type: integer
          description: ログイン失敗回数。ログインに成功すると0にリセットされます。
          format: int64
          example: 1
        is_temporary:
          type: boolean
          description: '`true` の場合、このユーザーのパスワードは一時パスワードです。'
          example: false
        temporary_password:
          type: string
          description: 一時パスワード
          example: password
        last_attempt_at:
          type: string
          description: 最終ログイン試行日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
        expired_at:
          type: string
          description: パスワードの有効期限
          example: '2000-01-01T00:00:00Z'
          format: date-time
        created_at:
          type: string
          description: 作成日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
        updated_at:
          type: string
          description: 最終更新日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
    User:
      type: object
      required:
        - uuid
        - name
        - nickname
        - disabled
        - description
        - password
        - is_super
        - last_sign_in_at
        - emails
        - roles
        - created_at
        - updated_at
      properties:
        uuid:
          type: string
          description: ユーザーのUUID
          example: 0932ff17-567c-4ac8-a40d-136357890f7b
        name:
          type: string
          description: ユーザーの名前
          example: intdash
        nickname:
          type: string
          description: ユーザーの表示名
          example: intdash-nickname
        disabled:
          type: boolean
          description: |-
            * `true`: このユーザーは無効化されています
            * `false` : このユーザーは有効です。
          example: false
        description:
          type: string
          description: ユーザーの説明
          example: description
        is_super:
          type: boolean
          description: '`true` の場合、このユーザーはスーパーユーザーです。'
          example: false
        emails:
          type: array
          items:
            $ref: '#/components/schemas/UserEmail'
        last_sign_in_at:
          type: string
          description: 最後にログインした日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
        roles:
          type: array
          description: 割り当てられたロールのUUID
          items:
            type: string
            example: af22c56b-6b3e-4807-a165-07e9dbd7e25b
        password:
          $ref: '#/components/schemas/UserPassword'
        created_at:
          type: string
          description: 作成日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
        updated_at:
          type: string
          description: 最終更新日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
    PatchUserRequest:
      type: object
      properties:
        name:
          type: string
          description: ユーザーの名前
          example: username
          minLength: 1
          maxLength: 256
          pattern: ^[0-9a-zA-Z-_]*$
        nickname:
          type: string
          description: ユーザーの表示名
          example: nickname
          maxLength: 512
        description:
          type: string
          description: ユーザーの説明
          example: user description
          maxLength: 65536
    CreateOAuth2ClientClientCredentialsRequest:
      type: object
      required:
        - name
        - grant_type
        - token_endpoint_auth_method
      properties:
        name:
          type: string
          description: 名前
          maxLength: 256
          minLength: 1
          example: My Client
        grant_type:
          type: string
          description: グラントタイプ
          enum:
            - authorization_code
            - client_credentials
        token_endpoint_auth_method:
          type: string
          description: トークンエンドポイントの認証方式
          default: client_secret_post
          enum:
            - client_secret_post
            - tls_client_auth
        tls_client_auth_subject_dn:
          type: string
          description: TLSクライアント認証のサブジェクトDN
          maxLength: 512
          example: >-
            SERIALNUMBER=0001,CN=CommonName,OU=OrganizationalUnit,O=Organization,POSTALCODE=PostalCode,STREET=StreetAddress,L=Locality,ST=Province,C=COUNTRY
    CreateOAuth2ClientAuthorizationCodeRequest:
      allOf:
        - required:
            - redirect_uris
          properties:
            name:
              type: string
              description: 名前
              example: My Client
            grant_type:
              type: string
              description: グラントタイプ
            redirect_uris:
              type: array
              maximum: 10
              items:
                type: string
                maxLength: 256
                example: http://localhost:8080
                description: グラントタイプが `authorization_code` の場合のみ必要です。
            token_endpoint_auth_method:
              type: string
              description: トークンエンドポイントの認証方式
              default: client_secret_basic
              enum:
                - client_secret_basic
                - none
            tls_client_auth_subject_dn:
              type: string
              description: TLSクライアント認証のサブジェクトDN
        - $ref: '#/components/schemas/CreateOAuth2ClientClientCredentialsRequest'
    CreateMyOAuth2ClientRequest:
      oneOf:
        - $ref: '#/components/schemas/CreateOAuth2ClientAuthorizationCodeRequest'
        - $ref: '#/components/schemas/CreateOAuth2ClientClientCredentialsRequest'
      discriminator:
        propertyName: grant_type
        mapping:
          authorization_code: '#/components/schemas/CreateOAuth2ClientAuthorizationCodeRequest'
          client_credentials: '#/components/schemas/CreateOAuth2ClientClientCredentialsRequest'
    OAuth2ClientWithSecret:
      allOf:
        - $ref: '#/components/schemas/OAuth2Client'
        - type: object
          properties:
            client_id:
              type: string
              description: OAuth2クライアントID
            client_secret:
              type: string
              description: token_endpoint_auth_methodが `none` 以外だったら required
            name:
              type: string
              description: 名前
            grant_types:
              type: array
              description: グラントタイプ
              items:
                type: string
            token_endpoint_auth_method:
              type: string
              description: トークンエンドポイントの認証方式
            redirect_uris:
              type: array
              description: 認可後のリダイレクト先URI
              items:
                type: string
            response_types:
              type: array
              description: レスポンスタイプ
              items:
                type: string
            scopes:
              type: array
              description: スコープ
              items:
                type: string
            audiences:
              type: array
              description: オーディエンス
              items:
                type: string
            tls_client_auth_subject_dn:
              type: string
              description: TLSクライアント認証のサブジェクトDN
              example: >-
                SERIALNUMBER=0001,CN=CommonName,OU=OrganizationalUnit,O=Organization,POSTALCODE=PostalCode,STREET=StreetAddress,L=Locality,ST=Province,C=COUNTRY
    CheckMeHTTPAuthorizationRequest:
      title: CheckAuthorizationRequest
      type: object
      description: 認証ユーザー自身がアクセス可能かどうかを判定します。
      required:
        - path
        - method
      properties:
        path:
          type: string
          example: /resource/path
        method:
          type: string
          enum:
            - GET
            - POST
            - PUT
            - PATCH
            - DELETE
          example: POST
    Users:
      type: object
      title: Users
      required:
        - items
        - page
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/User'
        page:
          $ref: '#/components/schemas/AuthPage'
    CreateUserRequest:
      type: object
      required:
        - name
        - role_uuids
      properties:
        name:
          description: ユーザーの名前
          example: intdash
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^[0-9a-zA-Z-_]*$
        nickname:
          description: ユーザーの表示名
          example: nickname
          maxLength: 512
          type: string
        description:
          description: ユーザーの説明
          example: description
          maxLength: 65536
          type: string
        role_uuids:
          type: array
          items:
            type: string
            example: af22c56b-6b3e-4807-a165-07e9dbd7e25b
          description: ロールのUUID。指定したロールがユーザーに割り当てられます。
        email:
          description: ユーザーのメールアドレス
          minLength: 1
          maxLength: 256
          example: intdash@example.com
          type: string
    CreateEmailRequest:
      type: object
      required:
        - address
      properties:
        address:
          type: string
          description: メールアドレス
          minLength: 1
          maxLength: 256
          example: intdash@example.com
    PatchEmailRequest:
      type: object
      required:
        - address
      properties:
        address:
          type: string
          description: メールアドレス
          minLength: 1
          maxLength: 256
          example: intdash@example.com
    UserEmailVerification:
      type: object
      required:
        - email_id
        - expired_at
        - created_at
        - updated_at
      properties:
        email_id:
          type: integer
          description: メールアドレスのID
          format: int64
          example: '1'
        expired_at:
          type: string
          description: 有効期限
          example: '2100-01-01T00:00:00Z'
          format: date-time
        created_at:
          type: string
          description: 作成日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
        updated_at:
          type: string
          description: 最終更新日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
    UpdateEmailVerifiedRequest:
      type: object
      required:
        - verification_token
      properties:
        verification_token:
          type: string
          description: メールアドレス確認用トークン
          minLength: 1
          maxLength: 4096
          example: verification.token
    ChangePasswordRequest:
      title: ChangePasswordRequest
      type: object
      required:
        - password
      properties:
        password:
          type: string
          description: 新しいパスワード
          pattern: '[a-zA-Z0-9!"#$%&''()*+,-./:;<=>?@\{\}|\[\]]*'
          minLength: 8
          maxLength: 512
          example: new-password
        old_password:
          type: string
          description: 現在のパスワード
          maxLength: 512
          example: old-password
        recovery_token:
          type: string
          description: リカバリートークン。パスワード再設定用の確認メールに含まれています。
          example: recovery.token
    CheckPasswordResult:
      type: object
      properties:
        valid:
          type: boolean
          example: false
          description: '`true` の場合、ポリシーに適合しています。'
        errors:
          type: array
          description: ポリシー不適合の場合、その詳細
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                  - min_length
                  - max_length
                  - min_symbol_num
                  - min_uppercase_alphabet_num
                  - min_lowercase_alphabet_num
                  - min_number_num
                  - min_lengthmin_alphabet_num
                  - allowed_same_username
                  - allowed_same_previous_password
                description: ポリシーの種類
              value:
                type: string
                example: 10
                description: ポリシーで指定されている数値
              message:
                type: string
                example: messsage
                description: ポリシーに関する説明
            required:
              - type
              - message
      required:
        - valid
    AllowedEndpoint:
      type: object
      title: AllowedEndpoint
      properties:
        path:
          type: string
          example: /resources
          description: リソースパス。グロブを使って指定可能です。
        method:
          type: string
          example: GET
          description: HTTPメソッド。グロブを使って指定可能です。
      required:
        - method
        - path
    ISCPMessageType:
      type: string
      description: iSCPメッセージタイプ
      enum:
        - upstream_spec_request
        - downstream_spec_request
        - unit
        - eos
        - sos
        - ping
      example: eos
    AllowedISCPMessage:
      type: object
      title: AllowedISCPMessage
      properties:
        type:
          $ref: '#/components/schemas/ISCPMessageType'
      required:
        - type
    DeniedEndpoint:
      type: object
      title: DeniedEndpoint
      properties:
        path:
          type: string
          example: /denied_resources
          description: リソースパス。グロブを使って指定可能です。
        method:
          type: string
          example: GET
          description: HTTPメソッド。グロブを使って指定可能です。
      required:
        - method
        - path
    Scope:
      type: object
      properties:
        uuid:
          type: string
          description: スコープのUUID
          example: 4688a07a-0cbc-4597-8c87-538e744bc90d
        name:
          type: string
          description: スコープの名前
          example: meas:r
        allowed_endpoints:
          type: array
          description: 許可されているエンドポイント
          items:
            $ref: '#/components/schemas/AllowedEndpoint'
        allowed_iscp_messages:
          type: array
          description: 許可されているiSCPメッセージ
          items:
            $ref: '#/components/schemas/AllowedISCPMessage'
        denied_endpoints:
          type: array
          description: 拒否されているエンドポイント
          items:
            $ref: '#/components/schemas/DeniedEndpoint'
        created_at:
          type: string
          description: 作成日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
        updated_at:
          type: string
          description: 最終更新日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
      required:
        - uuid
        - name
        - allowed_endpoints
        - allowed_iscp_messages
        - denied_endpoints
        - created_at
        - updated_at
    Role:
      type: object
      properties:
        uuid:
          title: UUID
          type: string
          description: ロールのUUID
          example: 6b4f4bce-ba32-4ad9-b808-39e2d68b33ee
        name:
          type: string
          description: ロールの名前
          example: member
        scopes:
          type: array
          description: ロールのスコープ
          items:
            $ref: '#/components/schemas/Scope'
        created_at:
          type: string
          description: 作成日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
        updated_at:
          type: string
          description: 最終更新日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
      required:
        - uuid
        - name
        - scopes
        - created_at
        - updated_at
    Roles:
      type: object
      title: Roles
      required:
        - items
        - page
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        page:
          $ref: '#/components/schemas/AuthPage'
    UserAPIToken:
      type: object
      required:
        - id
        - name
        - scopes
        - expired_at
        - last_used_at
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          description: APIトークンのID
          format: int64
          example: 1
        name:
          type: string
          description: APIトークンの名前
          example: for test
        token:
          type: string
          description: APIトークン
          example: token
        scopes:
          type: array
          description: スコープ
          items:
            $ref: '#/components/schemas/Scope'
        last_used_at:
          type: string
          description: 最後に使用された日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
        expired_at:
          type: string
          description: 有効期限
          example: '2000-01-01T00:00:00Z'
          format: date-time
        created_at:
          type: string
          description: 作成日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
        updated_at:
          type: string
          description: 最終更新日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
    UserAPITokens:
      type: object
      required:
        - items
        - page
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserAPIToken'
        page:
          $ref: '#/components/schemas/AuthPage'
    CreateUserAPITokenRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: for test
          minLength: 1
          maxLength: 256
          description: APIトークンの名前
        expired_at:
          type: string
          description: 有効期限
          format: date-time
          example: '2000-01-02T03:04:05.00Z'
    UpdateUserAPITokenRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: for test
          maxLength: 256
          description: APIトークンの名前
    Project:
      type: object
      required:
        - uuid
        - group_uuid
        - name
        - created_at
        - updated_at
      properties:
        uuid:
          type: string
          description: プロジェクトのUUID
          example: 6b4f4bce-ba32-4ad9-b808-39e2d68b33ee
        parent_group_uuid:
          type: string
          description: 親グループのUUID
          example: 0932ff17-567c-4ac8-a40d-136357890f7b
        name:
          type: string
          description: プロジェクトの名前
          example: intdash
        created_at:
          type: string
          description: 作成日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
        updated_at:
          type: string
          description: 最終更新日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
    Projects:
      type: object
      title: Projects
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        page:
          $ref: '#/components/schemas/AuthPage'
    Group:
      type: object
      required:
        - uuid
        - name
        - parent_group_uuid
        - created_at
        - updated_at
      properties:
        uuid:
          type: string
          description: グループのUUID
          example: 0932ff17-567c-4ac8-a40d-136357890f7b
        parent_group_uuid:
          type: string
          description: 親グループのUUID。nullの場合、親グループは存在しません。
          nullable: true
          example: 76b35658-9d77-40d0-8ef8-5c3f520db30d
        name:
          type: string
          description: グループの名前
          example: intdash
        created_at:
          type: string
          description: 作成日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
        updated_at:
          type: string
          description: 最終更新日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
    Groups:
      type: object
      title: Groups
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Group'
        page:
          $ref: '#/components/schemas/AuthPage'
    APITokenIntrospectionRequest:
      title: APITokenIntrospectionRequest
      type: object
      required:
        - token
      properties:
        token:
          description: APIトークン
          type: string
          example: message.signature
    APITokenIntrospectionResponse:
      type: object
      required:
        - active
      properties:
        active:
          description: '`true` の場合、このAPIトークンは有効です。'
          type: boolean
          example: true
        tenant_id:
          description: テナントID。デフォルトテナント以外を対象とする場合にのみ返されます。
          type: integer
          format: int64
          example: 78894671-b65a-4fe3-9370-2c8ad03dfaf9
        user_uuid:
          description: ユーザーのUUID
          type: string
          example: 0932ff17-567c-4ac8-a40d-136357890f7b
        scopes:
          description: APIトークンが認可されているスコープ
          type: array
          items:
            $ref: '#/components/schemas/Scope'
        expired_at:
          description: APIトークンの有効期限
          type: string
          example: '2000-01-02T03:04:05Z'
          format: date-time
        created_at:
          description: APIトークンの作成日時
          type: string
          example: '2000-01-02T03:04:05Z'
          format: date-time
    GroupName:
      description: グループの名前
      example: my-group
      minLength: 1
      maxLength: 255
      type: string
    CreateGroupRequest:
      type: object
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/GroupName'
    UpdateGroupRequest:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/GroupName'
    Member:
      type: object
      required:
        - user_uuid
        - name
        - emails
        - role_uuids
        - inherited_role_uuids
        - is_owner
        - created_at
        - updated_at
      properties:
        user_uuid:
          type: string
          description: メンバーのユーザーUUID
          example: 6b4f4bce-ba32-4ad9-b808-39e2d68b33ee
        name:
          type: string
          description: メンバーの名前
          example: username
        emails:
          type: array
          items:
            $ref: '#/components/schemas/UserEmail'
        inherited_role_uuids:
          description: 親グループから継承されたメンバーのロールUUID
          type: array
          items:
            type: string
            example: b344c708-40bc-4088-8868-2701c41d9dc2
        role_uuids:
          type: array
          description: メンバーのロールUUID
          items:
            type: string
            example: 59530a1d-4491-4b24-b6c6-121b4c24bb21
        is_owner:
          type: boolean
          description: '`true` の場合、このメンバーはオーナーです。'
        created_at:
          type: string
          description: 作成日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
        updated_at:
          type: string
          description: 最終更新日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
    Members:
      type: object
      required:
        - items
        - page
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Member'
        page:
          $ref: '#/components/schemas/AuthPage'
    RoleUUIDs:
      description: ユーザーに割り当てるロールのUUID。オーナーのロールUUIDは変更できません。
      type: array
      items:
        type: string
        example: 6b4f4bce-ba32-4ad9-b808-39e2d68b33ee
        maxLength: 36
    AddGroupMemberRequest:
      type: object
      required:
        - role_uuids
      properties:
        user_email_address:
          description: ユーザーのメールアドレス。`user_uuid` といずれか必須です。`user_uuid` を優先します。
          example: intdash@example.com
          type: string
          maxLength: 512
        user_uuid:
          description: ユーザーのUUID。`user_email_address` といずれか必須です。`user_uuid` を優先します。
          example: 0932ff17-567c-4ac8-a40d-136357890f7b
          type: string
          maxLength: 36
        role_uuids:
          $ref: '#/components/schemas/RoleUUIDs'
    ProjectName:
      type: string
      description: プロジェクトの名前
      example: my-project
      minLength: 1
      maxLength: 255
    CreateProjectRequest:
      type: object
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/ProjectName'
    UpdateProjectRequest:
      type: object
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/ProjectName'
    ProjectEdge:
      type: object
      required:
        - edge_uuid
        - name
        - nickname
        - created_at
        - updated_at
      properties:
        edge_uuid:
          type: string
          description: エッジのUUID
          example: 756c0e45-21e3-4942-92d9-4ef44a0add26
        name:
          type: string
          description: エッジの名前
          example: edge-name
        nickname:
          type: string
          description: プロジェクトにおけるエッジのニックネーム
          example: Edge Nickname
        created_at:
          type: string
          description: 作成日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
        updated_at:
          type: string
          description: 最終更新日時
          example: '2000-01-01T00:00:00Z'
          format: date-time
    ProjectEdges:
      type: object
      title: ProjectEdges
      required:
        - items
        - page
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProjectEdge'
        page:
          $ref: '#/components/schemas/AuthPage'
    ProjectEdgeNickname:
      description: プロジェクトにおけるエッジのニックネーム
      example: Edge Nickname
      minLength: 1
      maxLength: 255
      type: string
    AddProjectEdgeRequest:
      type: object
      required:
        - edge_name
        - nickname
      properties:
        edge_name:
          description: 追加したいエッジの名前
          example: edge-name
          minLength: 1
          maxLength: 255
          type: string
        nickname:
          $ref: '#/components/schemas/ProjectEdgeNickname'
    UpdateProjectEdgeRequest:
      type: object
      properties:
        nickname:
          $ref: '#/components/schemas/ProjectEdgeNickname'
    AddProjectMemberRequest:
      type: object
      required:
        - role_uuids
      properties:
        user_email_address:
          description: ユーザーのメールアドレス。`user_uuid` といずれか必須です。`user_uuid` を優先します。
          example: intdash@example.com
          type: string
          maxLength: 512
        user_uuid:
          description: ユーザーのUUID。`user_email_address` といずれか必須です。`user_uuid` を優先します。
          example: 0932ff17-567c-4ac8-a40d-136357890f7b
          type: string
          maxLength: 36
        role_uuids:
          description: ユーザーに割り当てるロールのUUID
          type: array
          items:
            type: string
            example: 6b4f4bce-ba32-4ad9-b808-39e2d68b33ee
            maxLength: 36
    UpdateProjectMemberRequest:
      type: object
      properties:
        role_uuids:
          $ref: '#/components/schemas/RoleUUIDs'
    UpdateGroupMemberRequest:
      type: object
      properties:
        role_uuids:
          $ref: '#/components/schemas/RoleUUIDs'
    Scopes:
      type: object
      title: Scopes
      required:
        - items
        - page
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Scope'
        page:
          $ref: '#/components/schemas/AuthPage'
    EdgeConnectionEdge:
      type: object
      nullable: true
      required:
        - uuid
        - name
        - nickname
        - description
        - disabled
        - internal
        - protected
        - type
        - last_login_at
        - last_lived_at
        - created_at
        - updated_at
      properties:
        uuid:
          type: string
          description: エッジのUUID
        name:
          type: string
          description: エッジの名前
        nickname:
          type: string
          description: エッジの表示名
        description:
          type: string
          description: エッジの説明
        disabled:
          type: boolean
          description: |-
            * `true` : このエッジは無効化されています。
            * `false` : このエッジは有効です。
        internal:
          type: boolean
          description: |-
            * `true` : このエッジは内部エッジ（システム内部で使用される特別なエッジ）です。
              このエッジの変更や削除はできません。
            * `false` : このエッジは内部エッジではありません。
        protected:
          type: boolean
          description: |-
            * `true` : このエッジは保護されています。このエッジの変更や削除はできません。
            * `false` : このエッジは保護されていません。
        type:
          type: string
          enum:
            - user
            - device
          description: エッジのタイプ
        last_login_at:
          type: string
          description: エッジが最後にログインした日時
        last_lived_at:
          type: string
          description: >-
            サーバーがこのエッジ接続を確認できた最後の日時。
            エッジとサーバーがWebSocketで接続されている間、この値は数秒おきに最新の日時に更新されます。
            WebSocketが切断されると、それ以上更新されなくなります。 更新は数秒おきであるため、WebSocketが切断された場合に
            その切断の時刻が正確に記録されるわけではありません。
        created_at:
          type: string
          description: エッジが作成された日時
        updated_at:
          type: string
          description: エッジの最終更新日時
    EdgeConnectionItem:
      type: object
      properties:
        uuid:
          type: string
          description: エッジ接続のUUID
        last_lived_at:
          type: string
          description: >-
            サーバーがこのエッジ接続を確認できた最後の日時。
            エッジとサーバーがWebSocketで接続されている間、この値は数秒おきに最新の日時に更新されます。
            WebSocketが切断されると、それ以上更新されなくなります。 更新は数秒おきであるため、WebSocketが切断された場合に
            その切断の時刻が正確に記録されるわけではありません。
        edge:
          $ref: '#/components/schemas/EdgeConnectionEdge'
        created_at:
          type: string
          description: エッジ接続が作成された日時
        updated_at:
          type: string
          description: エッジ接続の最終更新日時
      required:
        - uuid
        - edge
        - last_lived_at
        - created_at
        - updated_at
    EdgeConnectionList:
      type: object
      required:
        - items
        - page
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/EdgeConnectionItem'
        page:
          properties:
            first:
              description: '`true` の場合、現在のページが最初のページです。'
              type: boolean
            last:
              description: '`true` の場合、現在のページが最後のページです。'
              type: boolean
            next:
              description: 次のページのパス。現在のページが最後のページの場合は空文字列です。
              type: string
            previous:
              description: 前のページのパス。現在のページが最初のページの場合は空文字列です。
              type: string
            total_count:
              description: 取得対象の総件数
              type: integer
          required:
            - total_count
            - first
            - last
            - next
            - previous
          type: object
    EdgeConnectionDownstream:
      type: object
      required:
        - stream_id
        - src_edge_uuid
        - dst_edge_uuid
        - last_received_at
        - received_close_request
        - created_at
        - updated_at
      properties:
        stream_id:
          type: integer
          description: ダウンストリームのストリームID
        src_edge_uuid:
          type: string
          description: ダウンストリームの送信元エッジUUID
        dst_edge_uuid:
          type: string
          description: ダウンストリームの宛先エッジUUID
        last_received_at:
          type: string
          description: ダウンストリームで最後にデータポイントが受信された日時。 実際の最後のデータポイントの受信よりも最大で10秒後の値となる場合があります。
        received_close_request:
          type: boolean
          description: |-
            * `true` : このダウンストリームについてのclose requestを受信済みです。
            * `false` : このダウンストリームについてのclose requestを受信していません。
        created_at:
          type: string
          description: ダウンストリームが作成された日時
        updated_at:
          type: string
          description: ダウンストリームの最終更新日時
    EdgeConnectionUpstream:
      type: object
      required:
        - stream_id
        - measurement_uuid
        - src_edge_uuid
        - resend
        - store
        - last_received_at
        - received_close_request
        - created_at
        - updated_at
      properties:
        stream_id:
          type: integer
          description: アップストリームのストリームID
        measurement_uuid:
          type: string
          description: アップストリームの計測UUID
        src_edge_uuid:
          type: string
          description: アップストリームの送信元エッジUUID
        resend:
          type: boolean
          description: |-
            * `true` : このアップストリームは再送です。
            * `false` : このアップストリームは再送ではありません。
        store:
          type: boolean
          description: |-
            * `true` : このアップストリームで送信されたデータポイントはサーバーに保存されます。
            * `false` : このアップストリームで送信されたデータポイントはサーバーに保存されません。
        last_received_at:
          type: string
          description: アップストリームで最後にデータポイントが送信された日時。 実際の最後のデータポイント送信よりも最大で10秒後の値となる場合があります。
        received_close_request:
          type: boolean
          description: |-
            * `true` : このアップストリームについてのclose requestを受信済みです。
            * `false` : このアップストリームについてのclose requestは受信していません。
        created_at:
          type: string
          description: アップストリームが作成された日時
        updated_at:
          type: string
          description: アップストリームの最終更新日時
    EdgeConnection:
      allOf:
        - $ref: '#/components/schemas/EdgeConnectionItem'
        - type: object
          required:
            - downstreams
            - upstreams
          properties:
            downstreams:
              type: array
              items:
                $ref: '#/components/schemas/EdgeConnectionDownstream'
              description: ダウンストリームについての情報
            upstreams:
              type: array
              items:
                $ref: '#/components/schemas/EdgeConnectionUpstream'
              description: アップストリームについての情報
    ISCPTicket:
      required:
        - ticket
        - expired_at
        - created_at
      type: object
      properties:
        ticket:
          type: string
          description: iSCPチケット
          example: >-
            VjVL9o7cj45Z1WJX-dPVZ0Z6i80xAfs6.AFVDLS0-iPfzKQN3m7j_pGpU7XSwliWopn9QvGtHf2Y=
        expired_at:
          type: string
          description: 有効期限
          format: date-time
        created_at:
          type: string
          description: 作成日時
          format: date-time
    DataPoint:
      discriminator:
        propertyName: data_id
        mapping:
          '*': '#/components/schemas/DataPointNormal'
          <channel>intdash/measurement/get/data/error: '#/components/schemas/DataPointError'
      oneOf:
        - $ref: '#/components/schemas/DataPointNormal'
        - $ref: '#/components/schemas/DataPointError'
    DataPointJSONLine:
      type: string
      format: binary
      description: >-
        JSONLines形式で返却します。一行で表現されるJSONスキーマは [DataPoint
        Model](https://docs.intdash.jp/api/intdash-api/main/spec_public.html#tag/meas_data_model)
        を参照ください。
    DataPointDataID:
      type: object
      description: データID
      required:
        - data_type
        - data_id
      properties:
        data_type:
          type: string
          description: データタイプ
          example: data_type
        data_id:
          type: string
          description: データID
          example: data_id
    DataPointDataIDs:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DataPointDataID'
    DataID:
      type: object
      description: データID
      required:
        - data_type
        - channel
        - data_id
      properties:
        data_type:
          type: integer
          format: int32
          description: データタイプ
        channel:
          type: integer
          format: int64
          description: チャンネル
        data_id:
          type: string
          description: データID
    DataIDs:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DataID'
    MeasurementBaseTimeType:
      type: string
      enum:
        - edge_rtc
        - ntp
        - gps
        - api_first_received
        - volatile
        - manual
        - undefined
      description: 計測の基準時刻タイプ
      example: edge_rtc
    MeasurementSequencesSummary:
      type: object
      properties:
        received_chunks_ratio:
          type: number
          description: 計測シーケンス回収率。計測内に含まれる計測シーケンスのうち、 サーバーへの保存が完了した計測シーケンスの割合です。
          minimum: 0
          maximum: 1
          example: 0.5
        received_data_points:
          type: integer
          format: int64
          description: サーバーが受信したデータポイントの数。符号無し64bit整数。
          minimum: 0
          maximum: 18446744073709552000
          example: 123456789
        expected_data_points:
          type: integer
          format: int64
          description: サーバーが受信することが想定されるデータポイントの総数（既に受信済みのデータポイントを含む）。符号無し64bit整数。
          minimum: 0
          maximum: 18446744073709552000
          example: 123456789
        status:
          type: string
          description: |-
            計測のステータス:
              - ready
                - 計測準備中
              - measuring
                - 計測中
              - resending
                - 再送中。計測（エッジにおけるデータの取得）は終了しましたが、エッジにデータが残っており、サーバーに再送中です。
              - finished（非推奨。段階的にcompletedへ移行）
                - 完了。サーバーへのデータの回収が完了しています。
              - completed
                - 完了。サーバーへのデータの回収が完了しています。
          enum:
            - ready
            - measuring
            - resending
            - finished
            - completed
          example: measuring
    MeasurementMarkerBase:
      type: object
      required:
        - uuid
        - name
        - description
        - type
        - detail
        - tag
        - created_at
        - created_by
        - updated_at
        - updated_by
      properties:
        uuid:
          type: string
          description: 計測マーカーのUUID
        name:
          type: string
          description: 計測マーカーの名前
        description:
          type: string
          description: 計測マーカーの説明
        type:
          type: string
          description: |-
            計測マーカーのタイプ
            - `point` : ポイントマーカー
            - `range` : 範囲マーカー
          enum:
            - point
            - range
        tag:
          type: object
          description: 計測マーカーに付与されたタグ
        created_at:
          type: string
          description: 計測マーカーの作成日時
        created_by:
          type: string
          description: 計測マーカー作成者
        updated_at:
          type: string
          description: 計測マーカーの最終更新日時
        updated_by:
          type: string
          description: 計測マーカーの最終更新者
    MeasurementMarkerDetailPoint:
      type: object
      properties:
        occurred_elapsed_time:
          description: この計測マーカーの時刻。計測の基準時刻からの経過時間（マイクロ秒）で表します。
          type: integer
          format: int64
    MeasurementMarkerPoint:
      allOf:
        - $ref: '#/components/schemas/MeasurementMarkerBase'
        - properties:
            detail:
              $ref: '#/components/schemas/MeasurementMarkerDetailPoint'
    MeasurementMarkerDetailRange:
      type: object
      properties:
        start_elapsed_time:
          type: integer
          format: int64
          description: この計測マーカーの始点。この計測の基準時刻からの経過時間（マイクロ秒）で表示します。
        end_elapsed_time:
          type: integer
          format: int64
          description: この計測マーカーの始点。この計測の基準時刻からの経過時間（マイクロ秒）で表示します。
    MeasurementMarkerRange:
      allOf:
        - $ref: '#/components/schemas/MeasurementMarkerBase'
        - properties:
            detail:
              $ref: '#/components/schemas/MeasurementMarkerDetailRange'
    MeasurementMarker:
      oneOf:
        - $ref: '#/components/schemas/MeasurementMarkerPoint'
        - $ref: '#/components/schemas/MeasurementMarkerRange'
      discriminator:
        propertyName: type
        mapping:
          point: '#/components/schemas/MeasurementMarkerPoint'
          range: '#/components/schemas/MeasurementMarkerRange'
    Measurement:
      required:
        - uuid
        - name
        - description
        - basetime
        - basetime_type
        - edge_uuid
        - received_data_points
        - protected
        - sequences
        - created_at
        - updated_at
        - duration
        - ended
        - processed_ratio
        - status
      properties:
        uuid:
          type: string
          description: 計測のUUID
          example: 2cc7de37-6f71-4458-887e-10e618a6fcfb
        name:
          type: string
          description: 計測の名前
          example: meas1
        description:
          type: string
          description: 計測の説明
          example: description of measurement
        basetime:
          type: string
          description: 計測の基準時刻（RFC3339形式）
        basetime_type:
          $ref: '#/components/schemas/MeasurementBaseTimeType'
        edge_uuid:
          type: string
          description: エッジのUUID
          example: 00de1861-6614-4435-af07-da9b4338d57c
        duration:
          deprecated: true
          type: integer
          format: int64
          description: 計測時間（ `max_elapsed_time` を使用してください）
          example: 100000000
        max_elapsed_time:
          type: integer
          format: int64
          description: 計測時間（マイクロ秒）
          example: 100000000
        completed:
          type: boolean
          description: '`true` の場合、この計測はサーバーへのデータの回収が完了しています。'
          example: true
        protected:
          type: boolean
          deprecated: true
          description: |-
            `true` の場合、計測は保護されています。保護されている計測は削除できません。
            保護されている計測を削除したい場合は、まず保護を解除してください。
          example: true
        sequences:
          $ref: '#/components/schemas/MeasurementSequencesSummary'
        markers:
          type: array
          items:
            $ref: '#/components/schemas/MeasurementMarker'
        created_at:
          type: string
          description: 計測の作成日時
          format: date-time
          example: '2017-02-11T01:23:45Z'
        updated_at:
          type: string
          description: 計測の最終更新日時
          format: date-time
          example: '2017-02-11T01:23:45Z'
        processed_ratio:
          deprecated: true
          type: number
          description: 代わりに `sequences.received_chunks_ratio` を使用してください。処理済み率を表します。
          example: 0.9
        ended:
          type: boolean
          deprecated: true
          description: 代わりに `sequences.status` を使用してください。エッジにおいてデータの取得が終了しているかどうかを示します。
          example: true
        status:
          type: string
          deprecated: true
          enum:
            - measuring
            - resending
            - finished
          description: |-
            代わりに `sequences.status` を使用してください。
            計測のステータスを表します:
              - measuring
                - 計測中
              - resending
                - 再送中。計測（エッジにおけるデータの取得）は終了しましたが、エッジにデータが残っており、サーバーに再送中です。
              - finished
                - 完了。サーバーへのデータの回収が完了しています。
    PageDetail:
      type: object
      required:
        - total_count
        - first
        - last
        - next
        - previous
      properties:
        total_count:
          type: integer
          format: int64
          description: 取得対象の総件数
        first:
          type: boolean
          description: '`true` の場合、現在のページが最初のページです。'
        last:
          type: boolean
          description: '`true` の場合、現在のページが最後のページです。'
        next:
          type: string
          description: 次のページのパス。現在のページが最後のページの場合は空文字列です。
        previous:
          type: string
          description: 次のページのパス。現在のページが最後のページの場合は空文字列です。
    Measurements:
      type: object
      required:
        - items
        - page
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Measurement'
        page:
          $ref: '#/components/schemas/PageDetail'
    MeasCreate:
      properties:
        name:
          type: string
          description: 計測の名前
        description:
          type: string
          description: 計測の説明
        basetime:
          type: string
          description: 計測の基準時刻（計測が開始された時刻）
          format: date-time
        basetime_type:
          $ref: '#/components/schemas/MeasurementBaseTimeType'
        edge_uuid:
          type: string
          description: この計測に関連付けられたエッジのUUID
        protected:
          type: boolean
          deprecated: true
          description: '`true` の場合、計測は保護されます。保護されている計測は削除できません。'
      required:
        - edge_uuid
        - basetime_type
        - basetime
        - protected
    MeasReplace:
      type: object
      properties:
        name:
          type: string
          description: 計測の名前
        description:
          type: string
          description: 計測の説明
        basetime:
          type: string
          format: date-time
          description: 計測の基準時刻
        basetime_type:
          $ref: '#/components/schemas/MeasurementBaseTimeType'
    SequenceSummary:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          description: 計測のステータス
    MeasBaseTime:
      type: object
      required:
        - type
        - basetime
        - created_at
        - updated_at
      properties:
        type:
          $ref: '#/components/schemas/MeasurementBaseTimeType'
        basetime:
          type: string
          description: 基準時刻（計測が開始された時刻）（RFC3339形式）
        created_at:
          type: string
          description: 基準時刻の作成日時
        updated_at:
          type: string
          description: 基準時刻の最終更新日時
    MeasBaseTimes:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/MeasBaseTime'
    MeasBaseTimePut:
      type: object
      properties:
        basetime:
          type: string
          description: 計測の基準時刻
    MeasurementSectionGetResponse:
      type: object
      required:
        - serial_number
        - processed
        - created_at
        - updated_at
      properties:
        serial_number:
          type: string
          description: 計測セクションのシリアルナンバー
        processed:
          type: boolean
          description: '`true` の場合、計測セクションは処理済みです。'
        created_at:
          type: string
          description: 計測セクションの作成日時。 `processed` が `false` の場合は、この属性はありません。
        updated_at:
          type: string
          description: 計測セクションの最終更新日時。 `processed` が `false` の場合は、この属性はありません。
    MeasurementSectionsGetResponse:
      type: object
      required:
        - items
        - total_count
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/MeasurementSectionGetResponse'
        total_count:
          type: integer
          description: 取得対象の総件数
    MeasurementSequenceGroup:
      type: object
      required:
        - uuid
        - created_at
        - updated_at
      properties:
        uuid:
          type: string
          description: 計測シーケンスのUUID
          example: 0b849907-9f04-4c87-b176-b73fb527e935
        expected_data_points:
          type: integer
          format: int64
          minimum: 0
          maximum: 18446744073709552000
          description: >-
            この計測シーケンスでサーバーが受信することが想定されるデータポイントの総数 （既に受信済みのデータポイントを含む）
            符号なし64bit整数。
          example: 123456789
        final_sequence_number:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: 最後の計測シーケンスの番号。
          example: 10
        created_at:
          type: string
          example: '2000-01-01T00:00:00Z'
          description: 作成日時
          format: date-time
        updated_at:
          type: string
          example: '2000-01-01T00:00:00Z'
          description: 最終更新日時
          format: date-time
    PageV2:
      type: object
      required:
        - total_count
      properties:
        total_count:
          type: integer
          format: int64
          description: 取得対象の総件数
    MeasurementSequenceGroups:
      type: object
      required:
        - items
        - page
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/MeasurementSequenceGroup'
        page:
          $ref: '#/components/schemas/PageV2'
    MeasurementSequenceGroupReplace:
      type: object
      properties:
        expected_data_points:
          type: integer
          format: int64
          minimum: 0
          maximum: 18446744073709552000
          description: >-
            この計測シーケンスでサーバーが受信することが想定されるデータポイントの総数 （既に受信済みのデータポイントを含む）
            符号なし64bit整数。
          example: 123456789
        final_sequence_number:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: 最後の計測シーケンスの番号
          example: 10
    CreateMeasurementChunksResult:
      type: object
      description: シーケンスチャンクの登録結果
      required:
        - items
        - total_count
      properties:
        items:
          type: array
          description: 登録結果のリスト
          items:
            required:
              - sequence_number
              - result
            type: object
            properties:
              sequence_number:
                type: integer
                format: int64
                description: シーケンスナンバー。符号無し32bit整数。
                example: 1
              result:
                type: string
                example: ok
                description: |-
                  登録結果を表します:
                    - ok
                      - 登録成功。
                    - skipped
                      - スキップ。既に登録されています。
                enum:
                  - ok
                  - skipped
        total_count:
          type: integer
          format: int64
          description: 登録結果の総件数
          example: 1
    MeasurementJobStatus:
      type: string
      enum:
        - ready
        - processing
        - succeeded
        - failed
        - cancelled
      description: ジョブのステータス
    MeasurementJob:
      properties:
        uuid:
          type: string
          description: ジョブのUUID
        meas_uuid:
          type: string
          deprecated: true
          description: 計測のUUID
        measurement:
          $ref: '#/components/schemas/Measurement'
        status:
          $ref: '#/components/schemas/MeasurementJobStatus'
        message:
          type: string
          description: >-
            ジョブの結果を表すメッセージ。 ジョブのステータスが `failed` の場合、メッセージが以下の形式で表示されます。


            `<row_number>:<column_number>:<column_name>:<cell_value>:<error_message>`


            行番号や列番号が不明の場合は `0` が出力されます。

            * ex.1 `2:1:time:1539263580:A time must be after the base_time\:
            BaseTime=2018-10-11 13\:13\:03 +0000 UTC`

            * ex.2 `4:0:::Wrong number of fields`

            * ex.3 `0:0:::Unexpected Error`


            `:` と `\` はエスケープされ、 `\:` と `\\` として出力されます。
        file_name:
          type: string
          description: ジョブの対象のファイル名。 同じ日に同じ名前のファイルがアップロードされた場合は、ランダムな接頭辞が付与されます。
        created_at:
          type: string
          description: ジョブの作成日時
        updated_at:
          type: string
          description: ジョブの最終更新日時
      required:
        - uuid
        - meas_uuid
        - measurement
        - status
        - message
        - file_name
        - created_at
        - updated_at
      type: object
    MeasurementJobs:
      required:
        - items
        - page
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/MeasurementJob'
        page:
          $ref: '#/components/schemas/PageDetail'
    MeasurementMarkers:
      type: object
      required:
        - items
        - page
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/MeasurementMarker'
        page:
          $ref: '#/components/schemas/PageDetail'
    MeasurementMarkerPutRequestBase:
      properties:
        name:
          type: string
          description: 計測マーカーの名前
        description:
          type: string
          description: 計測マーカーの説明
        type:
          type: string
          description: |-
            計測マーカーのタイプ
            - `point` : ポイントマーカー
            - `range` : 範囲マーカー
          enum:
            - point
            - range
        tag:
          type: object
          description: |-
            この計測マーカーに付与するタグ。タグはキーと値からなるペア（いずれもstring）で設定します。
            複数のタグを一度に設定することができます。
            値の中にオブジェクトを入れる（ネストする）ことはできません。
            ```
            // Not good
            {
              "tagkey" : {
                "nestKey": "not allowed"
              }
            }
            ```

            ```
            // OK
            {
              "tagkey1" : "ok1",
              "tagkey2" : "ok2"
            }
            ```
    MeasurementMarkerPutRequestPoint:
      allOf:
        - $ref: '#/components/schemas/MeasurementMarkerPutRequestBase'
        - properties:
            detail:
              $ref: '#/components/schemas/MeasurementMarkerDetailPoint'
    MeasurementMarkerPutRequestRange:
      allOf:
        - $ref: '#/components/schemas/MeasurementMarkerPutRequestBase'
        - properties:
            detail:
              $ref: '#/components/schemas/MeasurementMarkerDetailRange'
    MeasurementMarkerPutRequest:
      oneOf:
        - $ref: '#/components/schemas/MeasurementMarkerPutRequestPoint'
        - $ref: '#/components/schemas/MeasurementMarkerPutRequestRange'
      discriminator:
        propertyName: type
        mapping:
          point: '#/components/schemas/MeasurementMarkerPutRequestPoint'
          range: '#/components/schemas/MeasurementMarkerPutRequestRange'
    MeasurementUploadStatusGetResponse:
      required:
        - uuid
        - meas_uuid
        - state
        - message
        - file_name
        - created_at
        - updated_at
      type: object
      properties:
        uuid:
          type: string
          description: 計測アップロードのUUID
        meas_uuid:
          type: string
          description: 計測のUUID
        state:
          type: string
          enum:
            - ready
            - processing
            - succeed
            - failed
            - canceled
          description: 計測への変換ジョブのステータス
        message:
          type: string
          description: 計測への変換ジョブの結果
        file_name:
          type: string
          description: 計測に変換する対象のファイル名。 同じ日に同じ名前のファイルがアップロードされた場合は、 ランダムな接頭辞が付与されます。
        created_at:
          type: string
          description: 計測アップロードの作成日時
        updated_at:
          type: string
          description: 計測アップロードの最終更新日時
    MeasurementUploadStatusesGetResponse:
      required:
        - items
        - page
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/MeasurementUploadStatusGetResponse'
        page:
          $ref: '#/components/schemas/PageDetail'
    LabelDataType:
      type: string
      format: json
      description: |-
        列名とデータタイプの対応。 データタイプは、 `int` 、` string` 、 `float` のいずれかを指定してください。
        例:
        ```
        {
          "column_1": "float",
          "column_2": "string",
          "column_3": "int"
        }
        ```
    MeasurementUploadPostRequest:
      required:
        - edge_uuid
        - data_file
      type: object
      properties:
        edge_uuid:
          type: string
          format: uuid
          description: エッジのUUID
        base_time:
          type: string
          format: date-time
          description: 計測の基準時刻。MP4ファイルをアップロードする場合は必須です。
        base_time_type:
          type: string
          enum:
            - edge_rtc
            - ntp
            - gps
            - api_first_received
            - volatile
            - manual
            - undefined
          description: 基準時刻のタイプ
          default: edge_rtc
        channel:
          type: integer
          description: 計測のチャンネル（十進表記の文字列）
        meas_end:
          type: boolean
          description: '`true` にすると、計測は終了したものとして扱われます。'
        label_data_type:
          $ref: '#/components/schemas/LabelDataType'
        data_file:
          type: string
          format: binary
          description: アップロードするファイル
    MeasurementUploadPostResponse:
      required:
        - meas_upload_uuid
        - file_name
      type: object
      properties:
        meas_upload_uuid:
          type: string
          description: 計測アップロードのUUID
          deprecated: true
        job_uuid:
          type: string
          description: 計測への変換ジョブのUUID
        file_name:
          type: string
          description: アップロードされたファイルのファイル名
    MeasurementUploadPostRequestAppend:
      required:
        - data_file
      type: object
      properties:
        channel:
          type: integer
          description: 作成された計測のチャンネル
        meas_end:
          type: boolean
          description: |-
            * `true` : 終了した計測
            * `false` : 終了していない計測
        label_data_type:
          $ref: '#/components/schemas/LabelDataType'
        data_file:
          type: string
          format: binary
          description: アップロードするファイル
    MeasurementMarkersWithoutPage:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/MeasurementMarker'
    MeasurementMarkerPostRequestPoint:
      allOf:
        - $ref: '#/components/schemas/MeasurementMarkerPutRequestPoint'
        - required:
            - type
            - detail
    MeasurementMarkerPostRequestRange:
      allOf:
        - $ref: '#/components/schemas/MeasurementMarkerPutRequestRange'
        - required:
            - type
            - detail
    MeasurementMarkerPostRequest:
      oneOf:
        - $ref: '#/components/schemas/MeasurementMarkerPostRequestPoint'
        - $ref: '#/components/schemas/MeasurementMarkerPostRequestRange'
      discriminator:
        propertyName: type
        mapping:
          point: '#/components/schemas/MeasurementMarkerPostRequestPoint'
          range: '#/components/schemas/MeasurementMarkerPostRequestRange'
    SignalConversionOptionType:
      type: string
      enum:
        - none
        - num_fixed_point
        - num_floating_point
        - csv
        - json
        - sub_bytes
        - sub_string
      description: 変換タイプ
    SignalConversionOptionNumFixedPoint:
      type: object
      required:
        - startbit
        - bitsize
        - endian
        - sign
        - scale
        - offset
      properties:
        startbit:
          type: integer
          format: int32
          description: 開始ビット位置
        bitsize:
          type: integer
          format: int32
          description: ビットサイズ
        endian:
          type: string
          description: エンディアン
          enum:
            - big
            - little
        sign:
          type: string
          description: 符号有無
          enum:
            - signed
            - unsigned
        scale:
          type: number
          description: スケールファクター
        offset:
          type: number
          description: オフセット
    SignalConversionNumFixedPoint:
      type: object
      required:
        - type
        - options
      properties:
        type:
          $ref: '#/components/schemas/SignalConversionOptionType'
        options:
          $ref: '#/components/schemas/SignalConversionOptionNumFixedPoint'
    SignalConversionOptionNumFloatingPoint:
      type: object
      required:
        - startbyte
        - endian
        - precision
      properties:
        startbyte:
          type: integer
          format: int32
          description: 開始バイト位置
        endian:
          type: string
          description: エンディアン
          enum:
            - big
            - little
        precision:
          type: integer
          enum:
            - 32
            - 64
    SignalConversionNumFloatingPoint:
      type: object
      required:
        - type
        - options
      properties:
        type:
          $ref: '#/components/schemas/SignalConversionOptionType'
        options:
          $ref: '#/components/schemas/SignalConversionOptionNumFloatingPoint'
    SignalConversionOptionCSV:
      type: object
      required:
        - delimiters
        - index
        - value_type
      properties:
        delimiters:
          type: array
          items:
            type: string
          description: デリミタ
        index:
          type: integer
          format: int32
          description: インデックス（左端を0とする列番号）
        value_type:
          type: string
          enum:
            - str
            - num
    SignalConversionCSV:
      type: object
      required:
        - type
        - options
      properties:
        type:
          $ref: '#/components/schemas/SignalConversionOptionType'
        options:
          $ref: '#/components/schemas/SignalConversionOptionCSV'
    SignalConversionOptionJSON:
      type: object
      required:
        - fieldpath
        - value_type
      properties:
        fieldpath:
          type: string
          description: 抽出したいフィールドのパス
        value_type:
          type: string
          description: 値のタイプ
          enum:
            - str
            - num
    SignalConversionJSON:
      type: object
      required:
        - type
        - options
      properties:
        type:
          $ref: '#/components/schemas/SignalConversionOptionType'
        options:
          $ref: '#/components/schemas/SignalConversionOptionJSON'
    SignalConversionOptionSubBytes:
      type: object
      required:
        - startbyte
        - bytesize
      properties:
        startbyte:
          type: integer
          format: int64
          description: 開始バイト位置
        bytesize:
          type: integer
          format: int64
          description: バイトサイズ
    SignalConversionSubBytes:
      type: object
      required:
        - type
        - options
      properties:
        type:
          $ref: '#/components/schemas/SignalConversionOptionType'
        options:
          $ref: '#/components/schemas/SignalConversionOptionSubBytes'
    SignalConversionOptionSubString:
      type: object
      required:
        - startbyte
        - bytesize
      properties:
        startbyte:
          type: integer
          format: int64
          description: 開始バイト位置
        bytesize:
          type: integer
          format: int64
          description: バイトサイズ
    SignalConversionSubString:
      type: object
      required:
        - type
        - options
      properties:
        type:
          $ref: '#/components/schemas/SignalConversionOptionType'
        options:
          $ref: '#/components/schemas/SignalConversionOptionSubString'
    SignalConversion:
      discriminator:
        propertyName: type
        mapping:
          num_fixed_point: '#/components/schemas/SignalConversionNumFixedPoint'
          num_floating_point: '#/components/schemas/SignalConversionNumFloatingPoint'
          csv: '#/components/schemas/SignalConversionCSV'
          json: '#/components/schemas/SignalConversionJSON'
          sub_bytes: '#/components/schemas/SignalConversionSubBytes'
          sub_string: '#/components/schemas/SignalConversionSubString'
      oneOf:
        - $ref: '#/components/schemas/SignalConversionNumFixedPoint'
        - $ref: '#/components/schemas/SignalConversionNumFloatingPoint'
        - $ref: '#/components/schemas/SignalConversionCSV'
        - $ref: '#/components/schemas/SignalConversionJSON'
        - $ref: '#/components/schemas/SignalConversionSubBytes'
        - $ref: '#/components/schemas/SignalConversionSubString'
    SignalDisplay:
      type: object
      required:
        - unit
        - min
        - max
        - format
      properties:
        unit:
          type: string
          description: 単位
        min:
          type: integer
          format: int64
          description: 最小値
        max:
          type: integer
          format: int64
          description: 最大値
        format:
          type: string
          description: 表示用のフォーマット
    Signal:
      type: object
      required:
        - uuid
        - label
        - description
        - data_type
        - data_id
        - channel
        - conversion
        - display
        - hash
        - created_at
        - updated_at
      properties:
        uuid:
          type: string
          description: 信号定義のUUID
        label:
          type: string
          description: 信号定義のラベル
        description:
          type: string
          description: 信号定義の説明
        data_type:
          type: integer
          format: int32
          description: データタイプ
        data_id:
          type: string
          description: データID
        channel:
          type: integer
          format: int32
          description: チャンネル
        conversion:
          $ref: '#/components/schemas/SignalConversion'
        display:
          $ref: '#/components/schemas/SignalDisplay'
        hash:
          type: string
          description: 信号定義のハッシュ値
        created_at:
          type: string
          description: 信号定義の作成日時
        updated_at:
          type: string
          description: 信号定義の最終更新日時
    Signals:
      type: object
      required:
        - items
        - page
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Signal'
        page:
          $ref: '#/components/schemas/PageDetail'
    CreateSignalRequest:
      type: object
      properties:
        channel:
          description: チャンネル
          type: integer
          format: int32
        conversion:
          $ref: '#/components/schemas/SignalConversion'
        data_id:
          description: データID
          type: string
        data_type:
          description: データタイプ
          type: integer
          format: int32
        description:
          description: 信号定義の説明
          type: string
        display:
          $ref: '#/components/schemas/SignalDisplay'
        label:
          description: 信号定義のラベル
          type: string
        uuid:
          description: 信号定義のUUID
          type: string
    UpdateSignalRequest:
      type: object
      properties:
        channel:
          description: チャンネル
          type: integer
          format: int32
        conversion:
          $ref: '#/components/schemas/SignalConversion'
        data_id:
          description: データID
          type: string
        data_type:
          description: データタイプ
          type: integer
          format: int32
        description:
          description: 信号定義の説明
          type: string
        display:
          $ref: '#/components/schemas/SignalDisplay'
        label:
          description: 信号定義のラベル
          type: string
    TrashedMeasurements:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Measurement'
        total_count:
          type: integer
          example: 10
          description: 取得対象の総件数
    DataPointTime:
      oneOf:
        - type: integer
          format: int64
          description: >-
            時刻。クエリパラメーターの `time_format` が `rfc3339`
            の場合はstring、それ以外の場合はintegerです。
        - type: string
          description: >-
            時刻。クエリパラメーターの `time_format` が `rfc3339`
            の場合はstring、それ以外の場合はintegerです。
    DataPointDataMap:
      type: object
      description: >-
        データのペイロード。ペイロードのJSON表現はデータタイプによって異なります。 [詳説iSCP
        1.0](https://docs.intdash.jp/manual/iscp1-essentials/latest/ja/iscp1-essentials-ja.pdf)
        の「付録: データタイプとペイロードの定義」を参照してください。 iscpv1に当てはまらない場合、下記のフォーマットで固定となります。


        ```

        {
          "d": "データ本体のBase64表記"
        }

        ```
    DataPointNormal:
      description: 改行で区切られたJSON文字列です。
      required:
        - time
        - measurement_uuid
        - data_type
        - data_id
        - data
        - created_at
      type: object
      properties:
        time:
          $ref: '#/components/schemas/DataPointTime'
        measurement_uuid:
          type: string
          description: このデータポイントが含まれる計測のUUID
        created_at:
          type: string
          description: このデータポイントが作成された日時
        data_type:
          type: string
          description: データタイプ
        data_id:
          type: string
          description: データID
        data:
          $ref: '#/components/schemas/DataPointDataMap'
    ErrorExtraEmpty:
      type: object
      required:
        - error
        - error_description
      properties:
        error:
          type: string
          description: エラーのタイプ。エラーのタイプが `unexpected` の場合は、直ちに処理が中断されます。
          enum:
            - converted_error
            - unexpected
        error_description:
          type: string
          description: エラーの説明
    ErrorConverted:
      allOf:
        - $ref: '#/components/schemas/ErrorExtraEmpty'
        - required:
            - error_extra
          properties:
            error_extra:
              type: object
              description: '`error_type` が `converted_error` である場合の追加情報'
              required:
                - signal_channel
                - signal_data_id
                - signal_data_type
                - signal_label
              properties:
                signal_label:
                  type: string
                  description: 信号定義のラベル
                signal_data_id:
                  type: string
                  description: 信号定義のデータID
                signal_channel:
                  type: integer
                  format: int32
                  description: 信号定義のチャンネル
                signal_data_type:
                  type: integer
                  format: int32
                  description: 信号定義のデータタイプ
    DataPointDataErrorData:
      type: object
      discriminator:
        propertyName: error
        mapping:
          '*': '#/components/schemas/ErrorExtraEmpty'
          converted_error: '#/components/schemas/ErrorConverted'
      oneOf:
        - $ref: '#/components/schemas/ErrorExtraEmpty'
        - $ref: '#/components/schemas/ErrorConverted'
    DataPointDataError:
      type: object
      description: データのペイロード
      required:
        - i
        - d
      properties:
        i:
          type: string
          description: 固定値 `intdash/measurement/get/data/error`
        d:
          $ref: '#/components/schemas/DataPointDataErrorData'
    DataPointError:
      allOf:
        - $ref: '#/components/schemas/DataPointNormal'
        - properties:
            data_id:
              type: string
              description: エラーが発生した場合、 `<channel>/intdash/measurement/get/data/error`
            data:
              $ref: '#/components/schemas/DataPointDataError'
    HLS:
      type: object
      required:
        - edge_uuid
        - measurement_uuid
        - basetime
        - basetime_type
        - playlist
        - channel
        - offset_time
        - duration
      properties:
        edge_uuid:
          type: string
          description: エッジのUUID
          example: 6e180e5a-3d7e-476c-907d-3c71bceb8a98
        measurement_uuid:
          type: string
          description: 計測のUUID
          example: 507032c5-c4fb-493b-aef3-ecf6fd67df00
        basetime:
          type: string
          format: data-time
          description: 基準時刻
          example: '2000-01-02T03:04:05Z'
        basetime_type:
          type: string
          description: 基準時刻タイプ
          example: ntp
        playlist:
          type: string
          description: プレイリスト
          example: playlist.m3u8
        channel:
          type: integer
          description: チャンネル
          example: 1
        offset_time:
          type: integer
          description: 計測開始から動画の開始までのオフセット（マイクロ秒）
          example: 123456
        duration:
          type: integer
          description: 長さ（マイクロ秒）
          example: 12345678
    HLSList:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/HLS'
    JobType:
      type: string
      enum:
        - update
        - finalize
        - delete
      example: update
      description: |-
        - update
          - 計測内の動画データのうち、新しくサーバーが受信した部分（HLSにまだ変換されていない部分）を
            HLSに変換するジョブ。通常は計測実行中に行います。
        - finalize
          - 計測全体をサーバーに回収した後に、動画データ全体をHLSに変換するジョブ
        - delete
          - 変換によって作成されたHLSデータを削除するジョブ。
            このジョブを実行すると、HLSプレイリスト、セグメントファイル、
            データベース内のHLSに関する情報が削除され、この動画のHLSによる再生はできなくなります。
    JobStatus:
      type: string
      description: ジョブのステータス
      enum:
        - unprocessed
        - processing
        - succeeded
        - failed
    Job:
      type: object
      required:
        - uuid
        - meas_uuid
        - type
        - status
        - message
        - created_at
        - updated_at
      properties:
        uuid:
          type: string
          example: ade4eea8-edc6-3ca5-c557-12a616c2028a
          description: ジョブのUUID
        meas_uuid:
          type: string
          example: a5170afc-9cc2-5327-e0e1-32746b5a7977
          description: 計測のUUID
        type:
          $ref: '#/components/schemas/JobType'
        status:
          $ref: '#/components/schemas/JobStatus'
        message:
          type: string
          example: ok
          description: ステータスの説明
        created_at:
          type: string
          example: 2000-01-02T03:04:5Z
          format: date-time
          description: ジョブが作成された日時
        updated_at:
          type: string
          example: 2000-01-02T03:04:5Z
          format: date-time
          description: ジョブの最終更新日時
    JobList:
      type: object
      required:
        - items
        - total_count
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Job'
        total_count:
          description: 取得対象の総件数
          type: number
          example: 100
    ErrorProblemMedia:
      type: object
      required:
        - type
        - title
      properties:
        type:
          description: エラーのタイプ
          type: string
          enum:
            - about:blank
            - invalid_request
            - conflict
            - forbidden
            - account_locked
        title:
          description: エラーのタイトル
          type: string
        properties:
          description: 無効なパラメーターについての情報
          type: object
    CreateJobRequest:
      type: object
      required:
        - meas_uuid
        - type
      properties:
        meas_uuid:
          type: string
          description: 計測のUUID
          example: a5170afc-9cc2-5327-e0e1-32746b5a7977
        type:
          $ref: '#/components/schemas/JobType'
    MediaMeasurementBaseTimeType:
      type: string
      enum:
        - edge_rtc
        - ntp
        - gps
        - api_first_received
        - volatile
        - manual
        - undefined
      description: 計測の基準時刻タイプ
      example: edge_rtc
    MediaMeasurement:
      type: object
      required:
        - uuid
        - name
        - description
        - basetime
        - basetime_type
        - edge_uuid
        - protected
        - sequences
        - created_at
        - updated_at
        - duration
        - ended
        - processed_ratio
        - status
      properties:
        uuid:
          type: string
          description: 計測のUUID
          example: 2cc7de37-6f71-4458-887e-10e618a6fcfb
        name:
          type: string
          description: 計測の名前
          example: meas1
        description:
          type: string
          description: 計測の説明
          example: description of measurement
        basetime:
          type: string
          description: 計測の基準時刻（RFC3339形式）
        basetime_type:
          $ref: '#/components/schemas/MediaMeasurementBaseTimeType'
        edge_uuid:
          type: string
          description: エッジのUUID
          example: 00de1861-6614-4435-af07-da9b4338d57c
        duration:
          deprecated: true
          type: integer
          format: int64
          description: 計測時間（ `max_elapsed_time` を使用してください）
          example: 100000000
        max_elapsed_time:
          type: integer
          format: int64
          description: 計測時間（マイクロ秒）
          example: 100000000
        protected:
          type: boolean
          description: |-
            `true` の場合、計測は保護されています。保護されている計測は削除できません。
            保護されている計測を削除したい場合は、まず保護を解除してください。
          example: true
        created_at:
          type: string
          description: 計測の作成日時
          format: date-time
          example: '2017-02-11T01:23:45Z'
        updated_at:
          type: string
          description: 計測の最終更新日時
          format: date-time
          example: '2017-02-11T01:23:45Z'
        processed_ratio:
          deprecated: true
          type: number
          description: >-
            代わりに `sequences.received_sequence_numbers_ratio`
            を使用してください。処理済み率を表します。
          example: 0.9
        ended:
          type: boolean
          deprecated: true
          description: 代わりに `sequences.status` を使用してください。エッジにおいてデータの取得が終了しているかどうかを示します。
          example: true
        status:
          type: string
          deprecated: true
          enum:
            - measuring
            - resending
            - finished
          description: |-
            代わりに `sequences.status` を使用してください。
            計測のステータスを表します:
              - measuring
                - 計測中
              - resending
                - 再送中。計測（エッジにおけるデータの取得）は終了しましたが、エッジにデータが残っており、サーバーに再送中です。
              - finished
                - 完了。サーバーへのデータの回収が完了しています。
    VideoCodecs:
      type: string
      enum:
        - h264
        - vp9
      example: h264
    VideoSourceDataType:
      type: string
      enum:
        - h264
        - jpeg
        - ivf
      example: h264
    VideoStatus:
      type: string
      description: ステータス
      enum:
        - live
        - unprocessed
        - processing
        - succeeded
        - failed
      example: succeeded
    Playlist:
      type: object
      required:
        - playlist
        - playlist_with_endlist_tag
      properties:
        playlist:
          type: string
          description: プレイリスト
          example: /path-to/playlist.m3u8
        playlist_with_endlist_tag:
          type: string
          description: EXT-X-ENDLISTタグが付いたプレイリスト
          example: /path-to/playlist_with_endlist_tag.m3u8
    MP4Status:
      type: string
      description: ステータス
      enum:
        - unprocessed
        - processing
        - succeeded
        - failed
        - canceled
    MP4:
      type: object
      required:
        - uuid
        - trimmed
        - start_offset
        - duration
        - status
        - created_at
        - updated_at
      properties:
        uuid:
          type: string
          format: uuid
          description: MP4のUUID
          example: 0108aeb1-f486-400f-9bcd-f176eee8b7e3
        start_offset:
          type: integer
          description: 動画の開始時刻からのオフセット（マイクロ秒）
          example: 0
        duration:
          type: integer
          description: 長さ（マイクロ秒）
          example: 10000
        trimmed:
          type: boolean
          description: 指定された時間範囲のみを抽出したものである場合は `true` 。
          example: false
        file_path:
          type: string
          description: メディアファイルのパス
          example: >-
            /api/media/68b91013-47e9-4e68-a965-892549587dfa/mp4s/0108aeb1-f486-400f-9bcd-f176eee8b7e3/measurement.mp4
        status:
          $ref: '#/components/schemas/MP4Status'
        created_at:
          type: string
          format: date-time
          description: 作成された日時
          example: '2000-01-01T00:00:00Z'
        updated_at:
          type: string
          format: date-time
          description: 最終更新日時
          example: '2000-01-01T00:00:00Z'
    JpegQuality:
      type: string
      enum:
        - high
        - middle
        - low
      description: |-
        JPEGの品質。デフォルトは 'middle' です。
        - high
        - middle
        - low
    JpegStatus:
      type: string
      description: ステータス
      enum:
        - unprocessed
        - processing
        - succeeded
        - failed
        - canceled
      example: succeeded
    Jpeg:
      type: object
      required:
        - uuid
        - start_offset
        - duration
        - trimmed
        - fps
        - quality
        - status
        - created_by
        - created_at
        - updated_at
      properties:
        uuid:
          type: string
          format: uuid
          description: JPEGのUUID
          example: 3279bdfb-9079-417e-8f94-ee8126da5933
        start_offset:
          type: integer
          description: 計測開始からのオフセット（マイクロ秒）
          example: 5000
        duration:
          type: integer
          description: 長さ（マイクロ秒）
          example: 10000
        trimmed:
          type: boolean
          description: 指定された時間範囲のみを抽出したものである場合は `true` 。
          example: true
        fps:
          type: number
          format: float
          description: フレームレート（fps）
          example: 15
        quality:
          $ref: '#/components/schemas/JpegQuality'
        status:
          $ref: '#/components/schemas/JpegStatus'
        created_at:
          type: string
          format: date-time
          description: 作成された日時
          example: '2000-01-01T00:00:00Z'
        updated_at:
          type: string
          format: date-time
          description: 最終更新日時
          example: '2000-01-01T00:00:00Z'
    Video:
      type: object
      required:
        - uuid
        - measurement_uuid
        - edge_uuid
        - channel
        - codec
        - source_data_type
        - offset_time
        - duration
        - fps
        - width
        - height
        - status
        - mp4s
        - jpegs
        - created_at
        - updated_at
      properties:
        uuid:
          type: string
          format: uuid
          description: 動画（video）のUUID
          example: 68b91013-47e9-4e68-a965-892549587dfa
        measurement_uuid:
          type: string
          format: uuid
          description: 計測のUUID
          example: d299eea4-d02c-4742-a97a-795346a0c005
        measurement:
          $ref: '#/components/schemas/MediaMeasurement'
        edge_uuid:
          type: string
          format: uuid
          description: エッジのUUID
          example: a8afa022-7e60-4f6a-8686-5b99d8785d25
        channel:
          type: integer
          description: チャンネル
          example: 1
        codec:
          $ref: '#/components/schemas/VideoCodecs'
        source_data_type:
          $ref: '#/components/schemas/VideoSourceDataType'
        offset_time:
          type: integer
          description: 計測開始からのオフセット（マイクロ秒）
          example: 0
        duration:
          type: integer
          description: 長さ（マイクロ秒）
          example: 10000
        fps:
          type: number
          description: フレームレート（fps）
          example: 29.98
        width:
          type: integer
          description: 動画の幅
          example: 1920
        height:
          type: integer
          description: 動画の高さ
          example: 1080
        status:
          $ref: '#/components/schemas/VideoStatus'
        hls:
          $ref: '#/components/schemas/Playlist'
        mp4s:
          type: array
          description: この動画を変換して作成されたMP4のリスト
          items:
            $ref: '#/components/schemas/MP4'
        jpegs:
          type: array
          description: この動画を変換して作成されたJPEGのリスト
          items:
            $ref: '#/components/schemas/Jpeg'
        created_at:
          type: string
          format: date-time
          description: 作成された日時
          example: '2000-01-01T00:00:00Z'
        updated_at:
          type: string
          format: date-time
          description: 最終更新日時
          example: '2000-01-01T00:00:00Z'
    Page:
      type: object
      required:
        - total_count
      properties:
        total_count:
          type: integer
          format: int64
          description: 取得対象の総件数
          example: 1
    Videos:
      type: object
      required:
        - items
        - page
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Video'
        page:
          $ref: '#/components/schemas/Page'
    Jpegs:
      type: object
      required:
        - items
        - page
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Jpeg'
        page:
          $ref: '#/components/schemas/Page'
    CreateJpegRequest:
      type: object
      properties:
        trim:
          type: boolean
          description: 時間範囲を指定してその部分のJPEGを作成する場合は `true` にします。
          example: false
        start_offset:
          type: integer
          description: 計測開始からのオフセット（マイクロ秒）。trimがtrueの場合は必須です。
          example: 0
        duration:
          type: integer
          description: 長さ（マイクロ秒）。trimがtrueの場合は必須です。
          example: 10000
        fps:
          description: フレームレート。値が省略された場合は、元のデータと同じフレームレートが使用されます。
          type: number
          format: float
          example: 15
        quality:
          $ref: '#/components/schemas/JpegQuality'
    MP4s:
      type: object
      required:
        - items
        - page
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/MP4'
        page:
          $ref: '#/components/schemas/Page'
    CreateMP4Request:
      type: object
      properties:
        trimmed:
          type: boolean
          description: 時間範囲を指定してその部分のMP4を作成する場合は `true` にします。
          example: false
        start_offset:
          type: integer
          description: 動画の開始時刻からのオフセット（マイクロ秒）。trimmedがtrueの場合は必須です。
          example: 0
        duration:
          type: integer
          description: 長さ（マイクロ秒）。trimmedがtrueの場合は必須です。
          example: 10000
  examples:
    EmptyList:
      value:
        items: []
        page:
          next: false
          prev: false
          total_page: 1
          total_count: 1
    EdgeWithoutOwner:
      value:
        uuid: 6b4f4bce-ba32-4ad9-b808-39e2d68b33ee
        name: my-edge
        nickname: My Edge
        description: Description
        created_at: '2000-01-01T00:00:00Z'
        updated_at: '2000-01-01T00:00:00Z'
    Edge:
      value:
        uuid: 6b4f4bce-ba32-4ad9-b808-39e2d68b33ee
        name: my-edge
        nickname: My Edge
        description: Description
        owner:
          user_uuid: 84693d9e-0f1a-457b-b417-a7c697cffdce
        created_at: '2000-01-01T00:00:00Z'
        updated_at: '2000-01-01T00:00:00Z'
    User:
      value:
        uuid: 0932ff17-567c-4ac8-a40d-136357890f7b
        name: intdash
        nickname: nickname
        disabled: false
        is_super: false
        emails:
          - id: 1
            address: intdash@example.com
            verified: false
            created_at: '2000-01-01T00:00:00Z'
            updated_at: '2000-01-01T00:00:00Z'
        roles:
          - af22c56b-6b3e-4807-a165-07e9dbd7e25b
        password:
          attempt_count: 1
          is_temporary: false
          last_attempt_at: '2000-01-01T00:00:00Z'
          expired_at: '2000-01-01T00:00:00Z'
          created_at: '2000-01-01T00:00:00Z'
          updated_at: '2000-01-01T00:00:00Z'
        last_sign_in_at: '2000-01-01T00:00:00Z'
        created_at: '2000-01-01T00:00:00Z'
        updated_at: '2000-01-01T00:00:00Z'
    ErrorProblemConflict:
      value:
        type: conflict
        title: conflict message
    Edges:
      value:
        items:
          - uuid: 6b4f4bce-ba32-4ad9-b808-39e2d68b33ee
            name: my-edge
            nickname: My Edge
            description: Description
            owner:
              user_uuid: 84693d9e-0f1a-457b-b417-a7c697cffdce
            created_at: '2000-01-01T00:00:00Z'
            updated_at: '2000-01-01T00:00:00Z'
        page:
          total_count: 1
    CreateEdgeWithUUIDRequest:
      value:
        name: edge-with-uuid
        nickname: nickname
        description: description
    CreatedUser:
      value:
        uuid: 0932ff17-567c-4ac8-a40d-136357890f7b
        name: intdash
        nickname: nickname
        disabled: false
        description: description
        is_super: false
        emails:
          - id: 1
            address: intdash@example.com
            verified: false
            created_at: '2000-01-01T00:00:00Z'
            updated_at: '2000-01-01T00:00:00Z'
        password:
          attempt_count: 0
          last_attempt_at: '2000-01-01T00:00:00Z'
          is_temporary: true
          temporary_password: password
          expired_at: '2000-01-01T00:00:00Z'
          created_at: '2000-01-01T00:00:00Z'
          updated_at: '2000-01-01T00:00:00Z'
        roles:
          - af22c56b-6b3e-4807-a165-07e9dbd7e25b
        last_sign_in_at: '2000-01-01T00:00:00Z'
        created_at: '2000-01-01T00:00:00Z'
        updated_at: '2000-01-01T00:00:00Z'
    ErrorProblemConflictNameAndEmail:
      value:
        type: conflict
        title: conflict message
        properties:
          name: already exist
          email: already exist
    ErrorProblemBadRequest:
      value:
        type: invalid_request
        title: invalid request message
    UserPassword:
      value:
        attempt_count: 1
        is_temporary: false
        last_attempt_at: '2000-01-01T00:00:00Z'
        expired_at: '2000-01-01T00:00:00Z'
        created_at: '2000-01-01T00:00:00Z'
        updated_at: '2000-01-01T00:00:00Z'
    UserAPITokenList:
      value:
        items:
          - id: 1
            name: craeted
            scopes:
              - uuid: 4688a07a-0cbc-4597-8c87-538e744bc90d
                name: meas:r
                allowed_endpoints:
                  - path: /resources
                    method: GET
                allowed_iscp_messages:
                  - type: upstream_spec_request
                denied_endpoints:
                  - path: /denied_resources
                    method: GET
            expired_at: '2000-01-01T00:00:00Z'
            created_at: '2000-01-01T00:00:00Z'
            updated_at: '2000-01-01T00:00:00Z'
        page:
          total_count: 1
    CreatedUserAPIToken:
      value:
        id: 1
        name: craeted
        token: token.signature
        scopes:
          - uuid: 4688a07a-0cbc-4597-8c87-538e744bc90d
            name: meas:r
            allowed_endpoints:
              - path: /resources
                method: GET
            allowed_iscp_messages:
              - type: upstream_spec_request
            denied_endpoints:
              - path: /denied_resources
                method: GET
        expired_at: '2000-01-01T00:00:00Z'
        created_at: '2000-01-01T00:00:00Z'
        updated_at: '2000-01-01T00:00:00Z'
    UserAPIToken:
      value:
        id: 1
        name: craeted
        scopes:
          - uuid: 4688a07a-0cbc-4597-8c87-538e744bc90d
            name: meas:r
            allowed_endpoints:
              - path: /resources
                method: GET
            allowed_iscp_messages:
              - type: upstream_spec_request
            denied_endpoints:
              - path: /denied_resources
                method: GET
        expired_at: '2000-01-01T00:00:00Z'
        created_at: '2000-01-01T00:00:00Z'
        updated_at: '2000-01-01T00:00:00Z'
    UserTemporaryPassword:
      value:
        attempt_count: 0
        is_temporary: true
        temporary_password: password
        last_attempt_at: '2000-01-01T00:00:00Z'
        expired_at: '2000-01-01T00:00:00Z'
        created_at: '2000-01-01T00:00:00Z'
        updated_at: '2000-01-01T00:00:00Z'
    CreatedGroup:
      value:
        uuid: 6b4f4bce-ba32-4ad9-b808-39e2d68b33ee
        name: my-group
        created_at: '2000-01-01T00:00:00Z'
        updated_at: '2000-01-01T00:00:00Z'
    ErrorProblemErrorExceededMaxGroupsCount:
      value:
        type: exceeded_max_groups_count
        title: <error message>
    CreatedProject:
      value:
        uuid: 6b4f4bce-ba32-4ad9-b808-39e2d68b33ee
        parent_group_uuid: 0932ff17-567c-4ac8-a40d-136357890f7b
        name: my-project
        created_at: '2000-01-01T00:00:00Z'
        updated_at: '2000-01-01T00:00:00Z'
    ErrorProblemExceededMaxProjectsCountPerGroup:
      value:
        type: exceeded_max_projects_count_per_group
        title: <error message>
    ErrorProblemForbiddenCannotDeleteProject:
      value:
        type: forbidden
        title: You cannot delete a project. Because you are not a project owner.
    ErrorProblemForbiddenRemoveOwner:
      value:
        type: forbidden
        title: unremovable owner member
    ErrorProblemForbiddenAtLeastOneOwner:
      value:
        type: forbidden
        title: project must have at least one owner.
    DataIDsGetResponse:
      value:
        items:
          - data_type: 1
            channel: 2
            data_id: '00000001'
    MeasList:
      value:
        items:
          - uuid: 2cc7de37-6f71-4458-887e-10e618a6fcfb
            name: meas1
            description: description of measurement
            edge_uuid: 00de1861-6614-4435-af07-da9b4338d57c
            duration: 100000000
            ended: true
            status: measuring
            basetime: '2017-02-11T01:23:45.678901Z'
            basetime_type: ntp
            processed_ratio: 0.9
            protected: false
            received_data_points: null
            markers:
              - uuid: 887326ce-a2a2-4db6-8c06-2f8447f0f29e
                name: name
                description: description
                type: point
                detail:
                  occurred_elapsed_time: 100
                tag:
                  key1: value1
                  key2: value2
                elapsed_time: 1000
                created_at: '2017-02-11T01:23:45Z'
                created_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
                updated_at: '2017-02-11T12:34:56Z'
                updated_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
            created_at: '2017-02-11T01:23:45Z'
            updated_at: '2017-02-11T12:34:56Z'
        page:
          total_count: 1
          first: true
          last: true
          next: /path?xxx=1&bbb=2&page=3
          previous: /path?xxx=1&bbb=2&page=1
    MeasCreate:
      value:
        name: meas1
        description: description of measurement
        basetime: '2017-02-11T01:23:45.678901Z'
        basetime_type: ntp
        edge_uuid: 00de1861-6614-4435-af07-da9b4338d57c
        protected: false
    Meas:
      value:
        uuid: 2cc7de37-6f71-4458-887e-10e618a6fcfb
        name: meas1
        description: description of measurement
        edge_uuid: 00de1861-6614-4435-af07-da9b4338d57c
        duration: 100000000
        ended: true
        status: measuring
        basetime: '2017-02-11T01:23:45.678901Z'
        basetime_type: ntp
        processed_ratio: 0.9
        received_data_points: null
        markers:
          - uuid: 27a841d8-78c0-4e5e-b0ee-ec1fafd90ef6
            name: Name3
            description: Description3
            tag:
              tagkey1: tagValue1
              tagkey2: tagValue2
            type: range
            detail:
              start_elapsed_time: 3
              end_elapsed_time: 7
            created_at: '2000-01-02T03:04:07Z'
            created_by: e3f57626-93d6-4274-a51f-1ac538357a8a
            updated_at: '2020-04-15T14:15:23.135268Z'
            updated_by: 447af3b3-a311-4047-9d7c-110a0fac505b
          - uuid: cdc1029e-d474-477c-aa6e-b48928fdb825
            name: Name2
            description: Description2
            tag:
              tagkey1: tagValue1
              tagkey2: tagValue2
            type: point
            detail:
              occurred_elapsed_time: 3
            created_at: '2000-01-02T03:04:06Z'
            created_by: e3f57626-93d6-4274-a51f-1ac538357a8a
            updated_at: '2020-04-15T14:15:23.064981Z'
            updated_by: 447af3b3-a311-4047-9d7c-110a0fac505b
        protected: false
        created_at: '2017-02-11T01:23:45Z'
        updated_at: '2017-02-11T12:34:56Z'
    MeasFinished:
      value:
        uuid: 2cc7de37-6f71-4458-887e-10e618a6fcfb
        name: meas1
        description: description of measurement
        edge_uuid: 00de1861-6614-4435-af07-da9b4338d57c
        duration: 100000000
        ended: true
        status: measuring
        basetime: '2017-02-11T01:23:45.678901Z'
        basetime_type: ntp
        processed_ratio: 0.9
        received_data_points: null
        markers:
          - uuid: 887326ce-a2a2-4db6-8c06-2f8447f0f29e
            name: name
            description: description
            type: point
            detail:
              occurred_elapsed_time: 100
            tag:
              key1: value1
              key2: value2
            elapsed_time: 1000
            created_at: '2017-02-11T01:23:45Z'
            created_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
            updated_at: '2017-02-11T12:34:56Z'
            updated_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
        protected: false
        created_at: '2017-02-11T01:23:45Z'
        updated_at: '2017-02-11T12:34:56Z'
    MeasBaseTimesGetResponse:
      value:
        items:
          - type: ntp
            basetime: '2017-02-11T01:23:45.678901Z'
            created_at: '2017-02-11T01:23:45Z'
            updated_at: '2017-02-11T01:23:45Z'
    MeasBaseTimeGetResponse:
      value:
        type: ntp
        basetime: '2017-02-11T01:23:45.678901Z'
        created_at: '2017-02-11T01:23:45Z'
        updated_at: '2017-02-11T01:23:45Z'
    MeasBaseTimePutRequest:
      value:
        basetime: '2017-02-11T01:23:45Z'
    MeasBaseTimePutResponse:
      value:
        type: ntp
        basetime: '2017-02-11T01:23:45.678901Z'
        created_at: '2017-02-11T01:23:45Z'
        updated_at: '2017-02-11T01:23:45Z'
    MeasurementSectionsGetResponse:
      value:
        items:
          - serial_number: 0
            processed: true
            created_at: '2017-02-11T01:23:45Z'
            updated_at: '2017-02-11T12:34:56Z'
          - serial_number: 1
            processed: true
            created_at: '2017-02-11T01:23:45Z'
            updated_at: '2017-02-11T12:34:56Z'
          - serial_number: 2
            processed: false
        total_count: 100
    MeasurementJobsGetResponse:
      value:
        items:
          - uuid: d9135580-4a6b-4fbd-971b-8fdce27b617c
            meas_uuid: a72c674a-e8e9-43bc-940f-a034853363e1
            measurement:
              uuid: 2cc7de37-6f71-4458-887e-10e618a6fcfb
              name: meas1
              description: description of measurement
              edge_uuid: 00de1861-6614-4435-af07-da9b4338d57c
              duration: 100000000
              ended: true
              status: measuring
              basetime: '2017-02-11T01:23:45.678901Z'
              basetime_type: ntp
              processed_ratio: 0.9
              received_data_points: null
              markers:
                - uuid: 27a841d8-78c0-4e5e-b0ee-ec1fafd90ef6
                  name: Name3
                  description: Description3
                  tag:
                    tagkey1: tagValue1
                    tagkey2: tagValue2
                  type: range
                  detail:
                    start_elapsed_time: 3
                    end_elapsed_time: 7
                  created_at: '2000-01-02T03:04:07Z'
                  created_by: e3f57626-93d6-4274-a51f-1ac538357a8a
                  updated_at: '2020-04-15T14:15:23.135268Z'
                  updated_by: 447af3b3-a311-4047-9d7c-110a0fac505b
                - uuid: cdc1029e-d474-477c-aa6e-b48928fdb825
                  name: Name2
                  description: Description2
                  tag:
                    tagkey1: tagValue1
                    tagkey2: tagValue2
                  type: point
                  detail:
                    occurred_elapsed_time: 3
                  created_at: '2000-01-02T03:04:06Z'
                  created_by: e3f57626-93d6-4274-a51f-1ac538357a8a
                  updated_at: '2020-04-15T14:15:23.064981Z'
                  updated_by: 447af3b3-a311-4047-9d7c-110a0fac505b
              protected: false
              created_at: '2017-02-11T01:23:45Z'
              updated_at: '2017-02-11T12:34:56Z'
        page:
          total_count: 1
          first: true
          last: true
          next: /path?xxx=1&bbb=2&page=3
          previous: /path?xxx=1&bbb=2&page=1
    MeasurementJobGetResponse:
      value:
        uuid: d9135580-4a6b-4fbd-971b-8fdce27b617c
        meas_uuid: a72c674a-e8e9-43bc-940f-a034853363e1
        status: succeeded
        message: Succeeded
        file_name: sample.csv
        created_at: '2017-02-11T01:23:45Z'
        updated_at: '2017-02-11T12:34:56Z'
    MeasurementMarkersGetResponse:
      value:
        items:
          - uuid: 27a841d8-78c0-4e5e-b0ee-ec1fafd90ef6
            name: name
            description: description
            type: range
            detail:
              start_elapsed_time: 3
              end_elapsed_time: 4
            tag:
              tagkey1: tagValue1
              tagkey2: tagValue2
            created_at: '2017-02-11T01:23:45Z'
            created_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
            updated_at: '2017-02-11T12:34:56Z'
            updated_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
          - uuid: cdc1029e-d474-477c-aa6e-b48928fdb825
            name: name
            description: description
            type: point
            detail:
              occurred_elapsed_time: 3
            tag:
              tagkey1: tagValue1
              tagkey2: tagValue2
            created_at: '2017-02-11T01:23:45Z'
            created_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
            updated_at: '2017-02-11T12:34:56Z'
            updated_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
        page:
          total_count: 1
          first: true
          last: true
          next: /path?xxx=1&bbb=2&page=3
          previous: /path?xxx=1&bbb=2&page=1
    MeasurementMarkerGetResponseRange:
      value:
        uuid: 27a841d8-78c0-4e5e-b0ee-ec1fafd90ef6
        name: name
        description: description
        type: range
        detail:
          start_elapsed_time: 3
          end_elapsed_time: 4
        tag:
          tagkey1: tagValue1
          tagkey2: tagValue2
        created_at: '2017-02-11T01:23:45Z'
        created_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
        updated_at: '2017-02-11T12:34:56Z'
        updated_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
    MeasurementMarkerGetResponsePoint:
      value:
        uuid: cdc1029e-d474-477c-aa6e-b48928fdb825
        name: name
        description: description
        type: point
        detail:
          occurred_elapsed_time: 3
        tag:
          tagkey1: tagValue1
          tagkey2: tagValue2
        created_at: '2017-02-11T01:23:45Z'
        created_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
        updated_at: '2017-02-11T12:34:56Z'
        updated_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
    MeasurementMarkerPutRequestRange:
      value:
        name: name
        description: description
        type: range
        detail:
          start_elapsed_time: 100
          end_elapsed_time: 200
        tag:
          tagkey1: tagValue1
          tagkey2: tagValue2
    MeasurementMarkerPutRequestPoint:
      value:
        name: name
        description: description
        type: point
        detail:
          occurred_elapsed_time: 100
        tag:
          tagkey1: tagValue1
          tagkey2: tagValue2
    MeasurementUploadStatusesGetResponse:
      value:
        items:
          - uuid: d9135580-4a6b-4fbd-971b-8fdce27b617c
            meas_uuid: a72c674a-e8e9-43bc-940f-a034853363e1
            state: succeed
            message: Succeed
            file_name: sample.csv
            created_at: '2017-02-11T01:23:45Z'
            updated_at: '2017-02-11T12:34:56Z'
        page:
          total_count: 1
          first: true
          last: true
          next: /path?xxx=1&bbb=2&page=3
          previous: /path?xxx=1&bbb=2&page=1
    MeasurementUploadPostResponse:
      value:
        meas_upload_uuid: d9135580-4a6b-4fbd-971b-8fdce27b617c
        job_uuid: d9135580-4a6b-4fbd-971b-8fdce27b617c
        file_name: filename.csv
    MeasurementMarkerPostRequestPoint:
      value:
        name: name
        description: description
        type: point
        detail:
          occurred_elapsed_time: 100
        tag:
          tagkey1: tagValue1
          tagkey2: tagValue2
    MeasurementMarkerPostRequestRange:
      value:
        name: name
        description: description
        type: range
        detail:
          start_elapsed_time: 100
          end_elapsed_time: 200
        tag:
          tagkey1: tagValue1
          tagkey2: tagValue2
    ErrorProblemBadRequestMedia:
      value:
        type: invalid_request
        title: invalid request message
    ErrorProblemConflictMedia:
      value:
        type: conflict
        title: conflict message
paths:
  /auth/clients:
    get:
      summary: List OAuth2Clients
      operationId: listOAuth2Clients
      description: OAuth2クライアントのリストを取得します。
      parameters:
        - name: id
          in: query
          description: OAuth2クライアントID
          example: 039b8ee2-8edc-46e4-9a88-4d03bac142f7
          schema:
            type: array
            items:
              type: string
        - name: name
          in: query
          description: 名前による部分一致検索
          example: client_name
          schema:
            type: array
            items:
              type: string
        - name: sort
          in: query
          description: >-
            並べ替えに使用するキー。接尾辞 `+` を付けた場合は昇順、 `-` を付けた場合は降順で出力されます。
            接尾辞を省略した場合は昇順となります。 例えば、 `name-` を指定すると、nameによる降順で出力されます。
              - name
              - created_at
              - updated_at
          schema:
            default: name+
            type: string
        - $ref: '#/components/parameters/QueryPage'
        - $ref: '#/components/parameters/QueryPerPage'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/OAuth2Clients'
      tags:
        - auth_Clients
  /auth/authorize/http:
    post:
      operationId: checkHTTPAuthorization
      summary: Check HTTP Authorization
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CheckAuthorizationResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckHTTPAuthorizationRequest'
      tags:
        - auth_Authorization
  /auth/clients/{client_id}:
    get:
      summary: Get OAuth2Client
      description: OAuth2クライアントを取得します。
      operationId: getOAuth2Client
      parameters:
        - $ref: '#/components/parameters/PathClientID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/OAuth2Client'
      tags:
        - auth_Clients
    patch:
      summary: Update OAuth2Client
      description: OAuth2クライアントを更新します。
      operationId: updateOAuth2Client
      parameters:
        - $ref: '#/components/parameters/PathClientID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOAuth2ClientRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/OAuth2Client'
      tags:
        - auth_Clients
    delete:
      summary: Delete OAuth2Client
      description: OAuth2クライアントを削除します。
      parameters:
        - $ref: '#/components/parameters/PathClientID'
      operationId: deleteOAuth2Client
      responses:
        '204':
          description: No Content
      tags:
        - auth_Clients
  /auth/edges:
    get:
      operationId: listEdges
      description: エッジのリストを取得します。
      summary: List Edges
      parameters:
        - name: uuid
          in: query
          description: エッジのUUID
          example: 0932ff17-567c-4ac8-a40d-136357890f7b
          schema:
            type: array
            items:
              type: string
        - name: name
          in: query
          description: 名前による部分一致検索
          example: edge_name
          schema:
            type: array
            items:
              type: string
        - name: nickname
          in: query
          description: 表示名による部分一致検索
          example: edge_nickname
          schema:
            type: array
            items:
              type: string
        - name: owner_uuid
          in: query
          description: 所有者ユーザーのUUID
          example: d30267f0-bdd4-4d53-b072-45d3cc29c7de
          schema:
            type: array
            items:
              type: string
        - name: has_owner
          in: query
          description: |-
            所有者の有無。

            * `true` : 所有者が設定されているエッジを取得します。
            * `false` : 所有者が設定されていないエッジを取得します。
          example: 'true'
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
        - name: sort
          in: query
          description: |-
            並べ替えに使用するキー。接尾辞 `+` を付けた場合は昇順、 `-` を付けた場合は降順で出力されます。
            接尾辞を省略した場合は昇順となります。 例えば、 `name-` を指定すると、nameによる降順で出力されます。
              - name
              - created_at
              - updated_at
          schema:
            default: name+
            type: string
        - $ref: '#/components/parameters/QueryPage'
        - $ref: '#/components/parameters/QueryPerPage'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Edges'
              examples:
                Edges:
                  $ref: '#/components/examples/EmptyList'
      tags:
        - auth_Edges
    post:
      operationId: createEdge
      summary: Create Edge
      description: 所有者がない状態でエッジを作成します。
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEdgeRequest'
      responses:
        '201':
          description: Created
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Edge'
              examples:
                EdgeWithoutOwner:
                  $ref: '#/components/examples/EdgeWithoutOwner'
      tags:
        - auth_Edges
  /auth/edges/me:
    get:
      operationId: GetMeAsEdge
      description: 自分のUUIDと同じエッジUUIDを持つエッジを取得します。
      summary: Get Edge having the same UUID as Me
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Edge'
              examples:
                Edge:
                  $ref: '#/components/examples/Edge'
      tags:
        - auth_Edges
  /auth/edges/{edge_uuid}:
    get:
      operationId: getEdge
      description: エッジを取得します。
      summary: Get Edge
      parameters:
        - $ref: '#/components/parameters/PathEdgeUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Edge'
              examples:
                Edge:
                  $ref: '#/components/examples/Edge'
      tags:
        - auth_Edges
    patch:
      operationId: updateEdge
      description: エッジを更新します。
      summary: Update Edge
      parameters:
        - $ref: '#/components/parameters/PathEdgeUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEdgeRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Edge'
              examples:
                Edge:
                  $ref: '#/components/examples/Edge'
      tags:
        - auth_Edges
    delete:
      operationId: deleteEdge
      summary: Delete Edge
      description: エッジを削除します。
      parameters:
        - $ref: '#/components/parameters/PathEdgeUUID'
      responses:
        '204':
          description: No Content
      tags:
        - auth_Edges
  /auth/edges/{edge_uuid}/owner:
    post:
      operationId: assignOwner
      description: エッジに所有者を割り当てます。
      summary: Assign Owner
      parameters:
        - $ref: '#/components/parameters/PathEdgeUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignOwnerRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EdgeOwner'
        '409':
          description: Conflict
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              example:
                type: conflict
                title: error message
      tags:
        - auth_Edges
    delete:
      operationId: removeOwner
      description: エッジに所有者がない状態にします。
      summary: Unassign Owner
      parameters:
        - $ref: '#/components/parameters/PathEdgeUUID'
      responses:
        '204':
          description: No Content
      tags:
        - auth_Edges
  /auth/oauth2/authorization:
    get:
      operationId: oauth2Authorization
      description: >-
        OAuth2認可エンドポイント。 [RFC6749:The OAuth 2.0 Authorization
        Framework](https://tools.ietf.org/html/rfc6749)
      parameters:
        - $ref: '#/components/parameters/QueryOAuth2ClientID'
        - $ref: '#/components/parameters/QueryOAuth2ResponseType'
        - $ref: '#/components/parameters/QueryOAuth2RedirectURI'
        - $ref: '#/components/parameters/QueryOAuth2State'
        - $ref: '#/components/parameters/QueryOAuth2CodeChallenge'
        - $ref: '#/components/parameters/QueryOAuth2CodeChallengeMethod'
      responses:
        '302':
          description: APIサーバーで設定されているログインページや同意ページへのリダイレクト
      summary: Authorization Endpoint
      tags:
        - auth_OAuth2
  /auth/oauth2/revocation:
    post:
      operationId: reovokeToken
      description: >-
        トークンを無効化します。 このエンドポイントをコールしてからトークンが無効化されるまで、通常数秒程度かかります。 [RFC7009:OAuth
        2.0 Token Revocation](https://tools.ietf.org/html/rfc7009)
      requestBody:
        content:
          application/x-www-form-urlencoded:
            examples:
              email:
                value:
                  client_id: 99dcf67c_default.aptpod.co.jp
                  token: >-
                    eyJhbGciOiJSUzI1NiIsImtpZCI6ImNkY2M4NjAxZGNiMTY2ODg5MTAyNjY5OWY2MmQ5ZDEyNGIxMTcwZmQ4OWU2YTgxNTkyNGIwNDIwZWQ2MDM0NWYiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE1ODA5NTQ5NzgsImlhdCI6MTU4MDk1MTM3OCwiaXNzIjoibWljcm8tYXV0aCJ9.Xmi5TgHRiXIaVZXtfCxPNEIWrJMusmlqImA2d7uTZDtnUh6Cv_RvbLgChVsyl5hPFNDXU-Bm4-Nh8ppQVJpHQhVYPeVlycMXhKXdlx_kNJoBA8tJ4BgZlQObt16ZzakZIoYJBH8ffWkWxDYGVswVFRaB4e4EfsaOa3jGP15jK9g
                  token_type_hint: refresh_token
            schema:
              $ref: '#/components/schemas/RevokeTokenRequest'
      responses:
        '200':
          description: OK
          headers: {}
      summary: Revoke Token
      tags:
        - auth_OAuth2
  /auth/oauth2/jwks:
    get:
      description: >-
        JSON Web Keysのリストを取得します。 [RFC7517:JSON Web
        Key](https://tools.ietf.org/html/rfc7517)
      responses:
        '200':
          content:
            application/jwk-set+json; charset=utf-8:
              examples:
                response:
                  value:
                    keys:
                      - use: sig
                        kty: RSA
                        kid: >-
                          6b8b47b2ea9d29b3efdfa1b3d3bf1b3cc88df7c8bb202c8b0f744dde2efe936e
                        alg: RS256
                        'n': >-
                          puyrqHYId3dIDZfDyEAY_Z8NoS86ohYWx0YcOPgfELGsu4NMX8yJhIG4f-wAXxnhFTdOI4nXjbBLmTfxliwTfkH94utcWiCCTLELa9RyZlL19SyFDfVf606xVaOGsESWwPTAid1_QigGt8Qx9ebtVsb5NfXWOeEofRWR29u6H6k
                        e: AQAB
                      - use: sig
                        kty: EC
                        kid: >-
                          9e02473a20ef0c9a22049132686ee8d6e331af1a3dcf4c0c80dc4978ba66bd75
                        crv: P-384
                        alg: ES384
                        x: >-
                          SG_q0mYlLQ8PM56M8gfQX2D2XWbB6ALM0eX67OArp5FdlJ1B6IADP7cidWVag6AU
                        'y': >-
                          fnmtLHn8UQl-fY8i9ri15A2CxQ_eCArZD_H8h2vtPi6v6bnDK2Kn0GnohnHn_12n
              schema:
                $ref: '#/components/schemas/OAuth2JWKs'
          description: OK
          headers: {}
      summary: List JSON Web Keys
      tags:
        - auth_OAuth2
  /auth/oauth2/token:
    post:
      operationId: issueToken
      description: >-
        OAuth2のアクセストークンを取得します。 [RFC6749:The OAuth 2.0 Authorization
        Framework](https://tools.ietf.org/html/rfc6749)
      requestBody:
        content:
          application/x-www-form-urlencoded:
            examples:
              email:
                value:
                  grant_type: password
                  username: username@example.com
                  password: password
                  client_id: 99dcf67c_default.aptpod.co.jp
              username:
                value:
                  grant_type: password
                  username: username
                  password: password
                  client_id: 99dcf67c_default.aptpod.co.jp
              authorization_code:
                value:
                  grant_type: authorization_code
                  code: >-
                    w765opGdrT6Bd8dC4oT_ovsAjyM2NO8-U1egu0FgmN8.1MFSqmUl-HTrsOuvYRw3g8Ra0laz4X35kZgZr7eM640
                  client_id: 533bc9ea_authorization_code.aptpod.co.jp
                  redirect_uri: http://localhost:8080
              authorization_code_pkce:
                value:
                  grant_type: authorization_code
                  code: >-
                    w765opGdrT6Bd8dC4oT_ovsAjyM2NO8-U1egu0FgmN8.1MFSqmUl-HTrsOuvYRw3g8Ra0laz4X35kZgZr7eM640
                  client_id: 533bc9ea_authorization_code.aptpod.co.jp
                  redirect_uri: http://localhost:8080
                  code_verifier: >-
                    659cbc006ea54ed6-abf12ebd8d40e00868504d2cdc49418a86107dba5f463f5d
              client_credentials `client_secret_post`:
                value:
                  grant_type: client_credentials
                  client_id: d2219ec6-b7ee-47c2-a7bf-447754b1de49
                  client_secret: >-
                    3cEZUVWX5PrM5SsEGVP84MmGbM7BgcgvfQaKlSnTR0zIjWYSulPJcFSMvzG09uto
              client_credentials `tls_client_auth`:
                value:
                  grant_type: client_credentials
                  client_id: d2219ec6-b7ee-47c2-a7bf-447754b1de49
                  client_certification: >-
                    -----BEGIN CERTIFICATE-----
                    MIIEpzCCAw+gAwIBAgIRAPf1PElvbMfTv4n7yc1B1VkwDQYJKoZIhvcNAQELBQAw
                    gbcxHjAcBgNVBAoTFW1rY2VydCBkZXZlbG9wbWVudCBDQTFGMEQGA1UECww9bWFz
                    YXl1a2ktbWl5YXVjaGlAbWl5YXVjaGktbWFzYXl1a2ktMTQxMS5sb2NhbCAo5a6u
                    5YaF5aOv5LmLKTFNMEsGA1UEAwxEbWtjZXJ0IG1hc2F5dWtpLW1peWF1Y2hpQG1p
                    eWF1Y2hpLW1hc2F5dWtpLTE0MTEubG9jYWwgKOWuruWGheWjr+S5iykwHhcNMjAx
                    MTE3MDgzODIxWhcNMzAxMTE3MDgzODIxWjBxMQswCQYDVQQGEwJKUDEOMAwGA1UE
                    CBMFVG9reW8xETAPBgNVBAcTCFNoaW5qdWt1MQ8wDQYDVQQKEwZhcHRwb2QxEzAR
                    BgNVBAsTCnByb2R1Y3Rpb24xGTAXBgNVBAMTEGRldmVsb3BtZW50LWNlcnQwggEi
                    MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDe/V7GAyDWAIZ8/wHnUAvfzt5i
                    777x3Wmpf8qNzyZKo3um9xFdIa0LBqkYDS5RgBnapdLY+2Ihkw+VFA4ws++8eeW4
                    wuXmwOZXVb6rGVdL6AH84XI9Zl0TQ6vZR0xcav3ZmWKU3eEw6eN2iDJhSzzdcUPv
                    paGw4LQ3VxknBHhi1+Vm5HxjG6c1+LfAgnW7AVEFPj13AP3B2Axe2SiCGspaBoK3
                    x5EMqVRGVQmZTP2igVgIyUZ8CgiRstmCOTt9HCNrCud39eY5p73lDn6fwB7Fj/7p
                    MKLYPip1xs60N9NkRpsnz85V5Qo5kvunV9NUFeTRCzciIqd8Ku7vH6QABKtbAgMB
                    AAGjczBxMA4GA1UdDwEB/wQEAwIFoDATBgNVHSUEDDAKBggrBgEFBQcDATAMBgNV
                    HRMBAf8EAjAAMB8GA1UdIwQYMBaAFCfPRuEGzxXomEKZE9Vc2i8SRnW3MBsGA1Ud
                    EQQUMBKCEGRldmVsb3BtZW50LWNlcnQwDQYJKoZIhvcNAQELBQADggGBALPyYn4y
                    whQ5JezeUwDpKj/UVl3PdeCIoqBrj4s+6GVtBpwE3m6lFw1Fp1g0Bgoh90wuchlw
                    ijsaf8MwWezFNeTpZ/TONc9zgM0Dv+WBrEpsNc+VeJAfSNBLNo63fmHjmnUdOL/F
                    jEe/avphet22GJaa6KHsPRzqVXsaDjcWTlT8oSSwuaOWpHVXuW1m0TG2fJlIGPhW
                    EbjDjAxPF8+meW9GH1sT8QA8rhRZl4O8J8Z2QH8wQTfnWe3jCCgf5kmD0h5URZwD
                    GZbn0MSXa+7xX9RgaAxwvsNMDqhW/cF8IDmxWE8X5xTukuN5Qz6EtBtvwliETJro
                    YyIN9a/aMjJjypp8tEMoLeJRKWFsOy5DKh0rSNjb8FLWlf176dIrahcyhAs2n8AB
                    38P9mgn2cyoijg52CA3GmofPM9cxsnvcmzScvi7dL6QCTIPDP2nuWZIX3SJVY/Jp
                    qKxueGGWuD5ePDy020qxEGIXZcCnhhoz6HSjEDiqVjQKjjhJEugQ6QPo1w==
                    -----END CERTIFICATE-----
            schema:
              title: TokenRequest
              type: object
              properties:
                grant_type:
                  description: グラントタイプ
                  enum:
                    - password
                    - authorization_code
                    - refresh_token
                    - client_credentials
                refresh_token:
                  description: 認可時に発行されたリフレッシュトークン。grant_typeが `refresh_token` の場合にだけ指定します。
                  type: string
                tenant_uuid:
                  description: >-
                    テナントのUUID。grant_typeが `password` の場合にだけ指定します。 grant_typeが
                    `password` で、テナントUUIDを省略した場合は、デフォルトのテナントが使用されます。
                  type: string
                  default: 00000000-0000-0000-0000-000000000000
                username:
                  description: ユーザーの名前。grant_typeが `password` の場合にだけ指定します。
                  type: string
                password:
                  description: パスワード。grant_typeが `password` の場合にだけ指定します。
                  type: string
                client_id:
                  description: OAuth2クライアントのID
                  type: string
                client_secret:
                  description: >-
                    OAuth2のクライアントシークレット。 OAuth2クライアントの
                    `token_endpoint_auth_method` が `client_secret_post`
                    の場合にだけ指定します。
                  type: string
                client_certification:
                  description: >-
                    OAuth2のクライアント証明書。 OAuth2クライアントの `token_endpoint_auth_method`
                    が `tls_client_auth` の場合にだけ指定します。
                  type: string
                redirect_uri:
                  description: 認可後のリダイレクト先URI。 grant_typeが `authorization_code` の場合にだけ必要です。
                  type: string
                code_verifier:
                  description: |-
                    PKCE code verifier.
                     * 使用可能な文字:  `[a-Z] / [0-9] / "-" / "." / "_" / "~"`
                     * 長さ: 43文字以上、128文字以下
                  type: string
                code:
                  description: 認可コード
                  type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    token_type: bearer
                    access_token: >-
                      eyJhbGciOiJSUzI1NiIsImtpZCI6ImNkY2M4NjAxZGNiMTY2ODg5MTAyNjY5OWY2MmQ5ZDEyNGIxMTcwZmQ4OWU2YTgxNTkyNGIwNDIwZWQ2MDM0NWYiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE1ODA5NTQ5NzgsImlhdCI6MTU4MDk1MTM3OCwiaXNzIjoibWljcm8tYXV0aCJ9.Xmi5TgHRiXIaVZXtfCxPNEIWrJMusmlqImA2d7uTZDtnUh6Cv_RvbLgChVsyl5hPFNDXU-Bm4-Nh8ppQVJpHQhVYPeVlycMXhKXdlx_kNJoBA8tJ4BgZlQObt16ZzakZIoYJBH8ffWkWxDYGVswVFRaB4e4EfsaOa3jGP15jK9g
                    expires_in: 3600
                    refresh_token: >-
                      lv70VlZ92fLAKiNT5qzOi684K0R5ZVcPjtAhCo_A_0I.iUIeiUrBVR9OoM9y_QBzSVzAgXvJ-8AYANCA1WEx_Lw
                    refresh_token_expires_in: 2592000
                    scope: ''
              schema:
                type: object
                properties:
                  access_token:
                    description: アクセストークン
                    type: string
                  expires_in:
                    description: アクセストークンの有効期限（期限切れまでの秒数）
                    type: integer
                    format: int64
                  refresh_token:
                    description: リフレッシュトークン
                    type: string
                  refresh_token_expires_in:
                    description: リフレッシュトークンの有効期限（期限切れまでの秒数）
                    type: integer
                    format: int64
                  scope:
                    description: |-
                      スコープのリスト（スペース区切り）。
                      - temporary
                          - 一時的なユーザーを表します。
                    type: string
                  token_type:
                    description: トークンタイプ。 `Bearer` に固定。
                    type: string
          description: OK
          headers: {}
      summary: Token Endpoint
      tags:
        - auth_OAuth2
  /auth/users/me:
    get:
      operationId: getMe
      description: 自分（ユーザー）を取得します。
      summary: Get Me
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                User:
                  $ref: '#/components/examples/User'
      tags:
        - auth_Me
    patch:
      operationId: updateMe
      description: 自分（ユーザー）を更新します。
      summary: Update Me
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                User:
                  $ref: '#/components/examples/User'
        '403':
          description: Forbidden
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              example:
                type: forbidden
                title: error message
        '409':
          description: Conflict
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                ErrorProblemConflict:
                  $ref: '#/components/examples/ErrorProblemConflict'
      tags:
        - auth_Me
  /auth/users/me/clients:
    get:
      summary: List My OAuth2Clients
      description: 自分（ユーザー）のOAuth2クライアントのリストを取得します。
      operationId: listMyOAuth2Clients
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/OAuth2Clients'
      tags:
        - auth_Clients
    post:
      summary: Create My OAuth2Client
      description: 自分（ユーザー）のOAuth2クライアントを作成します。
      operationId: createMyOAuth2Clients
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMyOAuth2ClientRequest'
            examples:
              AuthorizationCode:
                value:
                  name: my-authorization-code-client
                  grant_type: authorization_code
                  token_endpoint_auth_method: client_secret_basic
                  redirect_uris:
                    - http://localhost:8080
              ClientCredentials:
                value:
                  name: my-credentials-client
                  grant_type: client_credentials
                  token_endpoint_auth_method: client_secret_post
      responses:
        '201':
          description: Created
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/OAuth2ClientWithSecret'
      tags:
        - auth_Clients
  /auth/users/me/clients/{client_id}:
    get:
      parameters:
        - $ref: '#/components/parameters/PathClientID'
      summary: Get My OAuth2Client
      description: 自分（ユーザー）のOAuth2クライアントを取得します。
      operationId: getMyOAuth2Client
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/OAuth2Client'
      tags:
        - auth_Clients
    patch:
      parameters:
        - $ref: '#/components/parameters/PathClientID'
      summary: Update My OAuth2Client
      description: 自分（ユーザー）のOAuth2クライアントを更新します。
      operationId: updateMyOAuth2Client
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOAuth2ClientRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/OAuth2Client'
        '304':
          description: Not Modified
      tags:
        - auth_Clients
    delete:
      parameters:
        - $ref: '#/components/parameters/PathClientID'
      summary: Delete My OAuth2Client
      description: 自分（ユーザー）のOAuth2クライアントを削除します。
      operationId: deleteMyOAuth2Client
      responses:
        '204':
          description: No Content
      tags:
        - auth_Clients
  /auth/users/me/edges:
    get:
      operationId: listMyEdges
      description: 自分（ユーザー）が所有するエッジのリストを取得します。
      summary: List My Edges
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Edges'
              examples:
                Edges:
                  $ref: '#/components/examples/Edges'
      tags:
        - auth_Edges
    post:
      operationId: createMyEdge
      summary: Create My Edge
      description: 新しいエッジを作成し、自分（ユーザー）を所有者に設定します。
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEdgeRequest'
      responses:
        '201':
          description: Created
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Edge'
      tags:
        - auth_Edges
  /auth/users/me/edges/{edge_uuid}:
    get:
      operationId: getMyEdge
      description: 自分（ユーザー）が所有するエッジを取得します。
      summary: Get My Edge
      parameters:
        - $ref: '#/components/parameters/PathEdgeUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Edge'
              examples:
                Edge:
                  $ref: '#/components/examples/Edge'
      tags:
        - auth_Edges
    put:
      operationId: createMyEdgeWithUUID
      summary: Create My Edge With UUID
      description: 指定したUUIDを持つ新しいエッジを作成し、自分を所有者に設定します。
      parameters:
        - $ref: '#/components/parameters/PathEdgeUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEdgeRequest'
            examples:
              CreateEdgeWithUUID:
                $ref: '#/components/examples/CreateEdgeWithUUIDRequest'
      responses:
        '201':
          description: Created
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Edge'
      tags:
        - auth_Edges
    patch:
      operationId: updateMyEdge
      description: 自分（ユーザー）が所有するエッジを更新します。
      summary: Update My Edge
      parameters:
        - $ref: '#/components/parameters/PathEdgeUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEdgeRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Edge'
              examples:
                Edge:
                  $ref: '#/components/examples/Edge'
      tags:
        - auth_Edges
    delete:
      operationId: deleteMyEdge
      summary: Delete My Edge
      description: 自分（ユーザー）が所有するエッジを削除します。
      parameters:
        - $ref: '#/components/parameters/PathEdgeUUID'
      responses:
        '204':
          description: No Content
      tags:
        - auth_Edges
  /auth/users/me/authorize/http:
    post:
      operationId: checkMeHTTPAuthorization
      summary: Check Me HTTP Authorization
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CheckAuthorizationResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckMeHTTPAuthorizationRequest'
      tags:
        - auth_Authorization
  /auth/users:
    get:
      operationId: listUsers
      summary: List Users
      description: ユーザーのリストを取得します。
      parameters:
        - name: uuid
          in: query
          description: ユーザーのUUID
          example: 0932ff17-567c-4ac8-a40d-136357890f7b
          schema:
            type: array
            items:
              type: string
        - name: role_uuid
          in: query
          description: ロールのUUID
          example: af22c56b-6b3e-4807-a165-07e9dbd7e25b
          schema:
            type: array
            items:
              type: string
        - name: name
          in: query
          description: ユーザーの名前による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。
          example: intdash
          schema:
            type: array
            items:
              type: string
        - name: nickname
          in: query
          description: ユーザーの表示名による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。
          example: intdash-nickname
          schema:
            type: array
            items:
              type: string
        - name: email
          in: query
          description: メールアドレスによる部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。
          example: intdash@example.com
          schema:
            type: array
            items:
              type: string
        - name: disabled
          in: query
          example: false
          description: |-
            * `true` を指定した場合、無効化されているユーザーのみを取得します。
            * `false` を指定した場合、有効なユーザーのみを取得します。
            * 指定を省略した場合、有効／無効にかかわらずユーザーを取得します。
          schema:
            type: boolean
        - name: is_super
          in: query
          example: false
          description: |-
            * `true` を指定した場合、スーパーユーザーのみを取得します。
            * `false` を指定した場合、スーパーユーザー以外を取得します。
            * 指定を省略した場合、スーパーユーザーであるかにかかわらずユーザーを取得します。
          schema:
            type: boolean
        - name: is_temporary
          in: query
          example: false
          description: |-
            * `true` を指定した場合、一時パスワードを使用しているユーザーのみを取得します。
            * `false` を指定した場合、パスワードを設定済みのユーザーのみを取得します。
            * 指定を省略した場合、一時パスワードを使用しているかにかかわらずユーザーを取得します。
          schema:
            type: boolean
        - name: min_sign_in_attempt_count
          in: query
          description: ログイン失敗回数の最小値。ログイン失敗回数がこの数値以上のユーザーを取得します。
          example: 1
          schema:
            type: integer
            minimum: 0
        - name: max_sign_in_attempt_count
          description: ログイン失敗回数の最大値。ログイン失敗回数がこの数値以下のユーザーを取得します。
          in: query
          example: 10
          schema:
            type: integer
            minimum: 0
        - name: sort
          in: query
          description: >-
            並べ替えに使用するキー。接尾辞 `+` を付けた場合は昇順、 `-` を付けた場合は降順で出力されます。
            接尾辞を省略した場合は昇順となります。 例えば、 `name-` を指定すると、nameによる降順で出力されます。
              - name
              - created_at
              - updated_at
              - last_sign_in_at
          schema:
            default: name+
            type: string
        - $ref: '#/components/parameters/QueryPage'
        - $ref: '#/components/parameters/QueryPerPage'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Users'
              examples:
                Users:
                  $ref: '#/components/examples/EmptyList'
      tags:
        - auth_Users
    post:
      operationId: createUser
      summary: Create User
      description: >-
        ユーザーを作成します。新しいユーザーには自動生成された一時パスワードが設定されます。 ユーザー作成のリクエストにメールアドレス（ `email`
        ）が含まれていた場合は、 そのメールアドレスに確認メールが送信されます。
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Created
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                CreatedUser:
                  $ref: '#/components/examples/CreatedUser'
        '409':
          description: Conflict
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                ConflictNameAndEmail:
                  $ref: '#/components/examples/ErrorProblemConflictNameAndEmail'
      tags:
        - auth_Users
  /auth/users/me/emails:
    post:
      operationId: createMyEmail
      summary: Create My Email
      description: >-
        自分（ユーザー）のメールアドレスを設定します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。
        確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmailRequest'
      responses:
        '201':
          description: Created
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UserEmail'
        '409':
          description: Conflict
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                ErrorProblemConflict:
                  $ref: '#/components/examples/ErrorProblemConflict'
      tags:
        - auth_Me
  /auth/users/me/emails/{user_email_id}:
    patch:
      operationId: updateMyEmail
      summary: Update My Email
      description: >-
        自分（ユーザー）のメールアドレスを更新します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。
        確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
      parameters:
        - $ref: '#/components/parameters/PathUserEmailID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEmailRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UserEmail'
        '409':
          description: Conflict
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                ErrorProblemConflict:
                  $ref: '#/components/examples/ErrorProblemConflict'
      tags:
        - auth_Me
    delete:
      operationId: deleteMyEmail
      summary: Delete My Email
      description: 自分（ユーザー）のメールアドレスを削除します。
      parameters:
        - $ref: '#/components/parameters/PathUserEmailID'
      responses:
        '204':
          description: No Content
      tags:
        - auth_Me
  /auth/users/me/emails/{user_email_id}/verification:
    put:
      operationId: sendVerificationEmailToMyAddress
      summary: Send Verification Email to Me
      description: メールアドレスを確認するための確認メールを送信します。
      parameters:
        - $ref: '#/components/parameters/PathUserEmailID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UserEmailVerification'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                AlreadyVerified:
                  $ref: '#/components/examples/ErrorProblemBadRequest'
      tags:
        - auth_Me
  /auth/users/me/emails/{user_email_id}/verified:
    put:
      operationId: updateMyAddressToVerified
      summary: Set My Email as Verified
      description: 自分（ユーザー）のメールアドレスを確認済みにします。
      parameters:
        - $ref: '#/components/parameters/PathUserEmailID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmailVerifiedRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UserEmail'
              example:
                id: 1
                address: intdash@example.com
                verified: true
                created_at: '2000-01-01T00:00:00Z'
                updated_at: '2000-01-01T00:00:00Z'
      tags:
        - auth_Me
  /auth/users/me/password:
    put:
      operationId: changePassword
      summary: Change Password
      description: |-
        パスワードを変更します。
        現在のパスワード `old_password` または `recovery_token` が必要です。
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UserPassword'
              examples:
                UserPassword:
                  $ref: '#/components/examples/UserPassword'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              example:
                type: invalid_request
                title: error message
      tags:
        - auth_Me
  /auth/users/me/password/check:
    post:
      summary: Check Password
      description: パスワードがポリシーに適合しているかをチェックします。
      operationId: checkPassword
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              title: CheckPasswordRequest
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  description: チェックしたいパスワード
                  maxLength: 512
                  example: password
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CheckPasswordResult'
      tags:
        - auth_Me
  /auth/users/me/roles:
    get:
      operationId: listMyRoles
      summary: List My Roles
      description: 自分（ユーザー）に割り当てられたロールのリストを取得します。
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Roles'
              examples:
                MyRoles:
                  $ref: '#/components/examples/EmptyList'
      tags:
        - auth_Me
  /auth/users/me/tokens:
    get:
      operationId: listMyAPITokens
      summary: List My API Tokens
      description: 自分（ユーザー）のAPIトークンのリストを取得します。
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UserAPITokens'
              examples:
                UserAPITokenList:
                  $ref: '#/components/examples/UserAPITokenList'
      tags:
        - auth_Me
    post:
      operationId: createMyAPIToken
      summary: Create My API Token
      description: 自分（ユーザー）のAPIトークンを作成します。
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserAPITokenRequest'
      responses:
        '201':
          description: Created
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UserAPIToken'
              examples:
                CreatedUserAPIToken:
                  $ref: '#/components/examples/CreatedUserAPIToken'
        '409':
          description: Conflict
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                ErrorProblemConflict:
                  $ref: '#/components/examples/ErrorProblemConflict'
      tags:
        - auth_Me
  /auth/users/me/tokens/{user_api_token_id}:
    patch:
      operationId: updateMyAPIToken
      summary: Update My API Token
      description: 自分（ユーザー）のAPIトークンを作成します。
      parameters:
        - $ref: '#/components/parameters/UserAPITokenID'
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/UpdateUserAPITokenRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UserAPIToken'
              examples:
                UserAPIToken:
                  $ref: '#/components/examples/UserAPIToken'
      tags:
        - auth_Me
    delete:
      operationId: deleteMyAPIToken
      summary: Delete My API Token
      description: 自分（ユーザー）のAPIトークンを削除します。
      parameters:
        - $ref: '#/components/parameters/UserAPITokenID'
      responses:
        '204':
          description: No Content
      tags:
        - auth_Me
  /auth/users/me/projects:
    get:
      operationId: listMyProjects
      description: 自分（ユーザー）が所属するプロジェクトのリストを取得します。
      summary: List My Projects
      parameters:
        - $ref: '#/components/parameters/QueryPage'
        - $ref: '#/components/parameters/QueryPerPage'
        - $ref: '#/components/parameters/QueryProjectSort'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Projects'
      tags:
        - auth_Projects
  /auth/users/me/groups:
    get:
      operationId: listMyGroups
      description: 自分（ユーザー）が所属するグループのリストを取得します。
      summary: List My Groups
      parameters:
        - $ref: '#/components/parameters/QueryPage'
        - $ref: '#/components/parameters/QueryPerPage'
        - $ref: '#/components/parameters/QueryGroupSort'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Groups'
              examples:
                MyGroups:
                  $ref: '#/components/examples/EmptyList'
      tags:
        - auth_Groups
  /auth/users/tokens/introspection:
    post:
      operationId: introspectAPIToken
      summary: Introspect API Token
      description: APIトークンの検証を行います。
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/APITokenIntrospectionRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APITokenIntrospectionResponse'
              examples:
                InvalidToken:
                  value:
                    active: false
      tags:
        - auth_Users
  /auth/users/{user_uuid}:
    get:
      operationId: getUser
      summary: Get User
      description: ユーザーを取得します。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                User:
                  $ref: '#/components/examples/User'
      tags:
        - auth_Users
    patch:
      operationId: updateUser
      summary: Update User
      description: ユーザーを更新します。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                User:
                  $ref: '#/components/examples/User'
        '403':
          description: Forbidden
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              example:
                type: forbidden
                title: error message
        '409':
          description: Conflict
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                ErrorProblemConflict:
                  $ref: '#/components/examples/ErrorProblemConflict'
      tags:
        - auth_Users
    delete:
      operationId: deleteUser
      summary: Delete User
      description: ユーザーを削除します。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              example:
                type: forbidden
                title: error message
      tags:
        - auth_Users
  /auth/users/{user_uuid}/enable:
    put:
      operationId: enableUser
      summary: Enable User
      description: ユーザーを有効化します。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                User:
                  $ref: '#/components/examples/User'
        '403':
          description: Forbidden
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              example:
                type: forbidden
                title: error message
      tags:
        - auth_Users
  /auth/users/{user_uuid}/disable:
    put:
      operationId: disableUser
      summary: Disable User
      description: ユーザーを無効化します。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/User'
              example:
                uuid: 0932ff17-567c-4ac8-a40d-136357890f7b
                name: intdash
                disabled: true
                is_super: false
                emails:
                  - id: 1
                    address: intdash@example.com
                    verified: false
                    created_at: '2000-01-01T00:00:00Z'
                    updated_at: '2000-01-01T00:00:00Z'
                roles:
                  - af22c56b-6b3e-4807-a165-07e9dbd7e25b
                created_at: '2000-01-01T00:00:00Z'
                updated_at: '2000-01-01T00:00:00Z'
        '403':
          description: Forbidden
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              example:
                type: forbidden
                title: error message
      tags:
        - auth_Users
  /auth/users/{user_uuid}/clients:
    get:
      summary: List User's OAuth2Clients
      description: ユーザーのOAuth2クライアントのリストを取得します。
      operationId: listUsersOAuth2Clients
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/OAuth2Clients'
      tags:
        - auth_Clients
  /auth/users/{user_uuid}/edges:
    get:
      operationId: listUsersEdges
      summary: List User's Edges
      description: 指定されたユーザーが所有するエッジのリストを取得します。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Edges'
              examples:
                Edges:
                  $ref: '#/components/examples/Edges'
      tags:
        - auth_Edges
    post:
      operationId: createUsersEdge
      summary: Create User's Edge
      description: 指定されたユーザーを所有者とするエッジを作成します。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEdgeRequest'
      responses:
        '201':
          description: Created
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Edge'
      tags:
        - auth_Edges
  /auth/users/{user_uuid}/edges/{edge_uuid}:
    get:
      operationId: getUsersEdge
      summary: Get User's Edge
      description: ユーザーが所有するエッジを取得します。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
        - $ref: '#/components/parameters/PathEdgeUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Edge'
              examples:
                Edge:
                  $ref: '#/components/examples/Edge'
      tags:
        - auth_Edges
    patch:
      operationId: updateUsersEdge
      summary: Update User's Edge
      description: ユーザーが所有するエッジを更新します。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
        - $ref: '#/components/parameters/PathEdgeUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEdgeRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Edge'
              examples:
                Edge:
                  $ref: '#/components/examples/Edge'
      tags:
        - auth_Edges
    delete:
      operationId: deleteUsersEdge
      summary: Delete User's Edge
      description: ユーザーが所有するエッジを削除します。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
        - $ref: '#/components/parameters/PathEdgeUUID'
      responses:
        '204':
          description: No Content
      tags:
        - auth_Edges
  /auth/users/{user_uuid}/emails:
    post:
      operationId: createEmail
      summary: Create Email
      description: >-
        ユーザーのメールアドレスを設定します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。
        確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmailRequest'
      responses:
        '201':
          description: Created
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UserEmail'
        '409':
          description: Conflict
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                ErrorProblemConflict:
                  $ref: '#/components/examples/ErrorProblemConflict'
      tags:
        - auth_Users
  /auth/users/{user_uuid}/emails/{user_email_id}:
    patch:
      operationId: updateEmail
      summary: Update Email
      description: >-
        ユーザーのメールアドレスを更新します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。
        確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
        - $ref: '#/components/parameters/PathUserEmailID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEmailRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UserEmail'
        '409':
          description: Conflict
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                ErrorProblemConflict:
                  $ref: '#/components/examples/ErrorProblemConflict'
      tags:
        - auth_Users
    delete:
      operationId: deleteEmail
      summary: Delete Email
      description: ユーザーのメールアドレスを削除します。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
        - $ref: '#/components/parameters/PathUserEmailID'
      responses:
        '204':
          description: No Content
      tags:
        - auth_Users
  /auth/users/{user_uuid}/emails/{user_email_id}/verification:
    put:
      operationId: sendVerificationEmail
      summary: Send Verification Email
      description: メールアドレスを確認するため確認メールを送信します。メールアドレス確認用トークンを使用します。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
        - $ref: '#/components/parameters/PathUserEmailID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UserEmailVerification'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                AlreadyVerified:
                  $ref: '#/components/examples/ErrorProblemBadRequest'
      tags:
        - auth_Users
  /auth/users/{user_uuid}/emails/{user_email_id}/verified:
    put:
      operationId: updateToVerified
      summary: Set Email as Verified
      description: ユーザーのメールアドレスを確認済みにします。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
        - $ref: '#/components/parameters/PathUserEmailID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmailVerifiedRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UserEmail'
              example:
                id: 1
                address: intdash@example.com
                verified: true
                created_at: '2000-01-01T00:00:00Z'
                updated_at: '2000-01-01T00:00:00Z'
      tags:
        - auth_Users
  /auth/users/{user_uuid}/password:
    put:
      operationId: createTemporaryPassword
      summary: Create Temporary Password
      description: ユーザーのパスワードを、ランダムな一時パスワードに変更します。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UserPassword'
              examples:
                UserTemporaryPassword:
                  $ref: '#/components/examples/UserTemporaryPassword'
      tags:
        - auth_Users
  /auth/users/{user_uuid}/password/unlock:
    put:
      operationId: unlockPassword
      summary: Unlock Password
      description: ユーザーのパスワードのロックを解除します。このユーザーのログイン失敗回数は0にリセットされます。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UserPassword'
              example:
                attempt_count: 0
                is_temporary: false
                last_attempt_at: '2000-01-01T00:00:00Z'
                created_at: '2000-01-01T00:00:00Z'
                updated_at: '2000-01-01T00:00:00Z'
      tags:
        - auth_Users
  /auth/users/{user_uuid}/roles:
    get:
      operationId: listUsersRoles
      summary: List User's Roles
      description: ユーザーのロールのリストを取得します。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Roles'
              examples:
                UsersRoles:
                  $ref: '#/components/examples/EmptyList'
      tags:
        - auth_Users
  /auth/users/{user_uuid}/roles/{role_uuid}:
    put:
      operationId: assignRole
      summary: Assign Role
      description: ユーザーにロールを割り当てます。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
        - $ref: '#/components/parameters/PathRoleUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Role'
        '304':
          description: Not Modified
      tags:
        - auth_Users
    delete:
      operationId: unassignRole
      summary: Unassign Role
      description: ユーザーへのロールの割り当てを解除します。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
        - $ref: '#/components/parameters/PathRoleUUID'
      responses:
        '204':
          description: No Content
      tags:
        - auth_Users
  /auth/users/{user_uuid}/tokens:
    get:
      operationId: listAPITokens
      summary: List API Tokens
      description: ユーザーのAPIトークンのリストを取得します。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UserAPITokens'
              examples:
                UserAPITokenList:
                  $ref: '#/components/examples/UserAPITokenList'
      tags:
        - auth_Users
    post:
      operationId: createAPIToken
      summary: Create API Token
      description: ユーザーのAPIトークンを作成します。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserAPITokenRequest'
      responses:
        '201':
          description: Created
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UserAPIToken'
              examples:
                CreatedUserAPIToken:
                  $ref: '#/components/examples/CreatedUserAPIToken'
        '409':
          description: Conflict
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                ErrorProblemConflict:
                  $ref: '#/components/examples/ErrorProblemConflict'
      tags:
        - auth_Users
  /auth/users/{user_uuid}/tokens/{user_api_token_id}:
    patch:
      operationId: updateAPIToken
      summary: Update API Token
      description: ユーザーのAPIトークンを更新します。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
        - $ref: '#/components/parameters/UserAPITokenID'
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/UpdateUserAPITokenRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UserAPIToken'
              examples:
                UserAPIToken:
                  $ref: '#/components/examples/UserAPIToken'
      tags:
        - auth_Users
    delete:
      operationId: deleteAPIToken
      summary: Delete API Token
      description: ユーザーのAPIトークンを削除します。
      parameters:
        - $ref: '#/components/parameters/PathUserUUID'
        - $ref: '#/components/parameters/UserAPITokenID'
      responses:
        '204':
          description: No Content
      tags:
        - auth_Users
  /auth/groups:
    get:
      operationId: listGroups
      summary: List Groups
      description: グループのリストを取得します。
      parameters:
        - $ref: '#/components/parameters/QueryPage'
        - $ref: '#/components/parameters/QueryPerPage'
        - $ref: '#/components/parameters/QueryGroupSort'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Groups'
              examples:
                Groups:
                  $ref: '#/components/examples/EmptyList'
      tags:
        - auth_Groups
    post:
      operationId: createGroup
      summary: Create Group
      description: グループを作成します。
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
      responses:
        '201':
          description: Created
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Group'
              examples:
                CreatedGroup:
                  $ref: '#/components/examples/CreatedGroup'
        '409':
          description: Conflict
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                ConflictNameAndEmail:
                  $ref: '#/components/examples/ErrorProblemConflict'
      tags:
        - auth_Groups
  /auth/groups/{group_uuid}:
    get:
      operationId: getGroup
      summary: Get Group
      description: グループを取得します。
      parameters:
        - $ref: '#/components/parameters/PathGroupUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Group'
      tags:
        - auth_Groups
    patch:
      operationId: updateGroup
      summary: Update Group
      description: グループを更新します。
      parameters:
        - $ref: '#/components/parameters/PathGroupUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Group'
      tags:
        - auth_Groups
    delete:
      operationId: deleteGroup
      summary: Delete Group
      description: グループを削除します。
      parameters:
        - $ref: '#/components/parameters/PathGroupUUID'
      responses:
        '204':
          description: No Content
      tags:
        - auth_Groups
  /auth/groups/{group_uuid}/groups:
    get:
      operationId: listSubGroup
      summary: List Sub Groups
      description: サブグループを取得します。
      parameters:
        - $ref: '#/components/parameters/PathGroupUUID'
        - $ref: '#/components/parameters/QueryPage'
        - $ref: '#/components/parameters/QueryPerPage'
        - $ref: '#/components/parameters/QueryGroupSort'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Groups'
              examples:
                SubGroups:
                  $ref: '#/components/examples/EmptyList'
      tags:
        - auth_Groups
    post:
      operationId: createSubGroup
      summary: Create Sub Group
      description: サブグループを作成します。
      parameters:
        - $ref: '#/components/parameters/PathGroupUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
      responses:
        '201':
          description: Created
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Group'
              examples:
                CreatedGroup:
                  $ref: '#/components/examples/CreatedGroup'
        '403':
          description: Forbidden
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                ErrorExceededMaxGroupsCount:
                  $ref: >-
                    #/components/examples/ErrorProblemErrorExceededMaxGroupsCount
        '409':
          description: Conflict
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                ConflictNameAndEmail:
                  $ref: '#/components/examples/ErrorProblemConflict'
      tags:
        - auth_Groups
  /auth/groups/{group_uuid}/members:
    get:
      operationId: listGroupMembers
      summary: List Group Members
      description: グループメンバーリストを取得します。
      parameters:
        - $ref: '#/components/parameters/PathGroupUUID'
        - $ref: '#/components/parameters/QueryIsOwner'
        - $ref: '#/components/parameters/QueryUserUUIDs'
        - $ref: '#/components/parameters/QueryPage'
        - $ref: '#/components/parameters/QueryPerPage'
        - $ref: '#/components/parameters/QueryGroupMemberSort'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Members'
              examples:
                GroupMembers:
                  $ref: '#/components/examples/EmptyList'
      tags:
        - auth_Group Members
    post:
      operationId: addGroupMember
      summary: Add Group Member
      description: グループメンバーを追加します。
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddGroupMemberRequest'
      parameters:
        - $ref: '#/components/parameters/PathGroupUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Member'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
        '409':
          description: Conflict
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                AlreadyMember:
                  $ref: '#/components/examples/ErrorProblemConflict'
      tags:
        - auth_Group Members
  /auth/groups/{group_uuid}/projects:
    get:
      operationId: listGroupProjects
      summary: List Group Projects
      description: プロジェクトのリストを取得します。
      parameters:
        - $ref: '#/components/parameters/PathGroupUUID'
        - $ref: '#/components/parameters/QueryPage'
        - $ref: '#/components/parameters/QueryPerPage'
        - $ref: '#/components/parameters/QueryProjectSort'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Projects'
              examples:
                GroupProjects:
                  $ref: '#/components/examples/EmptyList'
      tags:
        - auth_Projects
    post:
      operationId: createProject
      summary: Create Project
      description: プロジェクトを作成します。
      parameters:
        - $ref: '#/components/parameters/PathGroupUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: Created
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Project'
              examples:
                CreatedProject:
                  $ref: '#/components/examples/CreatedProject'
        '403':
          description: Forbidden
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                ExceededMaxProjectsCountPerGroup:
                  $ref: >-
                    #/components/examples/ErrorProblemExceededMaxProjectsCountPerGroup
        '409':
          description: Conflict
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                ConflictNameAndEmail:
                  $ref: '#/components/examples/ErrorProblemConflict'
      tags:
        - auth_Projects
  /auth/projects:
    get:
      operationId: listProjects
      summary: List Projects
      description: プロジェクトのリストを取得します。
      parameters:
        - $ref: '#/components/parameters/QuerySinceCreatedAt'
        - $ref: '#/components/parameters/QueryPage'
        - $ref: '#/components/parameters/QueryPerPage'
        - $ref: '#/components/parameters/QueryProjectSort'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Projects'
      tags:
        - auth_Projects
  /auth/projects/{project_uuid}:
    get:
      operationId: getProject
      summary: Get Project
      description: プロジェクトを取得します。
      parameters:
        - $ref: '#/components/parameters/PathProjectUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Project'
      tags:
        - auth_Projects
    patch:
      operationId: updateProject
      summary: Update Project
      description: プロジェクトを更新します。
      parameters:
        - $ref: '#/components/parameters/PathProjectUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Project'
        '409':
          description: Conflict
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                ErrorProblemConflict:
                  $ref: '#/components/examples/ErrorProblemConflict'
      tags:
        - auth_Projects
    delete:
      operationId: deleteProject
      summary: Delete Project
      description: プロジェクトを削除します。プロジェクトを削除できるのはプロジェクトのオーナーのみです。
      parameters:
        - $ref: '#/components/parameters/PathProjectUUID'
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                CannotDeleteProject:
                  $ref: >-
                    #/components/examples/ErrorProblemForbiddenCannotDeleteProject
      tags:
        - auth_Projects
  /auth/projects/{project_uuid}/edges:
    get:
      operationId: listProjectEdges
      summary: List Project Edges
      description: プロジェクトに所属するエッジのリストを取得します。
      parameters:
        - $ref: '#/components/parameters/PathProjectUUID'
        - $ref: '#/components/parameters/QueryEdgeUUIDs'
        - $ref: '#/components/parameters/QueryPage'
        - $ref: '#/components/parameters/QueryPerPage'
        - $ref: '#/components/parameters/QueryProjectEdgeSort'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ProjectEdges'
              examples:
                ProjectEdges:
                  $ref: '#/components/examples/EmptyList'
      tags:
        - auth_Project Edges
    post:
      operationId: addProjectEdges
      summary: Add Project Edge
      description: エッジをプロジェクトに追加します。
      parameters:
        - $ref: '#/components/parameters/PathProjectUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddProjectEdgeRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ProjectEdge'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
        '409':
          description: Conflict
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                AlreadyInProject:
                  $ref: '#/components/examples/ErrorProblemConflict'
      tags:
        - auth_Project Edges
  /auth/projects/{project_uuid}/edges/{edge_uuid}:
    get:
      operationId: getProjectEdge
      summary: Get Project Edge
      description: プロジェクトに所属するエッジを取得します。
      parameters:
        - $ref: '#/components/parameters/PathProjectUUID'
        - $ref: '#/components/parameters/PathEdgeUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ProjectEdge'
      tags:
        - auth_Project Edges
    delete:
      operationId: removeProjectEdge
      summary: Remove Project Edge
      description: プロジェクトからエッジを外します。
      parameters:
        - $ref: '#/components/parameters/PathProjectUUID'
        - $ref: '#/components/parameters/PathEdgeUUID'
      responses:
        '204':
          description: No Content
      tags:
        - auth_Project Edges
    patch:
      operationId: updateProjectEdge
      summary: Update Project Edge
      description: プロジェクトエッジを更新します。
      parameters:
        - $ref: '#/components/parameters/PathProjectUUID'
        - $ref: '#/components/parameters/PathEdgeUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectEdgeRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ProjectEdge'
        '304':
          description: Not Modified
      tags:
        - auth_Project Edges
  /auth/projects/{project_uuid}/members:
    get:
      operationId: listProjectMembers
      summary: List Project Members
      description: プロジェクトメンバーリストを取得します。
      parameters:
        - $ref: '#/components/parameters/PathProjectUUID'
        - $ref: '#/components/parameters/QueryUserUUIDs'
        - $ref: '#/components/parameters/QueryIsOwner'
        - $ref: '#/components/parameters/QueryPage'
        - $ref: '#/components/parameters/QueryPerPage'
        - $ref: '#/components/parameters/QueryProjectMemberSort'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Members'
              examples:
                ProjectMembers:
                  $ref: '#/components/examples/EmptyList'
      tags:
        - auth_Project Members
    post:
      operationId: addProjectMember
      summary: Add Project Member
      description: プロジェクトメンバーを追加します。
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddProjectMemberRequest'
      parameters:
        - $ref: '#/components/parameters/PathProjectUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Member'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
        '409':
          description: Conflict
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                AlreadyMember:
                  $ref: '#/components/examples/ErrorProblemConflict'
      tags:
        - auth_Project Members
  /auth/projects/{project_uuid}/members/{user_uuid}:
    get:
      operationId: getProjectMember
      summary: Get Project Member
      description: プロジェクトメンバーを取得します。
      parameters:
        - $ref: '#/components/parameters/PathProjectUUID'
        - $ref: '#/components/parameters/PathUserUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Member'
        '404':
          description: Not Found
      tags:
        - auth_Project Members
    patch:
      operationId: updateProjectMember
      summary: Update Project Member
      description: プロジェクトメンバーを更新します。
      parameters:
        - $ref: '#/components/parameters/PathProjectUUID'
        - $ref: '#/components/parameters/PathUserUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectMemberRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Member'
      tags:
        - auth_Project Members
    delete:
      operationId: removeProjectMember
      summary: Remove Project Member
      description: プロジェクトからメンバーを外します。
      parameters:
        - $ref: '#/components/parameters/PathProjectUUID'
        - $ref: '#/components/parameters/PathUserUUID'
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                OwnerMember:
                  $ref: '#/components/examples/ErrorProblemForbiddenRemoveOwner'
      tags:
        - auth_Project Members
  /auth/projects/{project_uuid}/members/{user_uuid}/owner:
    put:
      operationId: addProjectOwnerAttribute
      summary: Add Project Owner Attribute
      description: オーナー属性を追加します。オーナー属性を追加したメンバーは自動的にそのプロジェクトにおける全ての権限が付与されます。
      parameters:
        - $ref: '#/components/parameters/PathProjectUUID'
        - $ref: '#/components/parameters/PathUserUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Member'
        '304':
          description: Not Modified
      tags:
        - auth_Project Members
    delete:
      operationId: removeProjectOwnerAttribute
      summary: Remove Project Owner Attribute
      description: オーナー属性を取り除きます。
      parameters:
        - $ref: '#/components/parameters/PathProjectUUID'
        - $ref: '#/components/parameters/PathUserUUID'
      responses:
        '204':
          description: No Content
        '304':
          description: Not Modified
        '403':
          description: Forbidden
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                OwnerMember:
                  $ref: '#/components/examples/ErrorProblemForbiddenAtLeastOneOwner'
      tags:
        - auth_Project Members
  /auth/groups/{group_uuid}/members/{user_uuid}:
    get:
      operationId: getGroupMember
      summary: Get Group Member
      description: グループメンバーを取得します。
      parameters:
        - $ref: '#/components/parameters/PathGroupUUID'
        - $ref: '#/components/parameters/PathUserUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Member'
        '404':
          description: Not Found
      tags:
        - auth_Group Members
    patch:
      operationId: updateGroupMember
      summary: Update Group Member
      description: グループメンバーを更新します。
      parameters:
        - $ref: '#/components/parameters/PathGroupUUID'
        - $ref: '#/components/parameters/PathUserUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupMemberRequest'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Member'
      tags:
        - auth_Group Members
    delete:
      operationId: removeGroupMember
      summary: Remove Group Member
      description: グループメンバーを除名します。
      parameters:
        - $ref: '#/components/parameters/PathGroupUUID'
        - $ref: '#/components/parameters/PathUserUUID'
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                OwnerMember:
                  $ref: '#/components/examples/ErrorProblemForbiddenRemoveOwner'
      tags:
        - auth_Group Members
  /auth/groups/{group_uuid}/members/{user_uuid}/owner:
    put:
      operationId: addGroupOwnerAttribute
      summary: Add Group Owner Attribute
      description: オーナー属性を追加します。オーナー属性を追加したメンバーは自動的にそのグループにおける全ての権限が付与されます。
      parameters:
        - $ref: '#/components/parameters/PathGroupUUID'
        - $ref: '#/components/parameters/PathUserUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Member'
        '304':
          description: Not Modified
      tags:
        - auth_Group Members
    delete:
      operationId: removeGroupOwnerAttribute
      summary: Remove Group Owner Attribute
      description: オーナー属性を取り除きます。
      parameters:
        - $ref: '#/components/parameters/PathGroupUUID'
        - $ref: '#/components/parameters/PathUserUUID'
      responses:
        '204':
          description: No Content
        '304':
          description: Not Modified
        '403':
          description: Forbidden
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
              examples:
                OwnerMember:
                  $ref: '#/components/examples/ErrorProblemForbiddenAtLeastOneOwner'
      tags:
        - auth_Group Members
  /auth/roles:
    get:
      operationId: listRoles
      summary: List Roles
      description: ロールのリストを取得します。
      parameters:
        - in: query
          name: uuid
          description: ロールのUUID
          example: 6b4f4bce-ba32-4ad9-b808-39e2d68b33ee
          schema:
            type: array
            items:
              type: string
        - in: query
          name: name
          description: ロールの名前による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。
          example: member
          schema:
            type: array
            items:
              type: string
        - $ref: '#/components/parameters/QueryPage'
        - $ref: '#/components/parameters/QueryPerPage'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Roles'
              examples:
                Roles:
                  $ref: '#/components/examples/EmptyList'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
      tags:
        - auth_Roles
  /auth/roles/{role_uuid}:
    get:
      operationId: getRole
      summary: Get Role
      description: ロールを取得します。
      parameters:
        - $ref: '#/components/parameters/PathRoleUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Role'
      tags:
        - auth_Roles
  /auth/scopes:
    get:
      operationId: listScopes
      summary: List Scopes
      description: スコープのリストを取得します。
      parameters:
        - in: query
          name: uuid
          description: スコープのUUID
          example: 4688a07a-0cbc-4597-8c87-538e744bc90d
          schema:
            type: array
            items:
              type: string
        - in: query
          name: name
          description: スコープの名前による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。
          example: meas:r
          schema:
            type: array
            items:
              type: string
        - $ref: '#/components/parameters/QueryPage'
        - $ref: '#/components/parameters/QueryPerPage'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Scopes'
              examples:
                Scopes:
                  $ref: '#/components/examples/EmptyList'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblem'
      tags:
        - auth_Scopes
  /auth/scopes/{scope_uuid}:
    get:
      operationId: getScope
      summary: Get Scope
      description: スコープを取得します。
      parameters:
        - $ref: '#/components/parameters/PathScopeUUID'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Scope'
      tags:
        - auth_Scopes
  /v1/edge_connections:
    get:
      operationId: listEdgeConnections
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/edge_connection`
        を使用してください）
         エッジ接続のリストを取得します。
         エッジ接続は、エッジが `/v1/ws/measurements` エンドポイントに接続したときに新規作成され、
         3日間更新がないと削除されます。
      parameters:
        - description: エッジのUUID
          example:
            - b55e3351-97e2-4db1-ac90-60fda8b3d144
          in: query
          name: edge
          required: false
          schema:
            type: array
            items:
              type: string
        - description: 並べ替えに使用するキー
          in: query
          example: last_lived_at
          name: sort
          required: false
          schema:
            default: last_lived_at
            enum:
              - last_lived_at
              - created_at
              - updated_at
            type: string
        - description: 並べ替えの順序
          example: asc
          in: query
          name: order
          required: false
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: 1回のリクエストで取得する件数
          example:
            - '100'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: integer
        - description: 取得するページの番号
          example: '1'
          in: query
          name: page
          required: false
          schema:
            default: 1
            type: integer
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    items:
                      - uuid: e0326d93-6e94-4edf-92a2-961cc1c07414
                        last_lived_at: '2017-02-11T01:23:45Z'
                        edge:
                          uuid: b55e3351-97e2-4db1-ac90-60fda8b3d144
                          name: edge_name
                          nickname: edge_nickname
                          description: edge description
                          type: user
                          disabled: true
                          internal: false
                          protected: false
                          last_lived_at: '2017-02-11T01:23:45Z'
                          last_login_at: '2017-02-11T01:23:45Z'
                          created_at: '2017-02-11T01:23:45Z'
                          updated_at: '2017-02-11T01:23:45Z'
                        created_at: '2017-02-11T01:23:45Z'
                        updated_at: '2017-02-11T12:34:56Z'
                    page: null
              schema:
                $ref: '#/components/schemas/EdgeConnectionList'
          description: OK
          headers: {}
      summary: List Edge Connections
      tags:
        - broker_Edge Connections
  /v1/edge_connections/{edge_connection_uuid}:
    get:
      operationId: getEdgeConnection
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/edge_connection/{edge_connection_uuid}`
        を使用してください） エッジ接続（ `/v1/ws/measurements` に接続されたエッジの接続情報）を取得します。
      parameters:
        - description: エッジ接続のUUID
          example: e0326d93-6e94-4edf-92a2-961cc1c07414
          in: path
          name: edge_connection_uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    created_at: '2017-02-11T01:23:45Z'
                    downstreams:
                      - created_at: '2017-02-11T01:23:45Z'
                        dst_edge_uuid: c3341333-31ce-40a6-9208-2dde4c869aab
                        last_received_at: '2017-02-11T01:23:45Z'
                        received_close_request: false
                        src_edge_uuid: 3c11158e-ce70-41a9-8ed6-dd3a3b94ce3e
                        stream_id: 1
                        updated_at: '2017-02-11T12:34:56Z'
                    edge:
                      created_at: '2017-02-11T01:23:45Z'
                      description: edge description
                      disabled: true
                      internal: false
                      last_lived_at: '2017-02-11T01:23:45Z'
                      last_login_at: '2017-02-11T01:23:45Z'
                      name: edge_name
                      nickname: edge_nickname
                      protected: false
                      type: user
                      updated_at: '2017-02-11T01:23:45Z'
                      uuid: b55e3351-97e2-4db1-ac90-60fda8b3d144
                    last_lived_at: '2017-02-11T01:23:45Z'
                    updated_at: '2017-02-11T12:34:56Z'
                    upstreams:
                      - created_at: '2017-02-11T01:23:45Z'
                        last_received_at: '2017-02-11T01:23:45Z'
                        measurement_uuid: e6e292d6-013f-4214-9367-6a5673c8c82a
                        received_close_request: false
                        resend: false
                        src_edge_uuid: 3c11158e-ce70-41a9-8ed6-dd3a3b94ce3e
                        store: false
                        stream_id: 1
                        updated_at: '2017-02-11T12:34:56Z'
                    uuid: e0326d93-6e94-4edf-92a2-961cc1c07414
              schema:
                $ref: '#/components/schemas/EdgeConnection'
          description: OK
          headers: {}
      summary: Get Edge Connection
      tags:
        - broker_Edge Connections
  /v1/stream:
    get:
      operationId: Stream
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/stream` を使用してください）
         WebSocketを使ってリアルタイムデータを取得します。


         同じくWebSocketを使ってリアルタイムデータを扱う `/v1/ws/measurements` では、
         iSCP (intdash Stream Control Protocol)を使用しますが、
         本エンドポイントではJSONとしてデータポイントを取得することができます。

         ## クエリパラメータ


         | パラメータ名     | 型                         | 必須       | デフォルト | 説明  |

         | ---------------- | -------------------------- | ---------- | ---------- | ----- |

         | flush_interval   | string                     | true       | -          |
         メッセージがフラッシュされる間隔を指定します。
         単位は"ns"、"us" (または"µs")、"ms"、"s"、"m"、"h"のいずれかを使用してください
         （参考: [Goのtimeパッケージ](https://golang.org/pkg/time/#ParseDuration)）。
         指定がない場合は、メッセージごとにフラッシュされます。 |


         ## メッセージのフォーマット

         ###  JSON Lines

         リクエストメッセージおよびレスポンスメッセージには [JSON lines](http://jsonlines.org/) 形式を使用します。

         1つのメッセージが1行です。


         例:

         ```

         { "type" : "message_type", "contents" : { depends on message_type }}

         { "type" : "message_type", "contents" : { depends on message_type }}

         { "type" : "message_type", "contents" : { depends on message_type }}

         { "type" : "message_type", "contents" : { depends on message_type }}

         { "type" : "message_type", "contents" : { depends on message_type }}

         .

         .


         ```

         注意: メッセージに改行を含むことはできません。

         改行が入ったメッセージの例（悪い例）:

         ```

         {
           "type" : "message_type",
           "contents" : { depends on message_type }
         }

         ```


         メッセージには、 `type` 属性および `contents` 属性が必要です。
         `contents` のスキーマは、 `type` により決定されます。

         ## ダウンストリーム開始リクエスト

         ### ダウンストリーム開始リクエストメッセージのスキーマ

         | 属性名           | 型                       | 必須       | デフォルト        | 説明    |

         | ---------------- | ------------------------ | ---------- | ----------------- | ------- |

         | id               | number                   | false      | -                 | idに指定した値は、レスポンスの `ack` 属性として返ります。 |

         | type             | string                   | true       | `"open_downstream"` | 固定値  |

         | contents         | object（次の表を参照）   | true       | -                 |         |


         ### ダウンストリーム開始リクエスト内 `contents` のスキーマ

         | 属性名           | 型                       | 必須       | デフォルト         | 説明   |

         | ---------------- | ------------------------ | ---------- | ------------------ | ------ |

         | edge             | string                   | true       | -                  | データの送信元エッジを、エッジのUUIDまたはエッジの名前で指定します。
         最初に、一致するエッジUUIDが検索され、一致するエッジUUIDがなければ一致する名前が検索されます。 |

         | filter           | string array             | false      | `[]`               | 「フィルター」を参照してください。 |


         ### フィルター

         データコードとデータ名を指定することにより、指定にマッチしたデータポイントだけを受信することができます。

         ただし、メタデータのデータポイントは、フィルターの設定に関係なくすべて受信されます。


         フィルターは以下のフォーマットで設定します: `<型コード>:<データ名>`

         データコードについては、後述の 時系列データのペイロードフォーマット を参照してください。

         フィルター設定文字列の各セグメントにはワイルドカード( `**` )を使用することができます。


         例:

         - 型コードが `can_data_field` のデータポイント（CAN）を受信する -> `can_data_field:**`

         - 型コードが `string/` で始まるデータポイントを受信する（`string/json` 、 `string/csv` など） -> `string/**:**`

         - 文字列のデータポイントのうち、データ名が `my-string` のものを受信する -> `string:my-string`


         `filter` として空の配列が指定された場合は、すべてのデータポイントを受信します。


         ### ダウンストリーム開始リクエストの例

         リクエスト:

         ```

         { "type" : "open_downstream", "contents" : { "edge" : "edge_name_or_uuid", "filter" : ["string:a/b"] } }

         ```

         レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:


         ```

         { "type" : "response", "contents": { "code" : 10000, "message": "succeed: open downstream" } }

         ```


         ## ダウンストリーム更新リクエスト

         ### ダウンストリーム更新リクエストメッセージのスキーマ


         | 属性名           | 型                       | 必須       | デフォルト        | 説明    |

         | ---------------- | ------------------------ | ---------- | ----------------- | ------- |

         | id               | number                   | false      | -                 | idに指定した値は、レスポンスの `ack` 属性として返ります。 |

         | type             | string                   | true       | `"update_downstream"`  | 固定値  |

         | contents         | object（次の表を参照）   | true       | -                 |         |


         ### ダウンストリーム更新リクエスト内 `contents` のスキーマ


         | 属性名           | 型                       | 必須       | デフォルト        | 説明    |

         | ---------------- | ------------------------ | ---------- | ----------------- | ------- |

         | filter           | string array             | true       | -                 |「フィルター」を参照してください。 |


         ### ダウンストリーム更新リクエストの例

         フィルターを指定する場合のリクエスト:

         ```

         { "type" : "update_downstream", "contents" : { "filter" : ["string:a/b"] } }

         ```


         フィルターを指定せずすべてのデータポイントを受信する場合のリクエスト:

         ```

         { "type" : "update_downstream", "contents" : { "filter" : [] } }

         ```


         レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:


         ```

         { "type" : "response", "contents": { "code" : 10000, "message": "succeed:
         update downstream" } }

         ```


         ## ダウンストリーム終了リクエスト

         ### ダウンストリーム終了リクエストメッセージのスキーマ


         | 属性名           | 型                       | 必須       | デフォルト        | 説明    |

         | ---------------- | ------------------------ | ---------- | ----------------- | ------- |

         | id               | number                   | false      | -                 | idに指定した値は、レスポンスの `ack` 属性として返ります。  |

         | type             | string                   | true       | `"close_downstream"` | 固定値|


         ### ダウンストリーム終了リクエストの例

         リクエスト:

         ```

         { "type" : "close_downstream"}

         ```

         レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:

         ```

         { "type" : "response", "contents": { "code" : 10000, "message": "succeed: close downstream" } }

         ```


         ## レスポンスメッセージ

         リクエストの処理結果が返却されます。

         ### レスポンスメッセージのスキーマ


         | 属性名           | 型                       | 必須       | デフォルト        | 説明    |

         | ---------------- | ------------------------ | ---------- | ----------------- | ----- |

         | type             | string                   | true       | `"response"`      | 固定値|

         | ack              | number                   | false      | -                 | リクエストで `id` が指定されていた場合、その値 |

         | contents         | object（次の表を参照）   | true       | -                 |       |


         ### レスポンス内 `contents` のスキーマ


         | 属性名           | 型                       | 必須       | デフォルト        | 説明    |

         | ---------------- | ------------------------ | ---------- | ----------------- | ----- |

         | code             | number                   | true       | -                 | 10000 < code < 20000 の場合、成功。
         20000 < code < 30000 の場合、不正なリクエスト。50000 < code の場合、予期しないエラー |

         | message          | string                   | true       | -                 | リクエストで `id` が指定されていた場合、その値 |


         ### レスポンスの例

         ```

         { "type" : "response", "contents": { "code" : 10000, "message": "succeed: open downstream" } }

         ```


         リクエストで `id` が指定されている場合のレスポンス例（ `id` の値が `ack` として返ります）:


         ```

         { "ack": 1, "type" : "response", "contents": { "code" : 10000, "message": "succeed: open downstream" } }

         ```

         # 時系列データのペイロードフォーマット

         時系列データポイントが格納するペイロードのフォーマットです。各データ型に対する `contents`のフォーマットは [このページ](https://git.aptpod.co.jp/intdash-protocol/dataformat/-/tree/master/data) を参照してください。

         ## データ型

         各データバイナリには、ペイロードのフォーマットを示すデータ型が付与されます。各データ型には、型を識別するためのコード名が割り当てられます。

         ## 標準データ型

         単一のデータを格納するデータ型です。


         |          名称           |  コード   | バイト長 |             説明             |

         | :---------------------- | :-------- | :------: | :--------------------------- |

         | Bytes     | `bytes`   |   可変   | フォーマットなしバイト列     |

         | String    | `string`  |   可変   | フォーマットなし文字列       |

         | Float64   | `float64` |    8     | IEEE754 64ビット浮動小数点数 |

         | Int64     | `int64`   |    8     | 符号付き 64ビット整数        |

         | Bool      | `bool`    |    1     | 真偽値                       |


         ## メディアデータ型

         メディア（動画/音声）関連のデータを格納するデータ型です。


         |          名称           |    コード    | バイト長 |            説明            |

         | :---------------------- | :----------- | :------: | :------------------------- |

         | JPEG | `video/jpeg` |   可変   | JPEG 形式の画像データ      |

         | H264 | `video/h264` |   可変   | H264 形式の映像データ      |


         ### 拡張バイナリ型

         フォーマット付きのバイナリデータを格納するデータ型です。


         |                       名称                        |      コード       | バイト長 |                   説明                    |

         | :------------------------------------------------ | :---------------- | :------: | :---------------------------------------- |

         | BSON                                 | `bson`            |   可変   | BSON フォーマット                         |

         | CAN Frame                            | `can_frame`       |   可変   | CAN フレーム フォーマット                 |

         | CAN Data Field                       | `can_data_field`  |   可変   | CAN データフィールド フォーマット         |

         | MAVLink1 Packet                      | `mavlink1_packet` |   可変   | MAVLink パケット フォーマット             |

         | Generic (非推奨)                     | `generic`         |   可変   | iSCPv1互換 汎用フォーマット               |

         | Controlpad (非推奨)                  | `control_pad`     |   可変   | iSCPv1互換 コントロールパッドフォーマット |

         | GeneralSensor (非推奨)               | `general_sensor`  |   可変   | iSCPv1互換 汎用センサーフォーマット       |


         ### 拡張文字列型

         フォーマット付きの文字列データを格納するデータ型です。


         |           名称           |    コード     | バイト長 |       説明        |

         | :----------------------- | :------------ | :------: | :---------------- |

         | JSON | `string/json`     |   可変   | JSON フォーマット |

         | CSV   | `string/csv`     |   可変   | CSV フォーマット  |

         | NMEA | `string/nmea`     |   可変   | NMEA フォーマット |
      responses:
        '101':
          description: Switching Protocols.
          headers: {}
      summary: Get Realtime Streaming Data
      tags:
        - broker_Stream
  /v1/ws/measurements:
    get:
      operationId: ConnectISCPV1
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/ws/measurements`
        を使用してください）
         iSCP v1（WebSocket上でリアルタイムデータを送受信するintdash独自プロトコル）の使用を開始するためのエンドポイントです。


         このリクエストを送ることで、プロトコルがWebSocketに切り替えられ、iSCP v1を使用できます。

         "permessage-deflate" (RFC 7692) が使用できます。


         iSCP v1の詳細については、別ドキュメント [詳説iSCP 1.0](https://docs.intdash.jp/manual/iscp1-essentials/latest/ja/iscp1-essentials-ja.pdf) を参照してください。


         「詳説iSCP 1.0」に記載されいていない事項ついては、 [アプトポッド](https://www.aptpod.co.jp/contact/) にお問い合わせください。
      responses:
        '101':
          description: Switching Protocols
          headers: {}
      summary: Connect ISCPv1
      tags:
        - broker_iSCP
  /iscp/connect:
    get:
      operationId: connectISCPV2
      description: >-
        iSCP v2（WebSocket上でリアルタイムデータを送受信するintdash独自プロトコル）の使用を開始するためのエンドポイントです。

        このリクエストを送ることで、プロトコルがWebSocketに切り替えられ、iSCP v2を使用できます。


        iSCP v2の詳細については、 [アプトポッド](https://www.aptpod.co.jp/contact/)
        にお問い合わせください。
      responses:
        '101':
          description: Switching Protocols
          headers: {}
      summary: Connect ISCPv2
      tags:
        - broker_iSCP
  /iscp/tickets:
    post:
      operationId: issueISCPTicket
      description: >-
        iSCPの認証チケットを発行します。


        iSCPの認証チケットは、iSCPv2の接続リクエスト時の拡張用アクセストークンとして使用することができます。
        また、認証チケットは有効期限内で一回のみ使用することができます。 一度使用した認証チケットは有効期限に関わらず使用することはできません。
      responses:
        '201':
          description: Created
          headers: {}
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ISCPTicket'
      summary: Issue ISCP Ticket
      tags:
        - broker_iSCP
  /v1/projects/{project_uuid}/edge_connections:
    get:
      operationId: listProjectEdgeConnections
      description: >-
        エッジ接続のリストを取得します。 エッジ接続は、エッジが `/v1/ws/measurements`
        エンドポイントに接続したときに新規作成され、 3日間更新がないと削除されます。
      parameters:
        - $ref: '#/components/parameters/BrokerPathProjectUUID'
        - description: エッジのUUID
          example:
            - b55e3351-97e2-4db1-ac90-60fda8b3d144
          in: query
          name: edge
          required: false
          schema:
            type: array
            items:
              type: string
        - description: 並べ替えに使用するキー
          in: query
          example: last_lived_at
          name: sort
          required: false
          schema:
            default: last_lived_at
            enum:
              - last_lived_at
              - created_at
              - updated_at
            type: string
        - description: 並べ替えの順序
          example: asc
          in: query
          name: order
          required: false
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: 1回のリクエストで取得する件数
          example:
            - '100'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: integer
        - description: 取得するページの番号
          example: '1'
          in: query
          name: page
          required: false
          schema:
            default: 1
            type: integer
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    items:
                      - uuid: e0326d93-6e94-4edf-92a2-961cc1c07414
                        last_lived_at: '2017-02-11T01:23:45Z'
                        edge:
                          uuid: b55e3351-97e2-4db1-ac90-60fda8b3d144
                          name: edge_name
                          nickname: edge_nickname
                          description: edge description
                          type: user
                          disabled: true
                          internal: false
                          protected: false
                          last_lived_at: '2017-02-11T01:23:45Z'
                          last_login_at: '2017-02-11T01:23:45Z'
                          created_at: '2017-02-11T01:23:45Z'
                          updated_at: '2017-02-11T01:23:45Z'
                        created_at: '2017-02-11T01:23:45Z'
                        updated_at: '2017-02-11T12:34:56Z'
                    page: null
              schema:
                $ref: '#/components/schemas/EdgeConnectionList'
          description: OK
          headers: {}
      summary: List Project Edge Connections
      tags:
        - broker_Edge Connections
  /v1/projects/{project_uuid}/edge_connections/{edge_connection_uuid}:
    get:
      operationId: getProjectEdgeConnection
      description: エッジ接続（ `/v1/ws/measurements` に接続されたエッジの接続情報）を取得します。
      parameters:
        - $ref: '#/components/parameters/BrokerPathProjectUUID'
        - description: エッジ接続のUUID
          example: e0326d93-6e94-4edf-92a2-961cc1c07414
          in: path
          name: edge_connection_uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    created_at: '2017-02-11T01:23:45Z'
                    downstreams:
                      - created_at: '2017-02-11T01:23:45Z'
                        dst_edge_uuid: c3341333-31ce-40a6-9208-2dde4c869aab
                        last_received_at: '2017-02-11T01:23:45Z'
                        received_close_request: false
                        src_edge_uuid: 3c11158e-ce70-41a9-8ed6-dd3a3b94ce3e
                        stream_id: 1
                        updated_at: '2017-02-11T12:34:56Z'
                    edge:
                      created_at: '2017-02-11T01:23:45Z'
                      description: edge description
                      disabled: true
                      internal: false
                      last_lived_at: '2017-02-11T01:23:45Z'
                      last_login_at: '2017-02-11T01:23:45Z'
                      name: edge_name
                      nickname: edge_nickname
                      protected: false
                      type: user
                      updated_at: '2017-02-11T01:23:45Z'
                      uuid: b55e3351-97e2-4db1-ac90-60fda8b3d144
                    last_lived_at: '2017-02-11T01:23:45Z'
                    updated_at: '2017-02-11T12:34:56Z'
                    upstreams:
                      - created_at: '2017-02-11T01:23:45Z'
                        last_received_at: '2017-02-11T01:23:45Z'
                        measurement_uuid: e6e292d6-013f-4214-9367-6a5673c8c82a
                        received_close_request: false
                        resend: false
                        src_edge_uuid: 3c11158e-ce70-41a9-8ed6-dd3a3b94ce3e
                        store: false
                        stream_id: 1
                        updated_at: '2017-02-11T12:34:56Z'
                    uuid: e0326d93-6e94-4edf-92a2-961cc1c07414
              schema:
                $ref: '#/components/schemas/EdgeConnection'
          description: OK
          headers: {}
      summary: Get Project Edge Connection
      tags:
        - broker_Edge Connections
  /v1/projects/{project_uuid}/stream:
    get:
      operationId: projectStream
      parameters:
        - $ref: '#/components/parameters/BrokerPathProjectUUID'
      description: >-
        WebSocketを使ってリアルタイムデータを取得します。


        同じくWebSocketを使ってリアルタイムデータを扱う `/v1/ws/measurements` では、 iSCP (intdash
        Stream Control Protocol)を使用しますが、 本エンドポイントではJSONとしてデータポイントを取得することができます。

        ## クエリパラメータ


        | パラメータ名     | 型                         | 必須       | デフォルト | 説明  |

        | ---------------- | -------------------------- | ---------- |
        ---------- | ----- |

        | flush_interval   | string                     | true       |
        -          | メッセージがフラッシュされる間隔を指定します。 単位は"ns"、"us"
        (または"µs")、"ms"、"s"、"m"、"h"のいずれかを使用してください （参考:
        [Goのtimeパッケージ](https://golang.org/pkg/time/#ParseDuration)）。
        指定がない場合は、メッセージごとにフラッシュされます。 |


        ## メッセージのフォーマット

        ###  JSON Lines

        リクエストメッセージおよびレスポンスメッセージには [JSON lines](http://jsonlines.org/) 形式を使用します。

        1つのメッセージが1行です。


        例:

        ```

        { "type" : "message_type", "contents" : { depends on message_type }}

        { "type" : "message_type", "contents" : { depends on message_type }}

        { "type" : "message_type", "contents" : { depends on message_type }}

        { "type" : "message_type", "contents" : { depends on message_type }}

        { "type" : "message_type", "contents" : { depends on message_type }}

        .

        .


        ```

        注意: メッセージに改行を含むことはできません。

        改行が入ったメッセージの例（悪い例）:

        ```

        {
          "type" : "message_type",
          "contents" : { depends on message_type }
        }

        ```


        メッセージには、 `type` 属性および `contents` 属性が必要です。 `contents` のスキーマは、 `type`
        により決定されます。

        ## ダウンストリーム開始リクエスト

        ### ダウンストリーム開始リクエストメッセージのスキーマ

        | 属性名           | 型                       | 必須       | デフォルト        |
        説明    |

        | ---------------- | ------------------------ | ---------- |
        ----------------- | ------- |

        | id               | number                   | false      |
        -                 | idに指定した値は、レスポンスの `ack` 属性として返ります。 |

        | type             | string                   | true       |
        `"open_downstream"` | 固定値  |

        | contents         | object（次の表を参照）   | true       | -                
        |         |


        ### ダウンストリーム開始リクエスト内 `contents` のスキーマ

        | 属性名           | 型                       | 必須       | デフォルト         |
        説明   |

        | ---------------- | ------------------------ | ---------- |
        ------------------ | ------ |

        | edge             | string                   | true       |
        -                  | データの送信元エッジを、エッジのUUIDまたはエッジの名前で指定します。
        最初に、一致するエッジUUIDが検索され、一致するエッジUUIDがなければ一致する名前が検索されます。 |

        | filter           | string array             | false      |
        `[]`               | 「フィルター」を参照してください。 |


        ### フィルター

        データコードとデータ名を指定することにより、指定にマッチしたデータポイントだけを受信することができます。

        ただし、メタデータのデータポイントは、フィルターの設定に関係なくすべて受信されます。


        フィルターは以下のフォーマットで設定します: `<型コード>:<データ名>`

        データコードについては、後述の 時系列データのペイロードフォーマット を参照してください。

        フィルター設定文字列の各セグメントにはワイルドカード( `**` )を使用することができます。


        例:

        - 型コードが `can_data_field` のデータポイント（CAN）を受信する -> `can_data_field:**`

        - 型コードが `string/` で始まるデータポイントを受信する（`string/json` 、 `string/csv` など） ->
        `string/**:**`

        - 文字列のデータポイントのうち、データ名が `my-string` のものを受信する -> `string:my-string`


        `filter` として空の配列が指定された場合は、すべてのデータポイントを受信します。


        ### ダウンストリーム開始リクエストの例

        リクエスト:

        ```

        { "type" : "open_downstream", "contents" : { "edge" :
        "edge_name_or_uuid", "filter" : ["string:a/b"] } }

        ```

        レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:


        ```

        { "type" : "response", "contents": { "code" : 10000, "message":
        "succeed: open downstream" } }

        ```


        ## ダウンストリーム更新リクエスト

        ### ダウンストリーム更新リクエストメッセージのスキーマ


        | 属性名           | 型                       | 必須       | デフォルト        |
        説明    |

        | ---------------- | ------------------------ | ---------- |
        ----------------- | ------- |

        | id               | number                   | false      |
        -                 | idに指定した値は、レスポンスの `ack` 属性として返ります。 |

        | type             | string                   | true       |
        `"update_downstream"`  | 固定値  |

        | contents         | object（次の表を参照）   | true       | -                
        |         |


        ### ダウンストリーム更新リクエスト内 `contents` のスキーマ


        | 属性名           | 型                       | 必須       | デフォルト        |
        説明    |

        | ---------------- | ------------------------ | ---------- |
        ----------------- | ------- |

        | filter           | string array             | true       |
        -                 |「フィルター」を参照してください。 |


        ### ダウンストリーム更新リクエストの例

        フィルターを指定する場合のリクエスト:

        ```

        { "type" : "update_downstream", "contents" : { "filter" : ["string:a/b"]
        } }

        ```


        フィルターを指定せずすべてのデータポイントを受信する場合のリクエスト:

        ```

        { "type" : "update_downstream", "contents" : { "filter" : [] } }

        ```


        レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:


        ```

        { "type" : "response", "contents": { "code" : 10000, "message":
        "succeed: update downstream" } }

        ```


        ## ダウンストリーム終了リクエスト

        ### ダウンストリーム終了リクエストメッセージのスキーマ


        | 属性名           | 型                       | 必須       | デフォルト        |
        説明    |

        | ---------------- | ------------------------ | ---------- |
        ----------------- | ------- |

        | id               | number                   | false      |
        -                 | idに指定した値は、レスポンスの `ack` 属性として返ります。  |

        | type             | string                   | true       |
        `"close_downstream"` | 固定値|


        ### ダウンストリーム終了リクエストの例

        リクエスト:

        ```

        { "type" : "close_downstream"}

        ```

        レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:

        ```

        { "type" : "response", "contents": { "code" : 10000, "message":
        "succeed: close downstream" } }

        ```


        ## レスポンスメッセージ

        リクエストの処理結果が返却されます。

        ### レスポンスメッセージのスキーマ


        | 属性名           | 型                       | 必須       | デフォルト        |
        説明    |

        | ---------------- | ------------------------ | ---------- |
        ----------------- | ----- |

        | type             | string                   | true       |
        `"response"`      | 固定値|

        | ack              | number                   | false      |
        -                 | リクエストで `id` が指定されていた場合、その値 |

        | contents         | object（次の表を参照）   | true       | -                
        |       |


        ### レスポンス内 `contents` のスキーマ


        | 属性名           | 型                       | 必須       | デフォルト        |
        説明    |

        | ---------------- | ------------------------ | ---------- |
        ----------------- | ----- |

        | code             | number                   | true       |
        -                 | 10000 < code < 20000 の場合、成功。 20000 < code < 30000
        の場合、不正なリクエスト。50000 < code の場合、予期しないエラー |

        | message          | string                   | true       |
        -                 | リクエストで `id` が指定されていた場合、その値 |


        ### レスポンスの例

        ```

        { "type" : "response", "contents": { "code" : 10000, "message":
        "succeed: open downstream" } }

        ```


        リクエストで `id` が指定されている場合のレスポンス例（ `id` の値が `ack` として返ります）:


        ```

        { "ack": 1, "type" : "response", "contents": { "code" : 10000,
        "message": "succeed: open downstream" } }

        ```

        # 時系列データのペイロードフォーマット

        時系列データポイントが格納するペイロードのフォーマットです。各データ型に対する `contents`のフォーマットは
        [このページ](https://git.aptpod.co.jp/intdash-protocol/dataformat/-/tree/master/data)
        を参照してください。

        ## データ型

        各データバイナリには、ペイロードのフォーマットを示すデータ型が付与されます。各データ型には、型を識別するためのコード名が割り当てられます。

        ## 標準データ型

        単一のデータを格納するデータ型です。


        |          名称           |  コード   | バイト長 |             説明             |

        | :---------------------- | :-------- | :------: |
        :--------------------------- |

        | Bytes     | `bytes`   |   可変   | フォーマットなしバイト列     |

        | String    | `string`  |   可変   | フォーマットなし文字列       |

        | Float64   | `float64` |    8     | IEEE754 64ビット浮動小数点数 |

        | Int64     | `int64`   |    8     | 符号付き 64ビット整数        |

        | Bool      | `bool`    |    1     | 真偽値                       |


        ## メディアデータ型

        メディア（動画/音声）関連のデータを格納するデータ型です。


        |          名称           |    コード    | バイト長 |            説明            |

        | :---------------------- | :----------- | :------: |
        :------------------------- |

        | JPEG | `video/jpeg` |   可変   | JPEG 形式の画像データ      |

        | H264 | `video/h264` |   可変   | H264 形式の映像データ      |


        ### 拡張バイナリ型

        フォーマット付きのバイナリデータを格納するデータ型です。


        |                       名称                        |      コード       |
        バイト長 |                   説明                    |

        | :------------------------------------------------ | :----------------
        | :------: | :---------------------------------------- |

        | BSON                                 | `bson`            |   可変   |
        BSON フォーマット                         |

        | CAN Frame                            | `can_frame`       |   可変   |
        CAN フレーム フォーマット                 |

        | CAN Data Field                       | `can_data_field`  |   可変   |
        CAN データフィールド フォーマット         |

        | MAVLink1 Packet                      | `mavlink1_packet` |   可変   |
        MAVLink パケット フォーマット             |

        | Generic (非推奨)                     | `generic`         |   可変   |
        iSCPv1互換 汎用フォーマット               |

        | Controlpad (非推奨)                  | `control_pad`     |   可変   |
        iSCPv1互換 コントロールパッドフォーマット |

        | GeneralSensor (非推奨)               | `general_sensor`  |   可変   |
        iSCPv1互換 汎用センサーフォーマット       |


        ### 拡張文字列型

        フォーマット付きの文字列データを格納するデータ型です。


        |           名称           |    コード     | バイト長 |       説明        |

        | :----------------------- | :------------ | :------: |
        :---------------- |

        | JSON | `string/json`     |   可変   | JSON フォーマット |

        | CSV   | `string/csv`     |   可変   | CSV フォーマット  |

        | NMEA | `string/nmea`     |   可変   | NMEA フォーマット |
      responses:
        '101':
          description: Switching Protocols.
          headers: {}
      summary: Get Project Realtime Streaming Data
      tags:
        - broker_Stream
  /v1/projects/{project_uuid}/ws/measurements:
    get:
      operationId: ConnectProjectISCPV1
      parameters:
        - $ref: '#/components/parameters/BrokerPathProjectUUID'
      description: >-
        iSCP v1（WebSocket上でリアルタイムデータを送受信するintdash独自プロトコル）の使用を開始するためのエンドポイントです。


        このリクエストを送ることで、プロトコルがWebSocketに切り替えられ、iSCP v1を使用できます。

        "permessage-deflate" (RFC 7692) が使用できます。


        iSCP v1の詳細については、別ドキュメント [詳説iSCP
        1.0](https://docs.intdash.jp/manual/iscp1-essentials/latest/ja/iscp1-essentials-ja.pdf)
        を参照してください。


        「詳説iSCP 1.0」に記載されいていない事項ついては、
        [アプトポッド](https://www.aptpod.co.jp/contact/) にお問い合わせください。
      responses:
        '101':
          description: Switching Protocols
          headers: {}
      summary: Connect Project ISCPv1
      tags:
        - broker_iSCP
  /v1/data:
    get:
      operationId: listDataPoints
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/data` を使用してください）
         データポイントのリストを取得します。
         返却されるデータポイントはJSON形式です。データポイントごとに改行で区切られます。
      parameters:
        - $ref: '#/components/parameters/DataPointsTargetName'
        - $ref: '#/components/parameters/DataPointsStart'
        - $ref: '#/components/parameters/DataPointsEnd'
        - description: |-
            取得したいデータポイントの条件を以下のフォーマットで指定します。
            `data_id` には、 `GET /data_ids` エンドポイントで取得できる `data_id` の値を使用します。

            - `<data_type>:<channel>/<data_id>`

            各セグメントにはワイルドカード(*)を使用することができます。 例:
              - CAN(data_type = `1`)のデータポイントを取得する -> `1:*/*` または `1`
              - チャンネル2のCANデータポイントを取得する -> `1:2/*` または `1:2`
              - チャンネル2のCANデータポイントのうち、データIDが `00000001` のものを取得する -> `1:2/00000001`
          example: 1:1/*
          in: query
          name: idq
          required: false
          schema:
            type: array
            items:
              type: string
        - description: |-
            指定した時刻以降に更新された計測のみを取得します。
            以下のいずれかの形式で指定します。
              - rfc3339(ex 2019-10-29T03:04:05.341268Z).
              - UNIX時刻（マイクロ秒）(**Deprecated**).
          example: '2019-10-29T03:04:05.341268Z'
          in: query
          name: since
          required: false
          schema:
            type: string
        - description: '`true` を指定した場合、取得中にエラーが発生すると処理を中断し、中断前までのデータポイントのリストを返します。'
          example: 'false'
          in: query
          name: exit_on_error
          required: false
          schema:
            type: string
            default: false
        - $ref: '#/components/parameters/QueryLabel'
        - $ref: '#/components/parameters/QueryPeriod'
        - name: limit
          in: query
          description: 1回のリクエストで取得する件数。デフォルトは無制限。
          schema:
            type: integer
            format: int64
        - description: 並べ替えの順序。デフォルトは `asc` （昇順）
          example: asc
          in: query
          name: order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
        - description: レスポンスの時刻表示形式。デフォルトは `us` （マイクロ秒）
          example: rfc3339
          in: query
          name: time_format
          required: false
          schema:
            enum:
              - ns
              - us
              - ms
              - s
              - rfc3339
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DataPointJSONLine'
            application/protobuf:
              schema:
                description: |-
                  - データは64ビットの符号なし整数です。バイトオーダーはリトルエンディアンです。
                  - データペイロード
                    - [protocol.proto](https://docs.intdash.jp/api/measurement/proto/index.html) の `DataResponseProto` 参照

                  ```

                  0    1    2    3    4    5    6    7    8
                  +----+----+----+----+----+----+----+----+
                  | Data Length( 8 byte)                  |
                  +----+----+----+----+----+----+----+----+ --+--
                  | Data Payload                          |   |
                  +                                       +   |
                  |                                       |   |
                  +                                       +   |
                  .                                       .   | Data Length
                  .                                       .   |
                  .                                       .   |
                  +                                       +   |
                  |                                       |   |
                  +----+----+----+----+----+----+----+----+ --+--
                  | Data Length(8byte)                    |
                  +----+----+----+----+----+----+----+----+ --+--
                  | Data Payload                          |   |
                  +                                       +   |
                  |                                       |   |
                  +                                       +   |
                  .                                       .   | Data Length
                  .                                       .   |
                  ```
                type: string
                format: binary
          description: OK
          headers:
            Transfer-Encoding:
              schema:
                enum:
                  - Chunked
                type: string
      summary: List Data Points
      tags:
        - meas_DataPoints
  /v1/data_ids:
    get:
      operationId: listDataPointDataIDs
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/data_ids` を使用してください）
         データポイントのデータID（ `data_type`, `data_id` ）のリストを取得します。
      parameters:
        - $ref: '#/components/parameters/DataPointsTargetName'
        - $ref: '#/components/parameters/DataPointsStart'
        - $ref: '#/components/parameters/DataPointsEnd'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DataPointDataIDs'
          description: OK
      summary: List Data Point Data IDs
      tags:
        - meas_DataPointIDs
  /v1/getids:
    get:
      operationId: listDataIDs
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/getids` を使用してください）
         エッジを指定し、そのエッジから送信されているデータに含まれるデータ識別子（ `data_type` 、 `channel` 、 `data_id` の組み合わせ）のリストを取得します。
      parameters:
        - $ref: '#/components/parameters/QueryStart'
        - $ref: '#/components/parameters/QueryEnd'
        - $ref: '#/components/parameters/QueryEdgeUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/DataIDsGetResponse'
              schema:
                $ref: '#/components/schemas/DataIDs'
          description: OK
      summary: List Edge's Data IDs
      tags:
        - meas_DataPoints
  /v1/measurements/{measurement_uuid}/getids:
    get:
      operationId: listDataIDsWithMeasurementUUID
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/getids`
        を使用してください） 計測を指定し、その計測に含まれるデータ識別子（ `data_type` 、 `channel` 、 `data_id`
        の組み合わせ）のリストを取得します。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/DataIDsGetResponse'
              schema:
                $ref: '#/components/schemas/DataIDs'
          description: OK
      summary: List Data IDs
      tags:
        - meas_DataPoints
  /v1/measurements/data:
    post:
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/data`
        を使用してください）
         データポイントを登録します。
      operationId: createDataPoints
      requestBody:
        content:
          application/protobuf:
            schema:
              type: string
              format: binary
        description: |-
          このエンドポイント使用時は、 `Content-Type` を以下にしてください。
            * `application/protobuf`
                * [protocol.proto](https://docs.intdash.jp/api/measurement/proto/index.html) の `StoreProto` を参照してください。
                  * `DataPointProto` の `data_payload`は iSCP v1のデータフォーマットに従います。
                  * iSCPのデータフォーマットは [詳説 iSCP 1.0](https://docs.intdash.jp/manual/iscp1-essentials/latest/ja/iscp1-essentials-ja.pdf#page=23)を参照してください。
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: OK
                type: string
                format: binary
          description: OK
          headers: {}
      summary: Store Data Points
      tags:
        - meas_DataPoints
  /v1/measurements:
    get:
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements` を使用してください）
         計測のリストを取得します。
      operationId: listMeasurements
      parameters:
        - description: 計測のUUID
          example: 5c3ac8b5-3acd-43ea-86cb-4835664b0483
          in: query
          name: uuid
          required: false
          schema:
            type: array
            items:
              type: string
        - description: 名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。
          example: measurement1
          in: query
          name: name
          required: false
          schema:
            type: integer
            format: int32
        - description: 計測に関連付けられたエッジのUUID
          example: e0022b03-023f-4f24-90f1-560be10c423b
          in: query
          name: edge_uuid
          required: false
          schema:
            type: string
        - description: |-
            取得対象範囲の始点。以下のいずれかの形式で指定します。
              - RFC3339(例 `2019-10-29T03:04:05.341268Z` )
              - UNIX時刻（マイクロ秒）(**Deprecated**)
          example: '2019-10-29T03:04:05.123456Z'
          in: query
          name: start
          required: false
          schema:
            type: string
        - description: |-
            取得対象範囲の終点。以下のいずれかの形式で指定します。
              - RFC3339(例 `2019-10-29T03:04:05.341268Z` )
              - UNIX時刻（マイクロ秒）(**Deprecated**)
          example: '2019-10-29T03:04:05.234567Z'
          in: query
          name: end
          required: false
          schema:
            type: string
        - description: >-
            `true` にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 `false`
            にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。

            ```
               | measurement1 |
               +--------------+
                                               | measurement2 |
                                               +--------------+
                                   | measurement3 |
                                   +--------------+
                                                                    time
            -----------+----------------------------+------------>
                       |                            |
                      start                        end
            ```


            - この例では、もし `partial_match` を `true` にすると、 `measurement1` 、
            `measurement2` 、 `measurement3` が取得できます。

            - もし `partial_match` を `false` にすると、 `measurement2` と `measurement3`
            が取得できます。
          example: true
          in: query
          name: partial_match
          required: false
          schema:
            default: false
            type: boolean
        - description: 計測の基準時刻のタイプ
          example: ntp
          in: query
          name: basetime_type
          required: false
          schema:
            enum:
              - edge_rtc
              - ntp
              - gps
              - api_first_received
              - volatile
              - manual
            type: string
        - description: |-
            計測が終了している（ended）かどうかを指定して計測を取得します。

            エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。
            計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。
            * `true`: 終了した計測だけを取得します。
            * `false`: 終了していない計測だけを取得します。
          example: false
          in: query
          name: ended
          required: false
          schema:
            type: boolean
        - description: |-
            指定した時刻以降に更新された計測のみを取得します。

            以下のいずれかの形式で指定します。

              - RFC3339(例 `2019-10-29T03:04:05.341268Z` )
              - UNIX時刻（マイクロ秒）(**Deprecated**)
          example: '2019-10-29T03:04:05.341268Z'
          in: query
          name: since
          required: false
          schema:
            type: string
        - description: 計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。
          example: 100
          in: query
          name: duration_start
          required: false
          schema:
            type: integer
            format: int64
        - description: 計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。
          example: 100000
          in: query
          name: duration_end
          required: false
          schema:
            type: integer
            format: int64
        - description: 計測のステータス
          example: measuring
          in: query
          name: status
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - measuring
                - resending
                - finished
        - name: limit
          in: query
          description: 1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。
          example: 1000
          schema:
            type: integer
            format: int32
            default: 1000
        - description: 並べ替えに使用するキー
          example: base_time
          in: query
          name: sort
          required: false
          schema:
            default: base_time
            enum:
              - name
              - description
              - ended
              - duration
              - base_time
              - processed_ratio
              - created_at
              - updated_at
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasList'
              schema:
                $ref: '#/components/schemas/Measurements'
          description: OK
      summary: List Measurements
      tags:
        - meas_Measurements
    post:
      operationId: createMeasurement
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements` を使用してください）
         計測を作成します。

         - **Note**
           - 計測の保護／非保護を切り替える権限を持たないエッジも、
             計測作成時は保護された計測を作成することが可能です。
      requestBody:
        content:
          application/json:
            examples:
              example1:
                $ref: '#/components/examples/MeasCreate'
            schema:
              $ref: '#/components/schemas/MeasCreate'
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/Meas'
              schema:
                $ref: '#/components/schemas/Measurement'
          description: Created
      summary: Create Measurement
      tags:
        - meas_Measurements
  /v1/measurements/{measurement_uuid}:
    get:
      operationId: getMeasurement
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}`
        を使用してください） 計測を取得します。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasFinished'
              schema:
                $ref: '#/components/schemas/Measurement'
          description: OK
      summary: Get Measurement
      tags:
        - meas_Measurements
    post:
      operationId: createMeasurementWithUUID
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}`
        を使用してください） 指定したUUIDの計測を作成します。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
      requestBody:
        content:
          application/json:
            examples:
              example1:
                $ref: '#/components/examples/MeasCreate'
            schema:
              $ref: '#/components/schemas/MeasCreate'
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/Meas'
              schema:
                $ref: '#/components/schemas/Measurement'
          description: Created
      summary: Create Measurement with UUID
      tags:
        - meas_Measurements
    put:
      operationId: updateMeasurement
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}`
        を使用してください） 計測に関する情報を更新します。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeasReplace'
      responses:
        '204':
          description: No Content
      summary: Update Measurement
      tags:
        - meas_Measurements
    delete:
      operationId: deleteMeasurement
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}`
        を使用してください）
         計測を削除します。
         - **Note**
           - 保護された計測は削除できません。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '204':
          description: No Content
      summary: Trash Measurement
      tags:
        - meas_Measurements
  /v1/measurements/{measurement_uuid}/complete:
    put:
      operationId: completeMeasurement
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/complete`
        を使用してください）
         計測を回収完了（completed）にします。
         completedは、エッジでのデータ取得が終了し（ended）、
         かつ、すべてのデータがサーバーに送信されたことを意味します。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/Meas'
              schema:
                $ref: '#/components/schemas/Measurement'
          description: OK
      summary: Complete Measurement
      tags:
        - meas_Measurements
  /v1/measurements/{measurement_uuid}/end:
    put:
      operationId: endMeasurement
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/end`
        を使用してください）
         計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。
         （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SequenceSummary'
          description: OK
      summary: End Measurement
      tags:
        - meas_Measurements
  /v1/measurements/{measurement_uuid}/protected:
    put:
      operationId: protectMeasurement
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected`
        を使用してください） 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources)
        も参照してください。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '204':
          description: No Content
      summary: Protect Measurement
      tags:
        - meas_Measurements
    delete:
      operationId: unprotectMeasurement
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected`
        を使用してください） 計測の保護を解除します。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '204':
          description: No Content
      summary: Unprotect Measurement
      tags:
        - meas_Measurements
  /v1/measurements/{measurement_uuid}/basetimes:
    get:
      operationId: listMeasurementBaseTimes
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes`
        を使用してください）
         計測の基準時刻のリストを取得します。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasBaseTimesGetResponse'
              schema:
                $ref: '#/components/schemas/MeasBaseTimes'
          description: OK
          headers: {}
      summary: List Measurement Base Times
      tags:
        - meas_Measurements
  /v1/measurements/{measurement_uuid}/basetimes/{type}:
    get:
      operationId: getMeasurementBaseTime
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}`
        を使用してください） 基準時刻タイプを指定して計測の基準時刻を取得します。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
        - $ref: '#/components/parameters/pathMeasBaseTimeType'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasBaseTimeGetResponse'
              schema:
                $ref: '#/components/schemas/MeasBaseTime'
          description: OK
          headers: {}
      summary: Get Measurement Base Time
      tags:
        - meas_Measurements
    put:
      operationId: updateMeasurementBaseTime
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}`
        を使用してください）
         基準時刻を更新します。
         この計測において、使用する基準時刻が設定されていない（ `basetime_type` が `undefined` ）の場合は、
         新しい基準時刻を `basetime_type` に設定します。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
        - $ref: '#/components/parameters/pathMeasBaseTimeType'
      requestBody:
        content:
          application/json:
            examples:
              example1:
                $ref: '#/components/examples/MeasBaseTimePutRequest'
            schema:
              $ref: '#/components/schemas/MeasBaseTimePut'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasBaseTimePutResponse'
              schema:
                $ref: '#/components/schemas/MeasBaseTime'
          description: OK
          headers: {}
      summary: Replace Measurement Base Time
      tags:
        - meas_Measurements
    delete:
      operationId: deleteMeasurementBaseTime
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}`
        を使用してください）
         基準時刻を削除します。

         指定された基準時刻が使用中の場合（その計測の `basetime_type` として設定されている場合）は、
         その基準時刻は削除できません（ステータスコード `409` が返却されます）。

         このような場合は、他の基準時刻をその計測の `basetime_type` にしてから、削除したい基準時刻を削除してください。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
        - $ref: '#/components/parameters/pathMeasBaseTimeType'
      responses:
        '204':
          description: No Content
          headers: {}
      summary: Delete Measurement Base Time
      tags:
        - meas_Measurements
  /v1/measurements/{measurement_uuid}/sections:
    get:
      operationId: getMeasurementSections
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sections`
        を使用してください）
         計測に含まれるセクションのリストを取得します。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
        - description: >-
            計測セクションの処理ステータス。 `processed` （処理済みの計測セクションを取得）、 `unprocessed`
            （未処理の計測セクションを取得）、 `both` （両方を取得）のいずれかを選択します。
          example: processed
          in: query
          name: filter
          required: false
          schema:
            default: both
            enum:
              - processed
              - unprocessed
              - both
            type: string
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasurementSectionsGetResponse'
              schema:
                $ref: '#/components/schemas/MeasurementSectionsGetResponse'
          description: OK
          headers: {}
      summary: List Measurement Sections
      tags:
        - meas_Measurements
  /v1/measurements/{measurement_uuid}/sequences:
    get:
      operationId: listMeasurementSequences
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences`
        を使用してください） 計測シーケンスのリストを取得します。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MeasurementSequenceGroups'
          description: OK
          headers: {}
      summary: List Measurement Sequences
      tags:
        - meas_Measurements
  /v1/measurements/{measurement_uuid}/sequences/{sequences_uuid}:
    get:
      operationId: getMeasurementSequence
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}`
        を使用してください） 計測シーケンスを取得します。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
        - $ref: '#/components/parameters/PathMeasSequenceGroupUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MeasurementSequenceGroup'
          description: OK
          headers: {}
      summary: Get Measurement Sequence
      tags:
        - meas_Measurements
    patch:
      operationId: updateMeasurementSequence
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}`
        を使用してください） 計測シーケンスを更新します。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
        - $ref: '#/components/parameters/PathMeasSequenceGroupUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeasurementSequenceGroupReplace'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MeasurementSequenceGroup'
          description: OK
          headers: {}
      summary: Update Measurement Sequence
      tags:
        - meas_Measurements
    put:
      operationId: replaceMeasurementSequence
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}`
        を使用してください） 計測シーケンスを置換します。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
        - $ref: '#/components/parameters/PathMeasSequenceGroupUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeasurementSequenceGroupReplace'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MeasurementSequenceGroup'
          description: OK
          headers: {}
      summary: Replace Measurement Sequence
      tags:
        - meas_Measurements
  /v1/measurements/sequences/chunks:
    post:
      operationId: createMeasurementSequenceChunks
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/sequence/chunks`
        を使用してください） 計測シーケンスにチャンクを作成します。
      requestBody:
        content:
          application/vnd.iscp.v2.protobuf:
            schema:
              description: >-
                [protocol.proto](https://docs.intdash.jp/api/measurement/proto/index.html)の`StoreDataChunks`を参照してくだいさい。


                `StoreDataPoint`のpayloadは iSCP v2のデータフォーマットに従います。この資料は現在準備中です。
              type: string
              format: binary
          application/json:
            schema:
              description: >-
                [protocol.proto](https://docs.intdash.jp/api/measurement/proto/index.html)の`StoreDataChunks`をJSONでシリアライズしたものです。


                `StoreDataPoint`のpayloadは iSCP v2のデータフォーマットに従います。この資料は現在準備中です。
              type: string
              format: binary
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CreateMeasurementChunksResult'
      summary: Create Measurement Sequence Chunk
      tags:
        - meas_Measurements
  /v1/measurements/jobs:
    get:
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/jobs`
        を使用してください）
         ジョブ（CSVファイルを計測に変換するジョブなど）のリストを取得します。
      operationId: listMeasurementJobs
      parameters:
        - $ref: '#/components/parameters/limit'
        - description: 並べ替えに使用するキー
          example: created_at
          in: query
          name: sort
          required: false
          schema:
            default: created_at
            enum:
              - created_at
              - updated_at
        - description: ジョブのステータス
          example: succeeded
          in: query
          name: status
          required: false
          schema:
            enum:
              - ready
              - processing
              - succeeded
              - failed
              - cancelled
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasurementJobsGetResponse'
              schema:
                $ref: '#/components/schemas/MeasurementJobs'
          description: OK
          headers: {}
      summary: List Measurement Jobs
      tags:
        - meas_Measurement Jobs
  /v1/measurements/jobs/{job_uuid}:
    get:
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/jobs/{job_uuid}`
        を使用してください） ジョブを取得します。
      operationId: getMeasurementJob
      parameters:
        - $ref: '#/components/parameters/PathMeasurementJobUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasurementJobGetResponse'
              schema:
                $ref: '#/components/schemas/MeasurementJob'
          description: OK
          headers: {}
      summary: Get Measurement Job
      tags:
        - meas_Measurement Jobs
    delete:
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/jobs/{job_uuid}`
        を使用してください） ジョブを削除します。
      operationId: deleteMeasurementJob
      parameters:
        - $ref: '#/components/parameters/PathMeasurementJobUUID'
      responses:
        '204':
          description: No Content
      summary: Delete Measurement Job
      tags:
        - meas_Measurement Jobs
  /v1/measurements/jobs/{job_uuid}/cancel:
    put:
      operationId: cancelMeasurementJob
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/jobs/{job_uuid}/cancel`
        を使用してください） ジョブをキャンセルします。
      parameters:
        - $ref: '#/components/parameters/PathMeasurementJobUUID'
      responses:
        '204':
          description: No Content
      summary: Cancel Measurement Job
      tags:
        - meas_Measurement Jobs
  /v1/measurements/markers:
    get:
      operationId: listMeasurementMarkers
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/markers`
        を使用してください） 計測マーカーのリストを取得します。
      parameters:
        - description: 計測マーカーのUUID
          example: c14f84c1-b7a5-459b-bd1e-35982e4a4f38
          in: query
          name: uuid
          required: false
          schema:
            type: array
            items:
              type: string
        - description: 計測マーカーの名前
          example: measurement marker1
          in: query
          name: name
          required: false
          schema:
            type: array
            items:
              type: string
        - description: >-
            Get MeasMarkers which start Meas.BaseTime + elapsed_time &lt;=
            this[usec].
          example: 1000
          in: query
          name: start_unix_micro
          required: false
          schema:
            type: integer
            format: int64
        - description: >-
            Get MeasMarkers which start this[usec] &lt; Meas.BaseTime +
            elapsed_time.
          example: 1000
          in: query
          name: end_unix_micro
          required: false
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/QueryTag'
        - $ref: '#/components/parameters/QueryNotTag'
        - $ref: '#/components/parameters/limit'
        - description: 並べ替えに使用するキー
          example: created_at
          in: query
          name: sort
          required: false
          schema:
            default: base_time
            enum:
              - name
              - base_time
              - created_at
              - updated_at
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasurementMarkersGetResponse'
              schema:
                $ref: '#/components/schemas/MeasurementMarkers'
          description: OK
          headers: {}
      summary: List Measurement Markers
      tags:
        - meas_Measurement Markers
  /v1/measurements/markers/{measurement_marker_uuid}:
    get:
      operationId: getMeasurementMarker
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}`
        を使用してください） 計測マーカーを取得します。
      parameters:
        - $ref: '#/components/parameters/PathMeasurementMarkerUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                range:
                  $ref: '#/components/examples/MeasurementMarkerGetResponseRange'
                point:
                  $ref: '#/components/examples/MeasurementMarkerGetResponsePoint'
              schema:
                $ref: '#/components/schemas/MeasurementMarker'
          description: OK
          headers: {}
      summary: Get Measurement Marker
      tags:
        - meas_Measurement Markers
    put:
      operationId: updateMeasurementMarker
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}`
        を使用してください） 計測マーカーを更新します。
      parameters:
        - $ref: '#/components/parameters/PathMeasurementMarkerUUID'
      requestBody:
        content:
          application/json:
            examples:
              range:
                $ref: '#/components/examples/MeasurementMarkerPutRequestRange'
              point:
                $ref: '#/components/examples/MeasurementMarkerPutRequestPoint'
            schema:
              $ref: '#/components/schemas/MeasurementMarkerPutRequest'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                range:
                  $ref: '#/components/examples/MeasurementMarkerGetResponseRange'
                point:
                  $ref: '#/components/examples/MeasurementMarkerGetResponsePoint'
              schema:
                $ref: '#/components/schemas/MeasurementMarker'
          description: OK
          headers: {}
      summary: Update Measurement Marker
      tags:
        - meas_Measurement Markers
    delete:
      operationId: deleteMeasurementMarker
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}`
        を使用してください） 計測マーカーを削除します。
      parameters:
        - $ref: '#/components/parameters/PathMeasurementMarkerUUID'
      responses:
        '204':
          description: No Content
          headers: {}
      summary: Delete Measurement Marker
      tags:
        - meas_Measurement Markers
  /v1/measurements/markers/{measurement_marker_uuid}/measurement:
    get:
      operationId: getMeasurementFromMeasurementMarker
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}/measurement`
        を使用してください）
      parameters:
        - $ref: '#/components/parameters/PathMeasurementMarkerUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example:
                  $ref: '#/components/examples/Meas'
              schema:
                $ref: '#/components/schemas/Measurement'
          description: OK
          headers: {}
      summary: Get Measurement from Marker
      tags:
        - meas_Measurements
  /v1/measurements/upload:
    get:
      operationId: listMeasurementStatuses
      deprecated: true
      description: >-
        （ **Deprecated** このエンドポイントではなく、`GET /measurements/jobs` を使用してください。）
        計測のアップロードのリストを取得します。
      parameters:
        - $ref: '#/components/parameters/limit'
        - description: 並べ替えに使用するキー
          example: created_at
          in: query
          name: sort
          required: false
          schema:
            default: created_at
            enum:
              - created_at
              - updated_at
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasurementUploadStatusesGetResponse'
              schema:
                $ref: '#/components/schemas/MeasurementUploadStatusesGetResponse'
          description: OK
          headers: {}
      summary: List Uploading Statuses of Measurements
      tags:
        - meas_Uploading Measurements
    post:
      operationId: uploadMeasurement
      description: >-
        CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。
        計測には、指定されたエッジUUIDが関連付けられます。


        `base_time` （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。

        基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。

        CSVファイルのデータは、時刻順にソートされている必要があります。

        `meas_end` パラメーターの設定は任意です。指定しない場合、 `true` となります。


        CSVファイルの例:

        ```

        time,       col1,   col2, col3,      col4,   col5, col6,      col7,  
        col8, col9,      col10

        1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17, 
        18, 19.12345,  val110

        1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27, 
        28, 29.12345,  val210

        1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37, 
        38, 39.12345,  val310

        1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47, 
        48, 49.12345,  val410

        ```

        空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。

        ```

        time,       col1,   col2, col3,      col4,   col5, col6,      col7,  
        col8, col9,      col10

        1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17, 
        18, 19.12345,  val110


        1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37, 
        38, 39.12345,  val310

        1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47, 
        48, 49.12345,  val410

        ```


        [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。


        時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。

        ## エスケープ

        値の内部で `,` を使用したい場合は、その値全体を `"` で囲んでください。

        また、値の内部で `"` を使用したい場合は、値全体を `"` で囲み、さらに、 `"` を `""` のように表記してください。

        値を `"` で囲まないと、CSVファイルのパースの際にエラーが発生します。


        エスケープの例:

        ```

        time,col1

        1539263579,"ab,cde"                  .....OK (parsed as 'ab,cde')

        1539263579,"ab""cde"                 .....OK (parsed as 'ab"cde')

        1539263579,     abcde                .....OK (parsed as '     abcde')

        1539263579,"     abcde"              .....OK (parsed as '     abcde')

        1539263579,ab"cde                    .....NG

        1539263579, "abcde"                  .....NG

        1539263579,ab,cde                    .....NG(wrong number of fields)

        ```
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MeasurementUploadPostRequest'
      responses:
        '202':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasurementUploadPostResponse'
              schema:
                $ref: '#/components/schemas/MeasurementUploadPostResponse'
          description: OK
          headers: {}
      summary: Create Measurement from CSV File
      tags:
        - meas_Uploading Measurements
  /v1/measurements/{measurement_uuid}/upload:
    post:
      operationId: uploadMeasurementIntoMeasurement
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/upload`
        を使用してください）
         CSVファイルをアップロードし、計測にデータを追加します。
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MeasurementUploadPostRequestAppend'
        description: '`meas_end` パラメーターの設定は任意です。指定しない場合、 `true` となります。'
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '202':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasurementUploadPostResponse'
              schema:
                $ref: '#/components/schemas/MeasurementUploadPostResponse'
          description: OK
          headers: {}
      summary: Store Data Points by CSV File
      tags:
        - meas_Uploading Measurements
  /v1/measurements/{measurement_uuid}/markers:
    get:
      operationId: getMeasurementMarkersWithMeasurementUUID
      deprecated: true
      description: >-
        (**Deprecated** このエンドポイントではなく、 `GET /measurements/{measurement_uuid}`
        を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  value:
                    items:
                      - uuid: 887326ce-a2a2-4db6-8c06-2f8447f0f29e
                        name: name
                        description: description
                        type: range
                        detail:
                          start_elapsed_time: 100
                          end_elapsed_time: 200
                        tag:
                          key1: value1
                          key2: value2
                        elapsed_time: 1000
                        created_at: '2017-02-11T01:23:45Z'
                        created_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
                        updated_at: '2017-02-11T12:34:56Z'
                        updated_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
                      - uuid: 887326ce-a2a2-4db6-8c06-2f8447f0f29e
                        name: name
                        description: description
                        type: range
                        detail:
                          occurred_elapsed_time: 100
                        tag:
                          key1: value1
                          key2: value2
                        elapsed_time: 1000
                        created_at: '2017-02-11T01:23:45Z'
                        created_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
                        updated_at: '2017-02-11T12:34:56Z'
                        updated_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
              schema:
                $ref: '#/components/schemas/MeasurementMarkersWithoutPage'
          description: OK
          headers: {}
      summary: List Measurement Markers by Measurement UUID
      tags:
        - meas_Measurement Markers
    post:
      operationId: createMeasurementMarker
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers`
        を使用してください） 計測マーカーを作成します。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
      requestBody:
        content:
          application/json:
            examples:
              point:
                $ref: '#/components/examples/MeasurementMarkerPostRequestPoint'
              range:
                $ref: '#/components/examples/MeasurementMarkerPostRequestRange'
            schema:
              $ref: '#/components/schemas/MeasurementMarkerPostRequest'
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              examples:
                point:
                  $ref: '#/components/examples/MeasurementMarkerGetResponsePoint'
                range:
                  $ref: '#/components/examples/MeasurementMarkerGetResponseRange'
              schema:
                $ref: '#/components/schemas/MeasurementMarker'
          description: Created
          headers: {}
      summary: Create Measurement Marker by Measurement UUID
      tags:
        - meas_Measurement Markers
    delete:
      operationId: deleteMeasurementMarkers
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers`
        を使用してください） 計測マーカーを削除します。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '204':
          description: No Content
          headers: {}
      summary: Delete Measurement Markers by Measurement UUID
      tags:
        - meas_Measurement Markers
  /v1/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}:
    get:
      operationId: getMeasurementMarkerWithMeasurementUUIDAndMarkerUUID
      description: >-
        **Deprecated** このエンドポイントではなく、 `GET /measurements/{measurement_uuid}`
        を使用してください。
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
        - $ref: '#/components/parameters/PathMeasurementMarkerUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                range:
                  $ref: '#/components/examples/MeasurementMarkerGetResponseRange'
                point:
                  $ref: '#/components/examples/MeasurementMarkerGetResponsePoint'
              schema:
                $ref: '#/components/schemas/MeasurementMarker'
          description: OK
          headers: {}
      summary: Get Measurement Marker using Measurement UUID
      tags:
        - meas_Measurement Markers
    put:
      operationId: updateMeasurementMarkerWithMeasurementUUIDAndMarkerUUID
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}`
        を使用してください） 計測マーカーの情報を更新します。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
        - $ref: '#/components/parameters/PathMeasurementMarkerUUID'
      requestBody:
        content:
          application/json:
            examples:
              range:
                $ref: '#/components/examples/MeasurementMarkerPutRequestRange'
              point:
                $ref: '#/components/examples/MeasurementMarkerPutRequestPoint'
            schema:
              $ref: '#/components/schemas/MeasurementMarkerPutRequest'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                range:
                  $ref: '#/components/examples/MeasurementMarkerGetResponseRange'
                point:
                  $ref: '#/components/examples/MeasurementMarkerGetResponsePoint'
              schema:
                $ref: '#/components/schemas/MeasurementMarker'
          description: OK
          headers: {}
      summary: Replace Measurement Marker using Measurement UUID
      tags:
        - meas_Measurement Markers
    delete:
      operationId: deleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUID
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}`
        を使用してください） 計測マーカーを削除します。
      parameters:
        - $ref: '#/components/parameters/pathMeasUUID'
        - $ref: '#/components/parameters/PathMeasurementMarkerUUID'
      responses:
        '204':
          description: No Content
          headers: {}
      summary: Delete Measurement Marker using Measurement UUID
      tags:
        - meas_Measurement Markers
  /v1/signals:
    get:
      operationId: listSignals
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/signals` を使用してください）
        信号定義のリストを取得します。
      parameters:
        - name: label
          example: label1
          in: query
          description: ラベルが指定した文字列から始まる信号定義を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。
          required: false
          schema:
            type: array
            items:
              type: string
        - name: sort
          description: 並べ替えに使用するキー
          example: label
          in: query
          required: false
          schema:
            enum:
              - label
              - created_at
              - updated_at
            type: string
        - name: order
          description: 並べ替えの順序
          example: asc
          in: query
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
        - name: limit
          description: 1回のリクエストで取得する件数
          example: '100'
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: page
          description: 取得するページの番号
          example: '1'
          in: query
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    items:
                      - channel: 1
                        conversion:
                          options:
                            bitsize: 8
                            endian: big
                            offset: 0
                            scale: 1
                            sign: signed
                            startbit: 0
                          type: num_fixed_point
                        created_at: '2017-02-11T01:23:45Z'
                        data_id: '00000001'
                        data_type: 1
                        description: this is signal1
                        display:
                          format: '%6.3f'
                          max: 10
                          min: -10
                          unit: m/s2
                        hash: sha256:8ddad69061d8...
                        label: signal1
                        updated_at: '2017-02-11T12:34:56Z'
                        uuid: 2cc7de37-6f71-4458-887e-10e618a6fcfb
                    page:
                      first: true
                      last: true
                      next: /path?xxx=1&bbb=2&page=3
                      previous: /path?xxx=1&bbb=2&page=1
                      total_count: 1
              schema:
                $ref: '#/components/schemas/Signals'
          description: OK
          headers: {}
      summary: List Signals
      tags:
        - meas_Signals
    post:
      operationId: createSignal
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/signals` を使用してください）
         信号定義を作成します。

         * **Note**
             - 既存の信号定義と `label` が重複する場合、または `uuid` が重複する場合は、
               ステータスコード `409 Conflict` が返却されます。
      requestBody:
        content:
          application/json:
            examples:
              example:
                value:
                  channel: 1
                  conversion:
                    options:
                      bitsize: 8
                      endian: big
                      offset: 0
                      scale: 1
                      sign: signed
                      startbit: 0
                    type: num_fixed_point
                  data_id: '00000001'
                  data_type: 1
                  description: description of signal
                  display:
                    format: '%6.3f'
                    max: 10
                    min: -10
                    unit: m/s2
                  label: signal
                  uuid: 022a9941-d7ff-44ee-a9ff-55a623880a40
            schema:
              $ref: '#/components/schemas/CreateSignalRequest'
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    channel: 1
                    conversion:
                      options:
                        bitsize: 8
                        endian: big
                        offset: 0
                        scale: 1
                        sign: signed
                        startbit: 0
                      type: num_fixed_point
                    created_at: '2017-02-11T01:23:45Z'
                    data_id: '00000001'
                    data_type: 1
                    description: this is signal1
                    display:
                      format: '%6.3f'
                      max: 10
                      min: -10
                      unit: m/s2
                    hash: sha256:8ddad69061d8...
                    label: signal1
                    updated_at: '2017-02-11T12:34:56Z'
                    uuid: c1c3fd05-89c6-4da8-abdb-7d31aec2af18
              schema:
                $ref: '#/components/schemas/Signal'
          description: Created
          headers: {}
      summary: Create Signal
      tags:
        - meas_Signals
  /v1/signals/{signal_uuid}:
    get:
      operationId: getSignal
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/signals/{signal_uuid}`
        を使用してください） 信号定義を取得します。
      parameters:
        - description: 信号定義のUUID
          example: a74b933c-7c3a-4e9f-bf16-299a96d26562
          in: path
          name: signal_uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    uuid: c1c3fd05-89c6-4da8-abdb-7d31aec2af18
                    label: signal1
                    data_id: '00000001'
                    data_type: 1
                    description: this is signal1
                    channel: 1
                    conversion:
                      options:
                        bitsize: 8
                        endian: big
                        offset: 0
                        scale: 1
                        sign: signed
                        startbit: 0
                      type: num_fixed_point
                    display:
                      format: '%6.3f'
                      max: 10
                      min: -10
                      unit: m/s2
                    hash: sha256:8ddad69061d8...
                    created_at: '2017-02-11T01:23:45Z'
                    updated_at: '2017-02-11T12:34:56Z'
              schema:
                $ref: '#/components/schemas/Signal'
          description: OK
          headers: {}
      summary: Get Signal
      tags:
        - meas_Signals
    put:
      operationId: updateSignal
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/signals/{signal_uuid}`
        を使用してください） 信号定義を更新します。
      parameters:
        - description: 信号定義のUUID
          example: a74b933c-7c3a-4e9f-bf16-299a96d26562
          in: path
          name: signal_uuid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              example:
                value:
                  channel: 1
                  conversion:
                    options:
                      bitsize: 8
                      endian: big
                      offset: 0
                      scale: 1
                      sign: signed
                      startbit: 0
                    type: num_fixed_point
                  data_id: '00000001'
                  data_type: 1
                  description: description of signal
                  display:
                    format: '%6.3f'
                    max: 10
                    min: -10
                    unit: m/s2
                  label: signal
            schema:
              $ref: '#/components/schemas/UpdateSignalRequest'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    uuid: c1c3fd05-89c6-4da8-abdb-7d31aec2af18
                    label: signal1
                    data_id: '00000001'
                    data_type: 1
                    description: this is signal1
                    channel: 1
                    conversion:
                      options:
                        bitsize: 8
                        endian: big
                        offset: 0
                        scale: 1
                        sign: signed
                        startbit: 0
                      type: num_fixed_point
                    display:
                      format: '%6.3f'
                      max: 10
                      min: -10
                      unit: m/s2
                    hash: sha256:8ddad69061d8...
                    created_at: '2017-02-11T01:23:45Z'
                    updated_at: '2017-02-11T12:34:56Z'
              schema:
                $ref: '#/components/schemas/Signal'
          description: OK
          headers: {}
      summary: Update Signal
      tags:
        - meas_Signals
    delete:
      operationId: deleteSignal
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/signals/{signal_uuid}`
        を使用してください） 信号定義を削除します。
      parameters:
        - description: 信号定義のUUID
          example: a74b933c-7c3a-4e9f-bf16-299a96d26562
          in: path
          name: signal_uuid
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          headers: {}
      summary: Delete Signal
      tags:
        - meas_Signals
  /v1/trashed_measurements:
    get:
      operationId: listTrashedMeasurements
      summary: List Trashed Measurements
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/trashed_measurements`
        を使用してください） ゴミ箱に入っている計測のリストを取得します。
      parameters:
        - in: query
          name: limit
          example: 1
          description: 1回のリクエストで取得する件数。`0` を指定した場合は、デフォルト値の50件となります。
          schema:
            type: integer
            maximum: 50
            minimum: 0
        - in: query
          name: page
          example: 1
          description: 取得するページの番号
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  value:
                    items:
                      - uuid: 2cc7de37-6f71-4458-887e-10e618a6fcfb
                        name: meas1
                        description: description of measurement
                        edge_uuid: 00de1861-6614-4435-af07-da9b4338d57c
                        duration: 100000000
                        ended: true
                        status: measuring
                        basetime: '2017-02-11T01:23:45.678901Z'
                        basetime_type: ntp
                        processed_ratio: 0.9
                        protected: false
                        received_data_points: null
                        markers:
                          - uuid: 887326ce-a2a2-4db6-8c06-2f8447f0f29e
                            name: name
                            description: description
                            type: point
                            detail:
                              occurred_elapsed_time: 100
                            tag:
                              key1: value1
                              key2: value2
                            elapsed_time: 1000
                            created_at: '2017-02-11T01:23:45Z'
                            created_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
                            updated_at: '2017-02-11T12:34:56Z'
                            updated_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
                        created_at: '2017-02-11T01:23:45Z'
                        updated_at: '2017-02-11T12:34:56Z'
                    total_count: 1
              schema:
                $ref: '#/components/schemas/TrashedMeasurements'
      tags:
        - meas_Trashed Measurements
  /v1/trashed_measurements/{measurement_uuid}:
    delete:
      operationId: deleteTrashedMeasurement
      summary: Delete Trashed Measurement and Delete Data Points Immediately
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/trashed_measurements/{measurement_uuid}`
        を使用してください） ゴミ箱に入っている計測と、その計測に関連付けられているデータポイントを直ちに削除します。
      parameters:
        - in: path
          schema:
            type: string
          name: measurement_uuid
          description: 計測のUUID
          required: true
          example: 86fff159-5887-43c9-bf2d-cd1b522c047d
      responses:
        '204':
          description: No Content
      tags:
        - meas_Trashed Measurements
  /v1/trashed_measurements/{measurement_uuid}/restore:
    delete:
      operationId: restoreTrashedMeasurement
      summary: Restore Measurement
      deprecated: true
      description: >-
        （Deprecated。このエンドポイントでなく
        `/projects/00000000-0000-0000-0000-000000000000/trashed_measurements/{measurement_uuid}/restore`
        を使用してください） ゴミ箱に入っている計測を復元します。
      parameters:
        - in: path
          schema:
            type: string
          name: measurement_uuid
          description: 計測のUUID
          required: true
          example: 86fff159-5887-43c9-bf2d-cd1b522c047d
      responses:
        '204':
          description: No Content
      tags:
        - meas_Trashed Measurements
  /v1/projects/{project_uuid}/data:
    get:
      operationId: listProjectDataPoints
      description: データポイントのリストを取得します。 返却されるデータポイントはJSON形式です。データポイントごとに改行で区切られます。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/DataPointsTargetName'
        - description: |-
            取得したいデータポイントの条件を以下のフォーマットで指定します。
            `data_id` には、 `GET /data_ids` エンドポイントで取得できる `data_id` の値を使用します。

            - `<data_type>:<channel>/<data_id>`

            各セグメントにはワイルドカード(*)を使用することができます。 例:
              - CAN(data_type = `1`)のデータポイントを取得する -> `1:*/*` または `1`
              - チャンネル2のCANデータポイントを取得する -> `1:2/*` または `1:2`
              - チャンネル2のCANデータポイントのうち、データIDが `00000001` のものを取得する -> `1:2/00000001`
          example: 1:1/*
          in: query
          name: idq
          required: false
          schema:
            type: array
            items:
              type: string
        - $ref: '#/components/parameters/DataPointsStart'
        - $ref: '#/components/parameters/DataPointsEnd'
        - description: |-
            指定した時刻以降に更新された計測のみを取得します。
            以下のいずれかの形式で指定します。
              - rfc3339(ex 2019-10-29T03:04:05.341268Z).
              - UNIX時刻（マイクロ秒）(**Deprecated**).
          example: '2019-10-29T03:04:05.341268Z'
          in: query
          name: since
          required: false
          schema:
            type: string
        - description: '`true` を指定した場合、取得中にエラーが発生すると処理を中断し、中断前までのデータポイントのリストを返します。'
          example: 'false'
          in: query
          name: exit_on_error
          required: false
          schema:
            type: string
            default: false
        - $ref: '#/components/parameters/QueryLabel'
        - $ref: '#/components/parameters/QueryPeriod'
        - $ref: '#/components/parameters/limit'
        - description: 並べ替えの順序。デフォルトは `asc` （昇順）
          example: asc
          in: query
          name: order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
        - description: レスポンスの時刻表示形式。デフォルトは `us` （マイクロ秒）
          example: rfc3339
          in: query
          name: time_format
          required: false
          schema:
            enum:
              - ns
              - us
              - ms
              - s
              - rfc3339
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DataPointJSONLine'
            application/protobuf:
              schema:
                description: |-
                  - データは64ビットの符号なし整数です。バイトオーダーはリトルエンディアンです。
                  - データペイロード
                    - [protocol.proto](https://docs.intdash.jp/api/measurement/proto/index.html) の `DataResponseProto` 参照

                  ```

                  0    1    2    3    4    5    6    7    8
                  +----+----+----+----+----+----+----+----+
                  | Data Length( 8 byte)                  |
                  +----+----+----+----+----+----+----+----+ --+--
                  | Data Payload                          |   |
                  +                                       +   |
                  |                                       |   |
                  +                                       +   |
                  .                                       .   | Data Length
                  .                                       .   |
                  .                                       .   |
                  +                                       +   |
                  |                                       |   |
                  +----+----+----+----+----+----+----+----+ --+--
                  | Data Length(8byte)                    |
                  +----+----+----+----+----+----+----+----+ --+--
                  | Data Payload                          |   |
                  +                                       +   |
                  |                                       |   |
                  +                                       +   |
                  .                                       .   | Data Length
                  .                                       .   |
                  ```
                type: string
                format: binary
          description: OK
          headers:
            Transfer-Encoding:
              schema:
                enum:
                  - Chunked
                type: string
      summary: List Project Data Points
      tags:
        - meas_DataPoints
  /v1/projects/{project_uuid}/data_ids:
    get:
      operationId: listProjectDataPointDataIDs
      description: データポイントのデータID（ `data_type`, `data_id` ）のリストを取得します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/DataPointsTargetName'
        - $ref: '#/components/parameters/DataPointsStart'
        - $ref: '#/components/parameters/DataPointsEnd'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DataPointDataIDs'
          description: OK
      summary: List Project Data Point Data IDs
      tags:
        - meas_DataPointIDs
  /v1/projects/{project_uuid}/getids:
    get:
      operationId: listProjectDataIDs
      description: >-
        エッジを指定し、そのエッジから送信されているデータに含まれるデータ識別子（ `data_type` 、 `channel` 、
        `data_id` の組み合わせ）のリストを取得します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/QueryStart'
        - $ref: '#/components/parameters/QueryEnd'
        - $ref: '#/components/parameters/QueryEdgeUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/DataIDsGetResponse'
              schema:
                $ref: '#/components/schemas/DataIDs'
          description: OK
      summary: List Project Edge's Data IDs
      tags:
        - meas_DataPoints
  /v1/projects/{project_uuid}/measurements/{measurement_uuid}/getids:
    get:
      operationId: listProjectDataIDsWithMeasurementUUID
      description: >-
        計測を指定し、その計測に含まれるデータ識別子（ `data_type` 、 `channel` 、 `data_id`
        の組み合わせ）のリストを取得します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/DataIDsGetResponse'
              schema:
                $ref: '#/components/schemas/DataIDs'
          description: OK
      summary: List Project Data IDs
      tags:
        - meas_DataPoints
  /v1/projects/{project_uuid}/measurements/data:
    post:
      description: データポイントを登録します。
      operationId: createProjectDataPoints
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
      requestBody:
        content:
          application/protobuf:
            schema:
              type: string
              format: binary
        description: |-
          このエンドポイント使用時は、 `Content-Type` を以下にしてください。
            * `application/protobuf`
                * [protocol.proto](https://docs.intdash.jp/api/measurement/proto/index.html) の `StoreProto` を参照してください。
                  * `DataPointProto` の `data_payload`は iSCP v1のデータフォーマットに従います。
                  * iSCPのデータフォーマットは [詳説 iSCP 1.0](https://docs.intdash.jp/manual/iscp1-essentials/latest/ja/iscp1-essentials-ja.pdf#page=23)を参照してください。
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: OK
                type: string
                format: binary
          description: OK
          headers: {}
      summary: Store Project Data Points
      tags:
        - meas_DataPoints
  /v1/projects/{project_uuid}/measurements:
    get:
      description: 計測のリストを取得します。
      operationId: listProjectMeasurements
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - description: 計測のUUID
          example: 5c3ac8b5-3acd-43ea-86cb-4835664b0483
          in: query
          name: uuid
          required: false
          schema:
            type: array
            items:
              type: string
        - description: 名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。
          example: measurement1
          in: query
          name: name
          required: false
          schema:
            type: integer
            format: int32
        - description: 計測に関連付けられたエッジのUUID
          example: e0022b03-023f-4f24-90f1-560be10c423b
          in: query
          name: edge_uuid
          required: false
          schema:
            type: string
        - description: |-
            取得対象範囲の始点。以下のいずれかの形式で指定します。
              - RFC3339(例 `2019-10-29T03:04:05.341268Z` )
              - UNIX時刻（マイクロ秒）(**Deprecated**)
          example: '2019-10-29T03:04:05.123456Z'
          in: query
          name: start
          required: false
          schema:
            type: string
        - description: |-
            取得対象範囲の終点。以下のいずれかの形式で指定します。
              - RFC3339(例 `2019-10-29T03:04:05.341268Z` )
              - UNIX時刻（マイクロ秒）(**Deprecated**)
          example: '2019-10-29T03:04:05.234567Z'
          in: query
          name: end
          required: false
          schema:
            type: string
        - description: >-
            `true` にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 `false`
            にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。

            ```
               | measurement1 |
               +--------------+
                                               | measurement2 |
                                               +--------------+
                                   | measurement3 |
                                   +--------------+
                                                                    time
            -----------+----------------------------+------------>
                       |                            |
                      start                        end
            ```


            - この例では、もし `partial_match` を `true` にすると、 `measurement1` 、
            `measurement2` 、 `measurement3` が取得できます。

            - もし `partial_match` を `false` にすると、 `measurement2` と `measurement3`
            が取得できます。
          example: true
          in: query
          name: partial_match
          required: false
          schema:
            default: false
            type: boolean
        - description: 計測の基準時刻のタイプ
          example: ntp
          in: query
          name: basetime_type
          required: false
          schema:
            enum:
              - edge_rtc
              - ntp
              - gps
              - api_first_received
              - volatile
              - manual
            type: string
        - description: |-
            計測が終了している（ended）かどうかを指定して計測を取得します。

            エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。
            計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。
            * `true`: 終了した計測だけを取得します。
            * `false`: 終了していない計測だけを取得します。
          example: false
          in: query
          name: ended
          required: false
          schema:
            type: boolean
        - description: |-
            指定した時刻以降に更新された計測のみを取得します。

            以下のいずれかの形式で指定します。

              - RFC3339(例 `2019-10-29T03:04:05.341268Z` )
              - UNIX時刻（マイクロ秒）(**Deprecated**)
          example: '2019-10-29T03:04:05.341268Z'
          in: query
          name: since
          required: false
          schema:
            type: string
        - description: 計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。
          example: 100
          in: query
          name: duration_start
          required: false
          schema:
            type: integer
            format: int64
        - description: 計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。
          example: 100000
          in: query
          name: duration_end
          required: false
          schema:
            type: integer
            format: int64
        - description: 計測のステータス
          example: measuring
          in: query
          name: status
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - measuring
                - resending
                - finished
        - name: limit
          in: query
          description: 1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。
          example: 1000
          schema:
            type: integer
            format: int32
            default: 1000
        - description: 並べ替えに使用するキー
          example: base_time
          in: query
          name: sort
          required: false
          schema:
            default: base_time
            enum:
              - name
              - description
              - ended
              - duration
              - base_time
              - processed_ratio
              - created_at
              - updated_at
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasList'
              schema:
                $ref: '#/components/schemas/Measurements'
          description: OK
      summary: List Project Measurements
      tags:
        - meas_Measurements
    post:
      operationId: createProjectMeasurement
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
      description: |-
        計測を作成します。

        - **Note**
          - 計測の保護／非保護を切り替える権限を持たないエッジも、
            計測作成時は保護された計測を作成することが可能です。
      requestBody:
        content:
          application/json:
            examples:
              example1:
                $ref: '#/components/examples/MeasCreate'
            schema:
              $ref: '#/components/schemas/MeasCreate'
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/Meas'
              schema:
                $ref: '#/components/schemas/Measurement'
          description: Created
      summary: Create Project Measurement
      tags:
        - meas_Measurements
  /v1/projects/{project_uuid}/measurements/{measurement_uuid}:
    get:
      operationId: getProjectMeasurement
      description: 計測を取得します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasFinished'
              schema:
                $ref: '#/components/schemas/Measurement'
          description: OK
      summary: Get Project Measurement
      tags:
        - meas_Measurements
    post:
      operationId: createProjectMeasurementWithUUID
      description: 指定したUUIDの計測を作成します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
      requestBody:
        content:
          application/json:
            examples:
              example1:
                $ref: '#/components/examples/MeasCreate'
            schema:
              $ref: '#/components/schemas/MeasCreate'
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/Meas'
              schema:
                $ref: '#/components/schemas/Measurement'
          description: Created
      summary: Create Project Measurement with UUID
      tags:
        - meas_Measurements
    put:
      operationId: updateProjectMeasurement
      description: 計測に関する情報を更新します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeasReplace'
      responses:
        '204':
          description: No Content
      summary: Update Project Measurement
      tags:
        - meas_Measurements
    delete:
      operationId: deleteProjectMeasurement
      description: |-
        計測を削除します。
        - **Note**
          - 保護された計測は削除できません。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '204':
          description: No Content
      summary: Trash Project Measurement
      tags:
        - meas_Measurements
  /v1/projects/{project_uuid}/measurements/{measurement_uuid}/complete:
    put:
      operationId: completeProjectMeasurement
      description: >-
        計測を回収完了（completed）にします。 completedは、エッジでのデータ取得が終了し（ended）、
        かつ、すべてのデータがサーバーに送信されたことを意味します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/Meas'
              schema:
                $ref: '#/components/schemas/Measurement'
          description: OK
      summary: Complete Project Measurement
      tags:
        - meas_Measurements
  /v1/projects/{project_uuid}/measurements/{measurement_uuid}/end:
    put:
      operationId: endProjectMeasurement
      description: >-
        計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。
        （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SequenceSummary'
          description: OK
      summary: End Project Measurement
      tags:
        - meas_Measurements
  /v1/projects/{project_uuid}/measurements/{measurement_uuid}/protected:
    put:
      operationId: protectProjectMeasurement
      description: 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '204':
          description: No Content
      summary: Protect Project Measurement
      tags:
        - meas_Measurements
    delete:
      operationId: unprotectProjectMeasurement
      description: 計測の保護を解除します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '204':
          description: No Content
      summary: Unprotect Project Measurement
      tags:
        - meas_Measurements
  /v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes:
    get:
      operationId: listProjectMeasurementBaseTimes
      description: 計測の基準時刻のリストを取得します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasBaseTimesGetResponse'
              schema:
                $ref: '#/components/schemas/MeasBaseTimes'
          description: OK
          headers: {}
      summary: List Project Measurement Base Times
      tags:
        - meas_Measurements
  /v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes/{type}:
    get:
      operationId: getProjectMeasurementBaseTime
      description: 基準時刻タイプを指定して計測の基準時刻を取得します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
        - $ref: '#/components/parameters/pathMeasBaseTimeType'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasBaseTimeGetResponse'
              schema:
                $ref: '#/components/schemas/MeasBaseTime'
          description: OK
          headers: {}
      summary: Get Project Measurement Base Time
      tags:
        - meas_Measurements
    put:
      operationId: updateProjectMeasurementBaseTime
      description: >-
        基準時刻を更新します。 この計測において、使用する基準時刻が設定されていない（ `basetime_type` が `undefined`
        ）の場合は、 新しい基準時刻を `basetime_type` に設定します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
        - $ref: '#/components/parameters/pathMeasBaseTimeType'
      requestBody:
        content:
          application/json:
            examples:
              example1:
                $ref: '#/components/examples/MeasBaseTimePutRequest'
            schema:
              $ref: '#/components/schemas/MeasBaseTimePut'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasBaseTimePutResponse'
              schema:
                $ref: '#/components/schemas/MeasBaseTime'
          description: OK
          headers: {}
      summary: Replace Project Measurement Base Time
      tags:
        - meas_Measurements
    delete:
      operationId: deleteProjectMeasurementBaseTime
      description: >-
        基準時刻を削除します。

        指定された基準時刻が使用中の場合（その計測の `basetime_type` として設定されている場合）は、
        その基準時刻は削除できません（ステータスコード `409` が返却されます）。

        このような場合は、他の基準時刻をその計測の `basetime_type` にしてから、削除したい基準時刻を削除してください。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
        - $ref: '#/components/parameters/pathMeasBaseTimeType'
      responses:
        '204':
          description: No Content
          headers: {}
      summary: Delete Project Measurement Base Time
      tags:
        - meas_Measurements
  /v1/projects/{project_uuid}/measurements/{measurement_uuid}/sections:
    get:
      operationId: getProjectMeasurementSections
      description: 計測に含まれるセクションのリストを取得します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
        - description: >-
            計測セクションの処理ステータス。 `processed` （処理済みの計測セクションを取得）、 `unprocessed`
            （未処理の計測セクションを取得）、 `both` （両方を取得）のいずれかを選択します。
          example: processed
          in: query
          name: filter
          required: false
          schema:
            default: both
            enum:
              - processed
              - unprocessed
              - both
            type: string
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasurementSectionsGetResponse'
              schema:
                $ref: '#/components/schemas/MeasurementSectionsGetResponse'
          description: OK
          headers: {}
      summary: List Project Measurement Sections
      tags:
        - meas_Measurements
  /v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences:
    get:
      operationId: listProjectMeasurementSequences
      description: 計測シーケンスのリストを取得します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MeasurementSequenceGroups'
          description: OK
          headers: {}
      summary: List Project Measurement Sequences
      tags:
        - meas_Measurements
  /v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences/{sequences_uuid}:
    get:
      operationId: getProjectMeasurementSequence
      description: 計測シーケンスを取得します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
        - $ref: '#/components/parameters/PathMeasSequenceGroupUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MeasurementSequenceGroup'
          description: OK
          headers: {}
      summary: Get Project Measurement Sequence
      tags:
        - meas_Measurements
    patch:
      operationId: updateProjectMeasurementSequence
      description: 計測シーケンスを更新します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
        - $ref: '#/components/parameters/PathMeasSequenceGroupUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeasurementSequenceGroupReplace'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MeasurementSequenceGroup'
          description: OK
          headers: {}
      summary: Update Project Measurement Sequence
      tags:
        - meas_Measurements
    put:
      operationId: replaceProjectMeasurementSequence
      description: 計測シーケンスを置換します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
        - $ref: '#/components/parameters/PathMeasSequenceGroupUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeasurementSequenceGroupReplace'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MeasurementSequenceGroup'
          description: OK
          headers: {}
      summary: Replace Project Measurement Sequence
      tags:
        - meas_Measurements
  /v1/projects/{project_uuid}/measurements/sequences/chunks:
    post:
      operationId: createProjectMeasurementSequenceChunks
      description: 計測シーケンスにチャンクを作成します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
      requestBody:
        content:
          application/vnd.iscp.v2.protobuf:
            schema:
              description: >-
                [protocol.proto](https://docs.intdash.jp/api/measurement/proto/index.html)の`StoreDataChunks`を参照してくだいさい。


                `StoreDataPoint`のpayloadは iSCP v2のデータフォーマットに従います。この資料は現在準備中です。
              type: string
              format: binary
          application/json:
            schema:
              description: >-
                [protocol.proto](https://docs.intdash.jp/api/measurement/proto/index.html)の`StoreDataChunks`をJSONでシリアライズしたものです。


                `StoreDataPoint`のpayloadは iSCP v2のデータフォーマットに従います。この資料は現在準備中です。
              type: string
              format: binary
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CreateMeasurementChunksResult'
      summary: Create Project Measurement Sequence Chunk
      tags:
        - meas_Measurements
  /v1/projects/{project_uuid}/measurements/jobs:
    get:
      description: ジョブ（CSVファイルを計測に変換するジョブなど）のリストを取得します。
      operationId: listProjectMeasurementJobs
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/limit'
        - description: 並べ替えに使用するキー
          example: created_at
          in: query
          name: sort
          required: false
          schema:
            default: created_at
            enum:
              - created_at
              - updated_at
        - description: ジョブのステータス
          example: succeeded
          in: query
          name: status
          required: false
          schema:
            enum:
              - ready
              - processing
              - succeeded
              - failed
              - cancelled
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasurementJobsGetResponse'
              schema:
                $ref: '#/components/schemas/MeasurementJobs'
          description: OK
          headers: {}
      summary: List Project Measurement Jobs
      tags:
        - meas_Measurement Jobs
  /v1/projects/{project_uuid}/measurements/jobs/{job_uuid}:
    get:
      description: ジョブを取得します。
      operationId: getProjectMeasurementJob
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/PathMeasurementJobUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasurementJobGetResponse'
              schema:
                $ref: '#/components/schemas/MeasurementJob'
          description: OK
          headers: {}
      summary: Get Project Measurement Job
      tags:
        - meas_Measurement Jobs
    delete:
      description: ジョブを削除します。
      operationId: deleteProjectMeasurementJob
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/PathMeasurementJobUUID'
      responses:
        '204':
          description: No Content
      summary: Delete Project Measurement Job
      tags:
        - meas_Measurement Jobs
  /v1/projects/{project_uuid}/measurements/jobs/{job_uuid}/cancel:
    put:
      operationId: cancelProjectMeasurementJob
      description: ジョブをキャンセルします。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/PathMeasurementJobUUID'
      responses:
        '204':
          description: No Content
      summary: Cancel Project Measurement Job
      tags:
        - meas_Measurement Jobs
  /v1/projects/{project_uuid}/measurements/markers:
    get:
      operationId: listProjectMeasurementMarkers
      description: 計測マーカーのリストを取得します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - description: 計測マーカーのUUID
          example: c14f84c1-b7a5-459b-bd1e-35982e4a4f38
          in: query
          name: uuid
          required: false
          schema:
            type: array
            items:
              type: string
        - description: 計測マーカーの名前
          example: measurement marker1
          in: query
          name: name
          required: false
          schema:
            type: array
            items:
              type: string
        - description: >-
            Get MeasMarkers which start Meas.BaseTime + elapsed_time &lt;=
            this[usec].
          example: 1000
          in: query
          name: start_unix_micro
          required: false
          schema:
            type: integer
            format: int64
        - description: >-
            Get MeasMarkers which start this[usec] &lt; Meas.BaseTime +
            elapsed_time.
          example: 1000
          in: query
          name: end_unix_micro
          required: false
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/QueryTag'
        - $ref: '#/components/parameters/QueryNotTag'
        - $ref: '#/components/parameters/limit'
        - description: 並べ替えに使用するキー
          example: created_at
          in: query
          name: sort
          required: false
          schema:
            default: base_time
            enum:
              - name
              - base_time
              - created_at
              - updated_at
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasurementMarkersGetResponse'
              schema:
                $ref: '#/components/schemas/MeasurementMarkers'
          description: OK
          headers: {}
      summary: List Project Measurement Markers
      tags:
        - meas_Measurement Markers
  /v1/projects/{project_uuid}/measurements/markers/{measurement_marker_uuid}:
    get:
      operationId: getProjectMeasurementMarker
      description: 計測マーカーを取得します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/PathMeasurementMarkerUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                range:
                  $ref: '#/components/examples/MeasurementMarkerGetResponseRange'
                point:
                  $ref: '#/components/examples/MeasurementMarkerGetResponsePoint'
              schema:
                $ref: '#/components/schemas/MeasurementMarker'
          description: OK
          headers: {}
      summary: Get Project Measurement Marker
      tags:
        - meas_Measurement Markers
    put:
      operationId: updateProjectMeasurementMarker
      description: 計測マーカーを更新します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/PathMeasurementMarkerUUID'
      requestBody:
        content:
          application/json:
            examples:
              range:
                $ref: '#/components/examples/MeasurementMarkerPutRequestRange'
              point:
                $ref: '#/components/examples/MeasurementMarkerPutRequestPoint'
            schema:
              $ref: '#/components/schemas/MeasurementMarkerPutRequest'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                range:
                  $ref: '#/components/examples/MeasurementMarkerGetResponseRange'
                point:
                  $ref: '#/components/examples/MeasurementMarkerGetResponsePoint'
              schema:
                $ref: '#/components/schemas/MeasurementMarker'
          description: OK
          headers: {}
      summary: Update Project Measurement Marker
      tags:
        - meas_Measurement Markers
    delete:
      operationId: deleteProjectMeasurementMarker
      description: 計測マーカーを削除します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/PathMeasurementMarkerUUID'
      responses:
        '204':
          description: No Content
          headers: {}
      summary: Delete Project Measurement Marker
      tags:
        - meas_Measurement Markers
  /v1/projects/{project_uuid}/measurements/upload:
    get:
      operationId: listProjectMeasurementStatuses
      deprecated: true
      description: >-
        （ **Deprecated** このエンドポイントではなく、`GET /measurements/jobs` を使用してください。）
        計測のアップロードのリストを取得します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/limit'
        - description: 並べ替えに使用するキー
          example: created_at
          in: query
          name: sort
          required: false
          schema:
            default: created_at
            enum:
              - created_at
              - updated_at
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasurementUploadStatusesGetResponse'
              schema:
                $ref: '#/components/schemas/MeasurementUploadStatusesGetResponse'
          description: OK
          headers: {}
      summary: List Project Uploading Statuses of Measurements
      tags:
        - meas_Uploading Measurements
    post:
      operationId: uploadProjectMeasurement
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
      description: >-
        CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。
        計測には、指定されたエッジUUIDが関連付けられます。


        `base_time` （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。

        基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。

        CSVファイルのデータは、時刻順にソートされている必要があります。

        `meas_end` パラメーターの設定は任意です。指定しない場合、 `true` となります。


        CSVファイルの例:

        ```

        time,       col1,   col2, col3,      col4,   col5, col6,      col7,  
        col8, col9,      col10

        1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17, 
        18, 19.12345,  val110

        1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27, 
        28, 29.12345,  val210

        1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37, 
        38, 39.12345,  val310

        1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47, 
        48, 49.12345,  val410

        ```

        空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。

        ```

        time,       col1,   col2, col3,      col4,   col5, col6,      col7,  
        col8, col9,      col10

        1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17, 
        18, 19.12345,  val110


        1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37, 
        38, 39.12345,  val310

        1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47, 
        48, 49.12345,  val410

        ```


        [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。


        時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。

        ## エスケープ

        値の内部で `,` を使用したい場合は、その値全体を `"` で囲んでください。

        また、値の内部で `"` を使用したい場合は、値全体を `"` で囲み、さらに、 `"` を `""` のように表記してください。

        値を `"` で囲まないと、CSVファイルのパースの際にエラーが発生します。


        エスケープの例:

        ```

        time,col1

        1539263579,"ab,cde"                  .....OK (parsed as 'ab,cde')

        1539263579,"ab""cde"                 .....OK (parsed as 'ab"cde')

        1539263579,     abcde                .....OK (parsed as '     abcde')

        1539263579,"     abcde"              .....OK (parsed as '     abcde')

        1539263579,ab"cde                    .....NG

        1539263579, "abcde"                  .....NG

        1539263579,ab,cde                    .....NG(wrong number of fields)

        ```
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MeasurementUploadPostRequest'
      responses:
        '202':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasurementUploadPostResponse'
              schema:
                $ref: '#/components/schemas/MeasurementUploadPostResponse'
          description: OK
          headers: {}
      summary: Create Project Measurement from CSV File
      tags:
        - meas_Uploading Measurements
  /v1/projects/{project_uuid}/measurements/{measurement_uuid}/upload:
    post:
      operationId: uploadProjectMeasurementIntoMeasurement
      description: CSVファイルをアップロードし、計測にデータを追加します。
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MeasurementUploadPostRequestAppend'
        description: '`meas_end` パラメーターの設定は任意です。指定しない場合、 `true` となります。'
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '202':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  $ref: '#/components/examples/MeasurementUploadPostResponse'
              schema:
                $ref: '#/components/schemas/MeasurementUploadPostResponse'
          description: OK
          headers: {}
      summary: Store Project Data Points by CSV File
      tags:
        - meas_Uploading Measurements
  /v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers:
    get:
      operationId: getProjectMeasurementMarkersWithMeasurementUUID
      deprecated: true
      description: >-
        (**Deprecated** このエンドポイントではなく、 `GET /measurements/{measurement_uuid}`
        を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  value:
                    items:
                      - uuid: 887326ce-a2a2-4db6-8c06-2f8447f0f29e
                        name: name
                        description: description
                        type: range
                        detail:
                          start_elapsed_time: 100
                          end_elapsed_time: 200
                        tag:
                          key1: value1
                          key2: value2
                        elapsed_time: 1000
                        created_at: '2017-02-11T01:23:45Z'
                        created_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
                        updated_at: '2017-02-11T12:34:56Z'
                        updated_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
                      - uuid: 887326ce-a2a2-4db6-8c06-2f8447f0f29e
                        name: name
                        description: description
                        type: range
                        detail:
                          occurred_elapsed_time: 100
                        tag:
                          key1: value1
                          key2: value2
                        elapsed_time: 1000
                        created_at: '2017-02-11T01:23:45Z'
                        created_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
                        updated_at: '2017-02-11T12:34:56Z'
                        updated_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
              schema:
                $ref: '#/components/schemas/MeasurementMarkersWithoutPage'
          description: OK
          headers: {}
      summary: List Project Measurement Markers by Measurement UUID
      tags:
        - meas_Measurement Markers
    post:
      operationId: createProjectMeasurementMarker
      description: 計測マーカーを作成します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
      requestBody:
        content:
          application/json:
            examples:
              point:
                $ref: '#/components/examples/MeasurementMarkerPostRequestPoint'
              range:
                $ref: '#/components/examples/MeasurementMarkerPostRequestRange'
            schema:
              $ref: '#/components/schemas/MeasurementMarkerPostRequest'
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              examples:
                point:
                  $ref: '#/components/examples/MeasurementMarkerGetResponsePoint'
                range:
                  $ref: '#/components/examples/MeasurementMarkerGetResponseRange'
              schema:
                $ref: '#/components/schemas/MeasurementMarker'
          description: Created
          headers: {}
      summary: Create Project Measurement Marker by Measurement UUID
      tags:
        - meas_Measurement Markers
    delete:
      operationId: deleteProjectMeasurementMarkers
      description: 計測マーカーを削除します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
      responses:
        '204':
          description: No Content
          headers: {}
      summary: Delete Project Measurement Markers by Measurement UUID
      tags:
        - meas_Measurement Markers
  /v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}:
    get:
      operationId: getProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID
      description: >-
        **Deprecated** このエンドポイントではなく、 `GET /measurements/{measurement_uuid}`
        を使用してください。
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
        - $ref: '#/components/parameters/PathMeasurementMarkerUUID'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                range:
                  $ref: '#/components/examples/MeasurementMarkerGetResponseRange'
                point:
                  $ref: '#/components/examples/MeasurementMarkerGetResponsePoint'
              schema:
                $ref: '#/components/schemas/MeasurementMarker'
          description: OK
          headers: {}
      summary: Get Project Measurement Marker using Measurement UUID
      tags:
        - meas_Measurement Markers
    put:
      operationId: updateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID
      description: 計測マーカーの情報を更新します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
        - $ref: '#/components/parameters/PathMeasurementMarkerUUID'
      requestBody:
        content:
          application/json:
            examples:
              range:
                $ref: '#/components/examples/MeasurementMarkerPutRequestRange'
              point:
                $ref: '#/components/examples/MeasurementMarkerPutRequestPoint'
            schema:
              $ref: '#/components/schemas/MeasurementMarkerPutRequest'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                range:
                  $ref: '#/components/examples/MeasurementMarkerGetResponseRange'
                point:
                  $ref: '#/components/examples/MeasurementMarkerGetResponsePoint'
              schema:
                $ref: '#/components/schemas/MeasurementMarker'
          description: OK
          headers: {}
      summary: Replace Project Measurement Marker using Measurement UUID
      tags:
        - meas_Measurement Markers
    delete:
      operationId: deleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID
      description: 計測マーカーを削除します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - $ref: '#/components/parameters/pathMeasUUID'
        - $ref: '#/components/parameters/PathMeasurementMarkerUUID'
      responses:
        '204':
          description: No Content
          headers: {}
      summary: Delete Project Measurement Marker using Measurement UUID
      tags:
        - meas_Measurement Markers
  /v1/projects/{project_uuid}/signals:
    get:
      operationId: listProjectSignals
      description: 信号定義のリストを取得します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - name: label
          example: label1
          in: query
          description: ラベルが指定した文字列から始まる信号定義を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。
          required: false
          schema:
            type: array
            items:
              type: string
        - name: sort
          description: 並べ替えに使用するキー
          example: label
          in: query
          required: false
          schema:
            enum:
              - label
              - created_at
              - updated_at
            type: string
        - name: order
          description: 並べ替えの順序
          example: asc
          in: query
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
        - name: limit
          description: 1回のリクエストで取得する件数
          example: '100'
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: page
          description: 取得するページの番号
          example: '1'
          in: query
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    items:
                      - channel: 1
                        conversion:
                          options:
                            bitsize: 8
                            endian: big
                            offset: 0
                            scale: 1
                            sign: signed
                            startbit: 0
                          type: num_fixed_point
                        created_at: '2017-02-11T01:23:45Z'
                        data_id: '00000001'
                        data_type: 1
                        description: this is signal1
                        display:
                          format: '%6.3f'
                          max: 10
                          min: -10
                          unit: m/s2
                        hash: sha256:8ddad69061d8...
                        label: signal1
                        updated_at: '2017-02-11T12:34:56Z'
                        uuid: 2cc7de37-6f71-4458-887e-10e618a6fcfb
                    page:
                      first: true
                      last: true
                      next: /path?xxx=1&bbb=2&page=3
                      previous: /path?xxx=1&bbb=2&page=1
                      total_count: 1
              schema:
                $ref: '#/components/schemas/Signals'
          description: OK
          headers: {}
      summary: List Project Signals
      tags:
        - meas_Signals
    post:
      operationId: createProjectSignal
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
      description: |-
        信号定義を作成します。

        * **Note**
            - 既存の信号定義と `label` が重複する場合、または `uuid` が重複する場合は、
              ステータスコード `409 Conflict` が返却されます。
      requestBody:
        content:
          application/json:
            examples:
              example:
                value:
                  channel: 1
                  conversion:
                    options:
                      bitsize: 8
                      endian: big
                      offset: 0
                      scale: 1
                      sign: signed
                      startbit: 0
                    type: num_fixed_point
                  data_id: '00000001'
                  data_type: 1
                  description: description of signal
                  display:
                    format: '%6.3f'
                    max: 10
                    min: -10
                    unit: m/s2
                  label: signal
                  uuid: 022a9941-d7ff-44ee-a9ff-55a623880a40
            schema:
              $ref: '#/components/schemas/CreateSignalRequest'
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    channel: 1
                    conversion:
                      options:
                        bitsize: 8
                        endian: big
                        offset: 0
                        scale: 1
                        sign: signed
                        startbit: 0
                      type: num_fixed_point
                    created_at: '2017-02-11T01:23:45Z'
                    data_id: '00000001'
                    data_type: 1
                    description: this is signal1
                    display:
                      format: '%6.3f'
                      max: 10
                      min: -10
                      unit: m/s2
                    hash: sha256:8ddad69061d8...
                    label: signal1
                    updated_at: '2017-02-11T12:34:56Z'
                    uuid: c1c3fd05-89c6-4da8-abdb-7d31aec2af18
              schema:
                $ref: '#/components/schemas/Signal'
          description: Created
          headers: {}
      summary: Create Project Signal
      tags:
        - meas_Signals
  /v1/projects/{project_uuid}/signals/{signal_uuid}:
    get:
      operationId: getProjectSignal
      description: 信号定義を取得します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - description: 信号定義のUUID
          example: a74b933c-7c3a-4e9f-bf16-299a96d26562
          in: path
          name: signal_uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    uuid: c1c3fd05-89c6-4da8-abdb-7d31aec2af18
                    label: signal1
                    data_id: '00000001'
                    data_type: 1
                    description: this is signal1
                    channel: 1
                    conversion:
                      options:
                        bitsize: 8
                        endian: big
                        offset: 0
                        scale: 1
                        sign: signed
                        startbit: 0
                      type: num_fixed_point
                    display:
                      format: '%6.3f'
                      max: 10
                      min: -10
                      unit: m/s2
                    hash: sha256:8ddad69061d8...
                    created_at: '2017-02-11T01:23:45Z'
                    updated_at: '2017-02-11T12:34:56Z'
              schema:
                $ref: '#/components/schemas/Signal'
          description: OK
          headers: {}
      summary: Get Project Signal
      tags:
        - meas_Signals
    put:
      operationId: updateProjectSignal
      description: 信号定義を更新します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - description: 信号定義のUUID
          example: a74b933c-7c3a-4e9f-bf16-299a96d26562
          in: path
          name: signal_uuid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              example:
                value:
                  channel: 1
                  conversion:
                    options:
                      bitsize: 8
                      endian: big
                      offset: 0
                      scale: 1
                      sign: signed
                      startbit: 0
                    type: num_fixed_point
                  data_id: '00000001'
                  data_type: 1
                  description: description of signal
                  display:
                    format: '%6.3f'
                    max: 10
                    min: -10
                    unit: m/s2
                  label: signal
            schema:
              $ref: '#/components/schemas/UpdateSignalRequest'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    uuid: c1c3fd05-89c6-4da8-abdb-7d31aec2af18
                    label: signal1
                    data_id: '00000001'
                    data_type: 1
                    description: this is signal1
                    channel: 1
                    conversion:
                      options:
                        bitsize: 8
                        endian: big
                        offset: 0
                        scale: 1
                        sign: signed
                        startbit: 0
                      type: num_fixed_point
                    display:
                      format: '%6.3f'
                      max: 10
                      min: -10
                      unit: m/s2
                    hash: sha256:8ddad69061d8...
                    created_at: '2017-02-11T01:23:45Z'
                    updated_at: '2017-02-11T12:34:56Z'
              schema:
                $ref: '#/components/schemas/Signal'
          description: OK
          headers: {}
      summary: Update Project Signal
      tags:
        - meas_Signals
    delete:
      operationId: deleteProjectSignal
      description: 信号定義を削除します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - description: 信号定義のUUID
          example: a74b933c-7c3a-4e9f-bf16-299a96d26562
          in: path
          name: signal_uuid
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          headers: {}
      summary: Delete Project Signal
      tags:
        - meas_Signals
  /v1/projects/{project_uuid}/trashed_measurements:
    get:
      operationId: listProjectTrashedMeasurements
      summary: List Project Trashed Measurements
      description: ゴミ箱に入っている計測のリストを取得します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - in: query
          name: limit
          example: 1
          description: 1回のリクエストで取得する件数。`0` を指定した場合は、デフォルト値の50件となります。
          schema:
            type: integer
            maximum: 50
            minimum: 0
        - in: query
          name: page
          example: 1
          description: 取得するページの番号
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              examples:
                example1:
                  value:
                    items:
                      - uuid: 2cc7de37-6f71-4458-887e-10e618a6fcfb
                        name: meas1
                        description: description of measurement
                        edge_uuid: 00de1861-6614-4435-af07-da9b4338d57c
                        duration: 100000000
                        ended: true
                        status: measuring
                        basetime: '2017-02-11T01:23:45.678901Z'
                        basetime_type: ntp
                        processed_ratio: 0.9
                        protected: false
                        received_data_points: null
                        markers:
                          - uuid: 887326ce-a2a2-4db6-8c06-2f8447f0f29e
                            name: name
                            description: description
                            type: point
                            detail:
                              occurred_elapsed_time: 100
                            tag:
                              key1: value1
                              key2: value2
                            elapsed_time: 1000
                            created_at: '2017-02-11T01:23:45Z'
                            created_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
                            updated_at: '2017-02-11T12:34:56Z'
                            updated_by: adbbd1ff-1e13-4b12-b125-e213945a65f8
                        created_at: '2017-02-11T01:23:45Z'
                        updated_at: '2017-02-11T12:34:56Z'
                    total_count: 1
              schema:
                $ref: '#/components/schemas/TrashedMeasurements'
      tags:
        - meas_Trashed Measurements
  /v1/projects/{project_uuid}/trashed_measurements/{measurement_uuid}:
    delete:
      operationId: deleteProjectTrashedMeasurement
      summary: Delete Project Trashed Measurement and Delete Data Points Immediately
      description: ゴミ箱に入っている計測と、その計測に関連付けられているデータポイントを直ちに削除します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - in: path
          schema:
            type: string
          name: measurement_uuid
          description: 計測のUUID
          required: true
          example: 86fff159-5887-43c9-bf2d-cd1b522c047d
      responses:
        '204':
          description: No Content
      tags:
        - meas_Trashed Measurements
  /v1/projects/{project_uuid}/trashed_measurements/{measurement_uuid}/restore:
    delete:
      operationId: restoreProjectTrashedMeasurement
      summary: Restore Project Measurement
      description: ゴミ箱に入っている計測を復元します。
      parameters:
        - $ref: '#/components/parameters/MeasPathProjectUUID'
        - in: path
          schema:
            type: string
          name: measurement_uuid
          description: 計測のUUID
          required: true
          example: 86fff159-5887-43c9-bf2d-cd1b522c047d
      responses:
        '204':
          description: No Content
      tags:
        - meas_Trashed Measurements
  /media/hlses:
    get:
      tags:
        - media_HLS
      deprecated: true
      description: >-
        **Deprecated** このエンドポイントではなく [`GET /media/videos`](#operation/getVideos)
        を使用してください
      summary: List HLSes
      operationId: getHLSes
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HLSList'
      parameters:
        - name: start
          in: query
          description: 取得対象範囲の始点（マイクロ秒単位のUNIX時刻）
          required: false
          example: 1234567890
          schema:
            type: integer
        - name: end
          in: query
          description: 取得対象範囲の終点（マイクロ秒単位のUNIX時刻）
          required: false
          example: 1234567890
          schema:
            type: integer
        - name: edge_uuid
          in: query
          description: エッジのUUID
          required: false
          example: 3699e2b9-5d87-4dbd-9b85-098e7dfaee76
          schema:
            type: string
        - name: channel
          in: query
          description: チャンネル
          required: false
          example: 1
          schema:
            type: integer
        - name: limit
          in: query
          description: 1回のリクエストで取得する件数
          required: false
          example: 1000
          schema:
            type: integer
  /media/jobs:
    get:
      tags:
        - media_Jobs
      deprecated: true
      description: >-
        （Deprecated。代わりに
        Prefix(`/projects/00000000-0000-0000-0000-000000000000/`)が付いたエンドポイントを使用してください）
        HLSへの変換ジョブのリストを取得します。
      summary: List Jobs
      operationId: getJobs
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/JobList'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblemMedia'
              examples:
                BadRequest:
                  $ref: '#/components/examples/ErrorProblemBadRequestMedia'
      parameters:
        - name: uuid
          description: 取得したいジョブのUUID
          example: ade4eea8-edc6-3ca5-c557-12a616c2028a
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: meas_uuid
          description: 計測のUUID
          example: a5170afc-9cc2-5327-e0e1-32746b5a7977
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: type
          description: |-
            - update
              - 計測内の動画データのうち、新しくサーバーが受信した部分（HLSにまだ変換されていない部分）を
                HLSに変換するジョブ。通常は計測実行中に行います。
            - finalize
              - 計測全体をサーバーに回収した後に、動画データ全体をHLSに変換するジョブ
            - delete
              - 変換によって作成されたHLSデータを削除するジョブ。
                このジョブを実行すると、HLSプレイリスト、セグメントファイル、
                データベース内のHLSに関する情報が削除され、この動画のHLSによる再生はできなくなります。
          example: update
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/JobType'
        - name: status
          description: ジョブのステータス
          example: succeeded
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/JobStatus'
        - $ref: '#/components/parameters/QueryLimitMedia'
        - $ref: '#/components/parameters/QueryPageMedia'
        - name: sort
          description: 並べ替えに使用するキー
          example: created_at
          in: query
          required: false
          schema:
            default: created_at
            type: string
            enum:
              - created_at
              - updated_at
        - $ref: '#/components/parameters/QueryOrderMedia'
    post:
      tags:
        - media_Jobs
      summary: Create Job
      deprecated: true
      description: >-
        （Deprecated。代わりに
        Prefix(`/projects/00000000-0000-0000-0000-000000000000/`)が付いたエンドポイントを使用してください）
        HLSへの変換ジョブを作成します。
      operationId: createJob
      responses:
        '201':
          description: Created
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblemMedia'
              examples:
                BadRequest:
                  $ref: '#/components/examples/ErrorProblemBadRequestMedia'
        '409':
          description: Conflict
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblemMedia'
              examples:
                Conflict:
                  $ref: '#/components/examples/ErrorProblemConflictMedia'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJobRequest'
  /media/measurements/{meas_uuid}/channels/{channel}/hlses/playlist.m3u8:
    get:
      summary: Get HLS Playlist
      description: >-
        **Depricated** このエンドポイントの代わりに、Videoオブジェクトの
        `hls`にあるPATHにしたがってPlaylistを取得してください。
      tags:
        - media_HLS
      operationId: getPlaylist
      deprecated: true
      responses:
        '200':
          description: OK
          content:
            application/vnd.apple.mpegurl:
              schema:
                type: string
      parameters:
        - $ref: '#/components/parameters/PathMeasUUIDMedia'
        - $ref: '#/components/parameters/PathChannelMedia'
        - name: force_end
          in: query
          description: '`true` にすると、取得するm3u8形式のプレイリストに強制的にEXT-X-ENDLISTを追加します。'
          required: false
          example: true
          schema:
            type: boolean
  /media/measurements/{meas_uuid}/channels/{channel}/mp4s/measurement.mp4:
    get:
      summary: Get HLS as FMP4
      description: >-
        **Deprecated** このエンドポイントの代わりに [`POST
        /media/videos/{video_uuid}/mp4s`](#operation/createMP4) を使用してください。
        mp4リソース作成後、 `MP4`オブジェクトの `file_path`にあるPATHに従って動画を取得してください
      tags:
        - media_HLS
      operationId: getFMP4
      deprecated: true
      responses:
        '200':
          description: OK
          content:
            video/mp4:
              schema:
                type: string
                format: binary
      parameters:
        - $ref: '#/components/parameters/PathMeasUUIDMedia'
        - $ref: '#/components/parameters/PathChannelMedia'
  /media/videos:
    get:
      tags:
        - media_Videos
      deprecated: true
      description: >-
        （Deprecated。代わりに
        Prefix(`/projects/00000000-0000-0000-0000-000000000000/`)が付いたエンドポイントを使用してください）
        動画（video）のリストを取得します。
      summary: List Videos
      operationId: getVideos
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Videos'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblemMedia'
              examples:
                BadRequest:
                  $ref: '#/components/examples/ErrorProblemBadRequestMedia'
      parameters:
        - name: uuid
          in: query
          description: 動画（video）のUUID
          required: false
          example: 3699e2b9-5d87-4dbd-9b85-098e7dfaee76
          schema:
            type: string
        - name: meas_uuid
          in: query
          description: 計測のUUID
          required: false
          example: 3699e2b9-5d87-4dbd-9b85-098e7dfaee76
          schema:
            type: string
        - name: channel
          in: query
          description: チャンネル
          required: false
          example: 1
          schema:
            type: integer
        - name: sort
          in: query
          description: |-
            並べ替えに使用するキー。接尾辞 `+` を付けた場合は昇順、 `-` を付けた場合は降順で出力されます。
            接尾辞を省略した場合は昇順となります。例えば、 `name-` を指定すると、nameによる降順で出力されます。

              - `channel`
              - `created_at`
              - `updated_at`
          schema:
            default: create_at+
            type: string
        - $ref: '#/components/parameters/QueryPageMedia'
        - $ref: '#/components/parameters/QueryPerPageMedia'
  /media/videos/{video_uuid}:
    get:
      tags:
        - media_Videos
      deprecated: true
      description: >-
        （Deprecated。代わりに
        Prefix(`/projects/00000000-0000-0000-0000-000000000000/`)が付いたエンドポイントを使用してください）
        動画を取得します。
      summary: Get Video
      operationId: getVideo
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Video'
      parameters:
        - $ref: '#/components/parameters/PathVideoUUID'
  /media/videos/{video_uuid}/jpegs:
    get:
      tags:
        - media_Videos
      deprecated: true
      description: >-
        （Deprecated。代わりに
        Prefix(`/projects/00000000-0000-0000-0000-000000000000/`)が付いたエンドポイントを使用してください）
        動画（video）から変換されたJPEGデータのリストを取得します。
      summary: List JPEGs
      operationId: getJpegs
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Jpegs'
      parameters:
        - $ref: '#/components/parameters/PathVideoUUID'
    post:
      tags:
        - media_Videos
      deprecated: true
      description: >-
        （Deprecated。代わりに
        Prefix(`/projects/00000000-0000-0000-0000-000000000000/`)が付いたエンドポイントを使用してください）
        動画（video）を変換してJPEGデータを作成します。
      summary: Create JPEG
      operationId: createJpeg
      responses:
        '201':
          description: Created
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Jpeg'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblemMedia'
              examples:
                BadRequest:
                  $ref: '#/components/examples/ErrorProblemBadRequestMedia'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJpegRequest'
      parameters:
        - $ref: '#/components/parameters/PathVideoUUID'
  /media/videos/{video_uuid}/jpegs/{jpeg_uuid}:
    get:
      tags:
        - media_Videos
      deprecated: true
      description: >-
        （Deprecated。代わりに
        Prefix(`/projects/00000000-0000-0000-0000-000000000000/`)が付いたエンドポイントを使用してください）
        動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、`GET
        /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip`
        を使用してください。
      summary: Get JPEG
      operationId: getJpeg
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Jpeg'
      parameters:
        - $ref: '#/components/parameters/PathVideoUUID'
        - $ref: '#/components/parameters/PathJpegUUID'
    delete:
      tags:
        - media_Videos
      deprecated: true
      description: >-
        （Deprecated。代わりに
        Prefix(`/projects/00000000-0000-0000-0000-000000000000/`)が付いたエンドポイントを使用してください）
        動画（video）から変換されたJPEGデータを削除します。
      summary: Delete JPEG
      operationId: deleteJpeg
      responses:
        '204':
          description: No Content
      parameters:
        - $ref: '#/components/parameters/PathVideoUUID'
        - $ref: '#/components/parameters/PathJpegUUID'
  /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/cancel_convert:
    put:
      tags:
        - media_Videos
      deprecated: true
      description: >-
        （Deprecated。代わりに
        Prefix(`/projects/00000000-0000-0000-0000-000000000000/`)が付いたエンドポイントを使用してください）
        動画（video）からJPEGデータへの変換をキャンセルします。
      summary: Cancel Creating JPEG
      operationId: cancelCreatingJpeg
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Jpeg'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblemMedia'
              examples:
                BadRequest:
                  $ref: '#/components/examples/ErrorProblemBadRequestMedia'
      parameters:
        - $ref: '#/components/parameters/PathVideoUUID'
        - $ref: '#/components/parameters/PathJpegUUID'
  /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip:
    get:
      tags:
        - media_Videos
      deprecated: true
      description: >-
        （Deprecated。代わりに
        Prefix(`/projects/00000000-0000-0000-0000-000000000000/`)が付いたエンドポイントを使用してください）
        JPEGデータをZIPファイルにまとめた形で取得します。
      summary: Get JPEG as zip
      operationId: getJpegAsZip
      responses:
        '200':
          description: OK
          content:
            application/zip:
              schema:
                type: string
                format: binary
      parameters:
        - $ref: '#/components/parameters/PathVideoUUID'
        - $ref: '#/components/parameters/PathJpegUUID'
        - name: indexes
          in: query
          description: >-
            取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 `indexes`
            パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。
          required: false
          schema:
            type: array
            items:
              type: integer
              example: 1
  /media/videos/{video_uuid}/mp4s:
    get:
      tags:
        - media_Videos
      deprecated: true
      description: >-
        （Deprecated。代わりに
        Prefix(`/projects/00000000-0000-0000-0000-000000000000/`)が付いたエンドポイントを使用してください）
        動画（video）から変換されたMP4データのリストを取得します。
      summary: List MP4s
      operationId: getMP4s
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MP4s'
      parameters:
        - $ref: '#/components/parameters/PathVideoUUID'
    post:
      tags:
        - media_Videos
      deprecated: true
      description: >-
        （Deprecated。代わりに
        Prefix(`/projects/00000000-0000-0000-0000-000000000000/`)が付いたエンドポイントを使用してください）
        動画（video）を変換してMP4データを作成します。
      summary: Create MP4
      operationId: createMP4
      responses:
        '201':
          description: Created
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MP4'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblemMedia'
              examples:
                BadRequest:
                  $ref: '#/components/examples/ErrorProblemBadRequestMedia'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMP4Request'
      parameters:
        - $ref: '#/components/parameters/PathVideoUUID'
  /media/videos/{video_uuid}/mp4s/{mp4_uuid}:
    get:
      tags:
        - media_Videos
      deprecated: true
      description: >-
        （Deprecated。代わりに
        Prefix(`/projects/00000000-0000-0000-0000-000000000000/`)が付いたエンドポイントを使用してください）
        動画（video）から変換されたMP4データの情報を取得します。
      summary: Get MP4
      operationId: getMP4
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MP4'
      parameters:
        - $ref: '#/components/parameters/PathVideoUUID'
        - $ref: '#/components/parameters/PathMP4UUID'
    delete:
      tags:
        - media_Videos
      deprecated: true
      description: >-
        （Deprecated。代わりに
        Prefix(`/projects/00000000-0000-0000-0000-000000000000/`)が付いたエンドポイントを使用してください）
        動画（video）から変換されたMP4データを削除します。
      summary: Delete MP4
      operationId: deleteMP4
      responses:
        '204':
          description: No Content
      parameters:
        - $ref: '#/components/parameters/PathVideoUUID'
        - $ref: '#/components/parameters/PathMP4UUID'
  /media/videos/{video_uuid}/mp4s/{mp4_uuid}/cancel_convert:
    put:
      tags:
        - media_Videos
      deprecated: true
      description: >-
        （Deprecated。代わりに
        Prefix(`/projects/00000000-0000-0000-0000-000000000000/`)が付いたエンドポイントを使用してください）
        動画（video）からMP4データへの変換をキャンセルします。
      summary: Cancel Creating MP4
      operationId: cancelCreatingMP4
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MP4'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblemMedia'
              examples:
                BadRequest:
                  $ref: '#/components/examples/ErrorProblemBadRequestMedia'
      parameters:
        - $ref: '#/components/parameters/PathVideoUUID'
        - $ref: '#/components/parameters/PathMP4UUID'
  /media/ws/edges/{edge_uuid}/fmp4s/{channel}:
    get:
      operationId: connectLive
      tags:
        - media_Live
      deprecated: true
      description: >-
        **Deprecated** このエンドポイントの代わりに [`GET /v1/stream`](#operation/Stream)
        でデータを取得し、WebCodecsを使用して取得したデータをデコードしてください。
      parameters:
        - $ref: '#/components/parameters/PathEdgeUUIDMedia'
        - $ref: '#/components/parameters/PathChannelMedia'
      responses:
        '101':
          description: Switching Protocols
      summary: Get realtime video stream
  /media/projects/{project_uuid}/hlses:
    get:
      tags:
        - media_HLS
      deprecated: true
      description: >-
        **Deprecated** このエンドポイントではなく [`GET /media/videos`](#operation/getVideos)
        を使用してください
      summary: List Project HLSes
      operationId: getProjectHLSes
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HLSList'
      parameters:
        - $ref: '#/components/parameters/MediaPathProjectUUID'
        - name: start
          in: query
          description: 取得対象範囲の始点（マイクロ秒単位のUNIX時刻）
          required: false
          example: 123456789
          schema:
            type: integer
        - name: end
          in: query
          description: 取得対象範囲の終点（マイクロ秒単位のUNIX時刻）
          required: false
          example: 1234567890
          schema:
            type: integer
        - name: edge_uuid
          in: query
          description: エッジのUUID
          required: false
          example: 3699e2b9-5d87-4dbd-9b85-098e7dfaee76
          schema:
            type: string
        - name: channel
          in: query
          description: チャンネル
          required: false
          example: 1
          schema:
            type: integer
        - name: limit
          in: query
          description: 1回のリクエストで取得する件数
          required: false
          example: 1000
          schema:
            type: integer
  /media/projects/{project_uuid}/jobs:
    get:
      tags:
        - media_Jobs
      description: HLSへの変換ジョブのリストを取得します。
      summary: List Project Jobs
      operationId: getProjectJobs
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/JobList'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblemMedia'
              examples:
                BadRequest:
                  $ref: '#/components/examples/ErrorProblemBadRequestMedia'
      parameters:
        - name: uuid
          description: 取得したいジョブのUUID
          example: ade4eea8-edc6-3ca5-c557-12a616c2028a
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: meas_uuid
          description: 計測のUUID
          example: a5170afc-9cc2-5327-e0e1-32746b5a7977
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: type
          description: |-
            - update
              - 計測内の動画データのうち、新しくサーバーが受信した部分（HLSにまだ変換されていない部分）を
                HLSに変換するジョブ。通常は計測実行中に行います。
            - finalize
              - 計測全体をサーバーに回収した後に、動画データ全体をHLSに変換するジョブ
            - delete
              - 変換によって作成されたHLSデータを削除するジョブ。
                このジョブを実行すると、HLSプレイリスト、セグメントファイル、
                データベース内のHLSに関する情報が削除され、この動画のHLSによる再生はできなくなります。
          example: update
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/JobType'
        - name: status
          description: ジョブのステータス
          example: succeeded
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/JobStatus'
        - $ref: '#/components/parameters/MediaPathProjectUUID'
        - $ref: '#/components/parameters/QueryLimitMedia'
        - $ref: '#/components/parameters/QueryPageMedia'
        - name: sort
          description: 並べ替えに使用するキー
          example: created_at
          in: query
          required: false
          schema:
            default: created_at
            type: string
            enum:
              - created_at
              - updated_at
        - $ref: '#/components/parameters/QueryOrderMedia'
    post:
      tags:
        - media_Jobs
      summary: Create Project Job
      description: HLSへの変換ジョブを作成します。
      operationId: createProjectJob
      parameters:
        - $ref: '#/components/parameters/MediaPathProjectUUID'
      responses:
        '201':
          description: Created
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblemMedia'
              examples:
                BadRequest:
                  $ref: '#/components/examples/ErrorProblemBadRequestMedia'
        '409':
          description: Conflict
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblemMedia'
              examples:
                Conflict:
                  $ref: '#/components/examples/ErrorProblemConflictMedia'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJobRequest'
  /media/projects/{project_uuid}/measurements/{meas_uuid}/channels/{channel}/hlses/playlist.m3u8:
    get:
      summary: Get Project HLS Playlist
      description: >-
        **Depricated** このエンドポイントの代わりに、Videoオブジェクトの
        `hls`にあるPATHにしたがってPlaylistを取得してください。
      tags:
        - media_HLS
      operationId: getProjectPlaylist
      deprecated: true
      responses:
        '200':
          description: OK
          content:
            application/vnd.apple.mpegurl:
              schema:
                type: string
      parameters:
        - $ref: '#/components/parameters/MediaPathProjectUUID'
        - $ref: '#/components/parameters/PathMeasUUIDMedia'
        - $ref: '#/components/parameters/PathChannelMedia'
        - name: force_end
          in: query
          description: '`true` にすると、取得するm3u8形式のプレイリストに強制的にEXT-X-ENDLISTを追加します。'
          required: false
          example: true
          schema:
            type: boolean
  /media/projects/{project_uuid}/measurements/{meas_uuid}/channels/{channel}/mp4s/measurement.mp4:
    get:
      summary: Get Project HLS as FMP4
      description: >-
        **Deprecated** このエンドポイントの代わりに [`POST
        /media/videos/{video_uuid}/mp4s`](#operation/createMP4) を使用してください。
        mp4リソース作成後、 `MP4`オブジェクトの `file_path`にあるPATHに従って動画を取得してください
      tags:
        - media_HLS
      operationId: getProjectFMP4
      deprecated: true
      responses:
        '200':
          description: OK
          content:
            video/mp4:
              schema:
                type: string
                format: binary
      parameters:
        - $ref: '#/components/parameters/MediaPathProjectUUID'
        - $ref: '#/components/parameters/PathMeasUUIDMedia'
        - $ref: '#/components/parameters/PathChannelMedia'
  /media/projects/{project_uuid}/videos:
    get:
      tags:
        - media_Videos
      description: 動画（video）のリストを取得します。
      summary: List Project Videos
      operationId: getProjectVideos
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Videos'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblemMedia'
              examples:
                BadRequest:
                  $ref: '#/components/examples/ErrorProblemBadRequestMedia'
      parameters:
        - name: uuid
          in: query
          description: 動画（video）のUUID
          required: false
          example: 3699e2b9-5d87-4dbd-9b85-098e7dfaee76
          schema:
            type: string
        - name: meas_uuid
          in: query
          description: 計測のUUID
          required: false
          example: 3699e2b9-5d87-4dbd-9b85-098e7dfaee76
          schema:
            type: string
        - name: channel
          in: query
          description: チャンネル
          required: false
          example: 1
          schema:
            type: integer
        - name: sort
          in: query
          description: |-
            並べ替えに使用するキー。接尾辞 `+` を付けた場合は昇順、 `-` を付けた場合は降順で出力されます。
            接尾辞を省略した場合は昇順となります。例えば、 `name-` を指定すると、nameによる降順で出力されます。

              - `channel`
              - `created_at`
              - `updated_at`
          schema:
            default: create_at+
            type: string
        - $ref: '#/components/parameters/MediaPathProjectUUID'
        - $ref: '#/components/parameters/QueryPageMedia'
        - $ref: '#/components/parameters/QueryPerPageMedia'
  /media/projects/{project_uuid}/videos/{video_uuid}:
    get:
      tags:
        - media_Videos
      description: 動画を取得します。
      summary: Get Project Video
      operationId: getProjectVideo
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Video'
      parameters:
        - $ref: '#/components/parameters/MediaPathProjectUUID'
        - $ref: '#/components/parameters/PathVideoUUID'
  /media/projects/{project_uuid}/videos/{video_uuid}/jpegs:
    get:
      tags:
        - media_Videos
      description: 動画（video）から変換されたJPEGデータのリストを取得します。
      summary: List Project JPEGs
      operationId: getProjectJpegs
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Jpegs'
      parameters:
        - $ref: '#/components/parameters/MediaPathProjectUUID'
        - $ref: '#/components/parameters/PathVideoUUID'
    post:
      tags:
        - media_Videos
      description: 動画（video）を変換してJPEGデータを作成します。
      summary: Create Project JPEG
      operationId: createProjectJpeg
      responses:
        '201':
          description: Created
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Jpeg'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblemMedia'
              examples:
                BadRequest:
                  $ref: '#/components/examples/ErrorProblemBadRequestMedia'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJpegRequest'
      parameters:
        - $ref: '#/components/parameters/MediaPathProjectUUID'
        - $ref: '#/components/parameters/PathVideoUUID'
  /media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}:
    get:
      tags:
        - media_Videos
      description: >-
        動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、`GET
        /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip`
        を使用してください。
      summary: Get Project JPEG
      operationId: getProjectJpeg
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Jpeg'
      parameters:
        - $ref: '#/components/parameters/MediaPathProjectUUID'
        - $ref: '#/components/parameters/PathVideoUUID'
        - $ref: '#/components/parameters/PathJpegUUID'
    delete:
      tags:
        - media_Videos
      description: 動画（video）から変換されたJPEGデータを削除します。
      summary: Delete Project JPEG
      operationId: deleteProjectJpeg
      responses:
        '204':
          description: No Content
      parameters:
        - $ref: '#/components/parameters/MediaPathProjectUUID'
        - $ref: '#/components/parameters/PathVideoUUID'
        - $ref: '#/components/parameters/PathJpegUUID'
  /media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}/cancel_convert:
    put:
      tags:
        - media_Videos
      description: 動画（video）からJPEGデータへの変換をキャンセルします。
      summary: Cancel Creating Project JPEG
      operationId: cancelCreatingProjectJpeg
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Jpeg'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblemMedia'
              examples:
                BadRequest:
                  $ref: '#/components/examples/ErrorProblemBadRequestMedia'
      parameters:
        - $ref: '#/components/parameters/MediaPathProjectUUID'
        - $ref: '#/components/parameters/PathVideoUUID'
        - $ref: '#/components/parameters/PathJpegUUID'
  /media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip:
    get:
      tags:
        - media_Videos
      description: JPEGデータをZIPファイルにまとめた形で取得します。
      summary: Get Project JPEG as zip
      operationId: getProjectJpegAsZip
      responses:
        '200':
          description: OK
          content:
            application/zip:
              schema:
                type: string
                format: binary
      parameters:
        - $ref: '#/components/parameters/MediaPathProjectUUID'
        - $ref: '#/components/parameters/PathVideoUUID'
        - $ref: '#/components/parameters/PathJpegUUID'
        - name: indexes
          in: query
          description: >-
            取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 `indexes`
            パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。
          required: false
          schema:
            type: array
            items:
              type: integer
              example: 1
  /media/projects/{project_uuid}/videos/{video_uuid}/mp4s:
    get:
      tags:
        - media_Videos
      description: 動画（video）から変換されたMP4データのリストを取得します。
      summary: List Project MP4s
      operationId: getProjectMP4s
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MP4s'
      parameters:
        - $ref: '#/components/parameters/MediaPathProjectUUID'
        - $ref: '#/components/parameters/PathVideoUUID'
    post:
      tags:
        - media_Videos
      description: 動画（video）を変換してMP4データを作成します。
      summary: Create Project MP4
      operationId: createProjectMP4
      responses:
        '201':
          description: Created
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MP4'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblemMedia'
              examples:
                BadRequest:
                  $ref: '#/components/examples/ErrorProblemBadRequestMedia'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMP4Request'
      parameters:
        - $ref: '#/components/parameters/MediaPathProjectUUID'
        - $ref: '#/components/parameters/PathVideoUUID'
  /media/projects/{project_uuid}/videos/{video_uuid}/mp4s/{mp4_uuid}:
    get:
      tags:
        - media_Videos
      description: 動画（video）から変換されたMP4データの情報を取得します。
      summary: Get Project MP4
      operationId: getProjectMP4
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MP4'
      parameters:
        - $ref: '#/components/parameters/MediaPathProjectUUID'
        - $ref: '#/components/parameters/PathVideoUUID'
        - $ref: '#/components/parameters/PathMP4UUID'
    delete:
      tags:
        - media_Videos
      description: 動画（video）から変換されたMP4データを削除します。
      summary: Delete Project MP4
      operationId: deleteProjectMP4
      responses:
        '204':
          description: No Content
      parameters:
        - $ref: '#/components/parameters/MediaPathProjectUUID'
        - $ref: '#/components/parameters/PathVideoUUID'
        - $ref: '#/components/parameters/PathMP4UUID'
  /media/projects/{project_uuid}/videos/{video_uuid}/mp4s/{mp4_uuid}/cancel_convert:
    put:
      tags:
        - media_Videos
      description: 動画（video）からMP4データへの変換をキャンセルします。
      summary: Cancel Creating Project MP4
      operationId: cancelCreatingProjectMP4
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MP4'
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorProblemMedia'
              examples:
                BadRequest:
                  $ref: '#/components/examples/ErrorProblemBadRequestMedia'
      parameters:
        - $ref: '#/components/parameters/MediaPathProjectUUID'
        - $ref: '#/components/parameters/PathVideoUUID'
        - $ref: '#/components/parameters/PathMP4UUID'
  /media/projects/{project_uuid}/ws/edges/{edge_uuid}/fmp4s/{channel}:
    get:
      operationId: connectProjectLive
      tags:
        - media_Live
      deprecated: true
      description: >-
        **Deprecated** このエンドポイントの代わりに [`GET /v1/stream`](#operation/Stream)
        でデータを取得し、WebCodecsを使用して取得したデータをデコードしてください。
      parameters:
        - $ref: '#/components/parameters/MediaPathProjectUUID'
        - $ref: '#/components/parameters/PathEdgeUUIDMedia'
        - $ref: '#/components/parameters/PathChannelMedia'
      responses:
        '101':
          description: Switching Protocols
      summary: Get Project realtime video stream
  /v1/version:
    get:
      operationId: getVersion
      description: APIバージョンを取得します。
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    version: 1.0.0
              schema:
                properties:
                  version:
                    description: APIのバージョン
                    type: string
                required:
                  - version
                type: object
          description: OK
          headers: {}
      summary: Get Version
      tags:
        - versions_Version
tags:
  - name: auth_Clients
    x-displayName: Clients
  - name: auth_Authorization
    x-displayName: Authorization
  - name: auth_Edges
    x-displayName: Edges
  - name: auth_OAuth2
    x-displayName: OAuth2
  - name: auth_Me
    x-displayName: Me
  - name: auth_Users
    x-displayName: Users
  - name: auth_Projects
    x-displayName: Projects
  - name: auth_Groups
    x-displayName: Groups
  - name: auth_Group Members
    x-displayName: Group Members
  - name: auth_Project Edges
    x-displayName: Project Edges
  - name: auth_Project Members
    x-displayName: Project Members
  - name: auth_Roles
    x-displayName: Roles
  - name: auth_Scopes
    x-displayName: Scopes
  - name: broker_Edge Connections
    x-displayName: Edge Connections
  - name: broker_Stream
    x-displayName: Stream
  - name: broker_iSCP
    x-displayName: iSCP
  - name: meas_data_model
    x-displayName: DataPoint Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/DataPoint" />
  - name: meas_DataPoints
    x-displayName: DataPoints
  - name: meas_DataPointIDs
    x-displayName: DataPointIDs
  - name: meas_Measurements
    x-displayName: Measurements
  - name: meas_Measurement Jobs
    x-displayName: Measurement Jobs
  - name: meas_Measurement Markers
    x-displayName: Measurement Markers
  - name: meas_Uploading Measurements
    x-displayName: Uploading Measurements
  - name: meas_Signals
    x-displayName: Signals
  - name: meas_Trashed Measurements
    x-displayName: Trashed Measurements
  - name: media_HLS
    x-displayName: HLS
  - name: media_Jobs
    x-displayName: Jobs
  - name: media_Videos
    x-displayName: Videos
  - name: media_Live
    x-displayName: Live
  - name: versions_Version
    x-displayName: Version
x-tagGroups:
  - name: auth
    tags:
      - auth_Clients
      - auth_Authorization
      - auth_Edges
      - auth_OAuth2
      - auth_Me
      - auth_Users
      - auth_Projects
      - auth_Groups
      - auth_Group Members
      - auth_Project Edges
      - auth_Project Members
      - auth_Roles
      - auth_Scopes
  - name: broker
    tags:
      - broker_Edge Connections
      - broker_Stream
      - broker_iSCP
    description: intdash broker service
  - name: meas
    tags:
      - meas_data_model
      - meas_DataPoints
      - meas_DataPointIDs
      - meas_Measurements
      - meas_Measurement Jobs
      - meas_Measurement Markers
      - meas_Uploading Measurements
      - meas_Signals
      - meas_Trashed Measurements
    description: Measurements service API specification
  - name: media
    tags:
      - media_HLS
      - media_Jobs
      - media_Videos
      - media_Live
  - name: versions
    tags:
      - versions_Version
security:
  - IntdashToken: []
  - OAuth2TokenInHeader: []
  - OAuth2TokenInCookie: []
